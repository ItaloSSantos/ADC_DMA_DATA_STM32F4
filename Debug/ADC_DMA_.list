
ADC_DMA_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000481c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080049ac  080049ac  000059ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a44  08004a44  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004a44  08004a44  00005a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a4c  08004a4c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a4c  08004a4c  00005a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a50  08004a50  00005a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004a54  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          00000330  2000005c  2000005c  0000605c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000038c  2000038c  0000605c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ac0d  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e99  00000000  00000000  00010c99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008e0  00000000  00000000  00012b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006c5  00000000  00000000  00013418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021b43  00000000  00000000  00013add  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b0b1  00000000  00000000  00035620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfab8  00000000  00000000  000406d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00110189  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002888  00000000  00000000  001101cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  00112a54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004994 	.word	0x08004994

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004994 	.word	0x08004994

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <HAL_UART_RxCpltCallback>:
//RingBuffer rxBufferUart2 = { .head = 0, .tail = 0 };

// Declarar adcBuffer
extern uint16_t adcBuffer[2]; // ajuste conforme seu código ADC

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80005ac:	b5b0      	push	{r4, r5, r7, lr}
 80005ae:	b094      	sub	sp, #80	@ 0x50
 80005b0:	af04      	add	r7, sp, #16
 80005b2:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART2) {
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a40      	ldr	r2, [pc, #256]	@ (80006bc <HAL_UART_RxCpltCallback+0x110>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d17a      	bne.n	80006b4 <HAL_UART_RxCpltCallback+0x108>
        // Compara o comando recebido
        if (strncmp(rxData, comando_adc, RX_SIZE) == 0) {
 80005be:	2207      	movs	r2, #7
 80005c0:	493f      	ldr	r1, [pc, #252]	@ (80006c0 <HAL_UART_RxCpltCallback+0x114>)
 80005c2:	4840      	ldr	r0, [pc, #256]	@ (80006c4 <HAL_UART_RxCpltCallback+0x118>)
 80005c4:	f003 fd5e 	bl	8004084 <strncmp>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d15c      	bne.n	8000688 <HAL_UART_RxCpltCallback+0xdc>
            uint32_t mV0 = ((uint32_t)adcBuffer[0] * 3300) / 4095;
 80005ce:	4b3e      	ldr	r3, [pc, #248]	@ (80006c8 <HAL_UART_RxCpltCallback+0x11c>)
 80005d0:	881b      	ldrh	r3, [r3, #0]
 80005d2:	461a      	mov	r2, r3
 80005d4:	f640 43e4 	movw	r3, #3300	@ 0xce4
 80005d8:	fb03 f202 	mul.w	r2, r3, r2
 80005dc:	4b3b      	ldr	r3, [pc, #236]	@ (80006cc <HAL_UART_RxCpltCallback+0x120>)
 80005de:	fba3 1302 	umull	r1, r3, r3, r2
 80005e2:	1ad2      	subs	r2, r2, r3
 80005e4:	0852      	lsrs	r2, r2, #1
 80005e6:	4413      	add	r3, r2
 80005e8:	0adb      	lsrs	r3, r3, #11
 80005ea:	63bb      	str	r3, [r7, #56]	@ 0x38
            uint32_t mV1 = ((uint32_t)adcBuffer[1] * 3300) / 4095;
 80005ec:	4b36      	ldr	r3, [pc, #216]	@ (80006c8 <HAL_UART_RxCpltCallback+0x11c>)
 80005ee:	885b      	ldrh	r3, [r3, #2]
 80005f0:	461a      	mov	r2, r3
 80005f2:	f640 43e4 	movw	r3, #3300	@ 0xce4
 80005f6:	fb03 f202 	mul.w	r2, r3, r2
 80005fa:	4b34      	ldr	r3, [pc, #208]	@ (80006cc <HAL_UART_RxCpltCallback+0x120>)
 80005fc:	fba3 1302 	umull	r1, r3, r3, r2
 8000600:	1ad2      	subs	r2, r2, r3
 8000602:	0852      	lsrs	r2, r2, #1
 8000604:	4413      	add	r3, r2
 8000606:	0adb      	lsrs	r3, r3, #11
 8000608:	637b      	str	r3, [r7, #52]	@ 0x34

            char response[40];
            snprintf(response, sizeof(response),
 800060a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800060c:	4a30      	ldr	r2, [pc, #192]	@ (80006d0 <HAL_UART_RxCpltCallback+0x124>)
 800060e:	fba2 2303 	umull	r2, r3, r2, r3
 8000612:	099d      	lsrs	r5, r3, #6
                     "ADC0: %lu.%02luV, ADC1: %lu.%02luV\r\n",
                     mV0 / 1000, (mV0 % 1000) / 10,
 8000614:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000616:	4b2e      	ldr	r3, [pc, #184]	@ (80006d0 <HAL_UART_RxCpltCallback+0x124>)
 8000618:	fba3 1302 	umull	r1, r3, r3, r2
 800061c:	099b      	lsrs	r3, r3, #6
 800061e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000622:	fb01 f303 	mul.w	r3, r1, r3
 8000626:	1ad3      	subs	r3, r2, r3
            snprintf(response, sizeof(response),
 8000628:	4a2a      	ldr	r2, [pc, #168]	@ (80006d4 <HAL_UART_RxCpltCallback+0x128>)
 800062a:	fba2 2303 	umull	r2, r3, r2, r3
 800062e:	08d9      	lsrs	r1, r3, #3
 8000630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000632:	4a27      	ldr	r2, [pc, #156]	@ (80006d0 <HAL_UART_RxCpltCallback+0x124>)
 8000634:	fba2 2303 	umull	r2, r3, r2, r3
 8000638:	0998      	lsrs	r0, r3, #6
                     mV1 / 1000, (mV1 % 1000) / 10);
 800063a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800063c:	4b24      	ldr	r3, [pc, #144]	@ (80006d0 <HAL_UART_RxCpltCallback+0x124>)
 800063e:	fba3 4302 	umull	r4, r3, r3, r2
 8000642:	099b      	lsrs	r3, r3, #6
 8000644:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8000648:	fb04 f303 	mul.w	r3, r4, r3
 800064c:	1ad3      	subs	r3, r2, r3
            snprintf(response, sizeof(response),
 800064e:	4a21      	ldr	r2, [pc, #132]	@ (80006d4 <HAL_UART_RxCpltCallback+0x128>)
 8000650:	fba2 2303 	umull	r2, r3, r2, r3
 8000654:	08db      	lsrs	r3, r3, #3
 8000656:	f107 040c 	add.w	r4, r7, #12
 800065a:	9302      	str	r3, [sp, #8]
 800065c:	9001      	str	r0, [sp, #4]
 800065e:	9100      	str	r1, [sp, #0]
 8000660:	462b      	mov	r3, r5
 8000662:	4a1d      	ldr	r2, [pc, #116]	@ (80006d8 <HAL_UART_RxCpltCallback+0x12c>)
 8000664:	2128      	movs	r1, #40	@ 0x28
 8000666:	4620      	mov	r0, r4
 8000668:	f003 fcce 	bl	8004008 <sniprintf>
            HAL_UART_Transmit_IT(&huart2, (uint8_t*)response, strlen(response));
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff fdad 	bl	80001d0 <strlen>
 8000676:	4603      	mov	r3, r0
 8000678:	b29a      	uxth	r2, r3
 800067a:	f107 030c 	add.w	r3, r7, #12
 800067e:	4619      	mov	r1, r3
 8000680:	4816      	ldr	r0, [pc, #88]	@ (80006dc <HAL_UART_RxCpltCallback+0x130>)
 8000682:	f002 fd53 	bl	800312c <HAL_UART_Transmit_IT>
 8000686:	e00b      	b.n	80006a0 <HAL_UART_RxCpltCallback+0xf4>
        } else {
            const char *error = "Comando invalido\r\n";
 8000688:	4b15      	ldr	r3, [pc, #84]	@ (80006e0 <HAL_UART_RxCpltCallback+0x134>)
 800068a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            HAL_UART_Transmit_IT(&huart2, (uint8_t*)error, strlen(error));
 800068c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800068e:	f7ff fd9f 	bl	80001d0 <strlen>
 8000692:	4603      	mov	r3, r0
 8000694:	b29b      	uxth	r3, r3
 8000696:	461a      	mov	r2, r3
 8000698:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800069a:	4810      	ldr	r0, [pc, #64]	@ (80006dc <HAL_UART_RxCpltCallback+0x130>)
 800069c:	f002 fd46 	bl	800312c <HAL_UART_Transmit_IT>
        }

        // Limpa buffer e reinicia recepção
        memset(rxData, 0, RX_SIZE);
 80006a0:	2207      	movs	r2, #7
 80006a2:	2100      	movs	r1, #0
 80006a4:	4807      	ldr	r0, [pc, #28]	@ (80006c4 <HAL_UART_RxCpltCallback+0x118>)
 80006a6:	f003 fce5 	bl	8004074 <memset>
        HAL_UART_Receive_IT(&huart2, (uint8_t*)rxData, RX_SIZE);
 80006aa:	2207      	movs	r2, #7
 80006ac:	4905      	ldr	r1, [pc, #20]	@ (80006c4 <HAL_UART_RxCpltCallback+0x118>)
 80006ae:	480b      	ldr	r0, [pc, #44]	@ (80006dc <HAL_UART_RxCpltCallback+0x130>)
 80006b0:	f002 fd72 	bl	8003198 <HAL_UART_Receive_IT>
    }
}
 80006b4:	bf00      	nop
 80006b6:	3740      	adds	r7, #64	@ 0x40
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bdb0      	pop	{r4, r5, r7, pc}
 80006bc:	40004400 	.word	0x40004400
 80006c0:	080049e8 	.word	0x080049e8
 80006c4:	20000078 	.word	0x20000078
 80006c8:	20000230 	.word	0x20000230
 80006cc:	00100101 	.word	0x00100101
 80006d0:	10624dd3 	.word	0x10624dd3
 80006d4:	cccccccd 	.word	0xcccccccd
 80006d8:	080049ac 	.word	0x080049ac
 80006dc:	20000080 	.word	0x20000080
 80006e0:	080049d4 	.word	0x080049d4

080006e4 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 80006e8:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 80006ea:	4a12      	ldr	r2, [pc, #72]	@ (8000734 <MX_USART2_UART_Init+0x50>)
 80006ec:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 80006ee:	4b10      	ldr	r3, [pc, #64]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 80006f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006f4:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 80006fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8000702:	4b0b      	ldr	r3, [pc, #44]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8000708:	4b09      	ldr	r3, [pc, #36]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 800070a:	220c      	movs	r2, #12
 800070c:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070e:	4b08      	ldr	r3, [pc, #32]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000714:	4b06      	ldr	r3, [pc, #24]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]

    if (HAL_UART_Init(&huart2) != HAL_OK) {
 800071a:	4805      	ldr	r0, [pc, #20]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 800071c:	f002 fcb6 	bl	800308c <HAL_UART_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_USART2_UART_Init+0x46>
        Error_Handler();
 8000726:	f000 f971 	bl	8000a0c <Error_Handler>
    }
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000080 	.word	0x20000080
 8000734:	40004400 	.word	0x40004400

08000738 <Liga_Usart2>:

void Liga_Usart2(void) {
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
    MX_USART2_UART_Init();
 800073c:	f7ff ffd2 	bl	80006e4 <MX_USART2_UART_Init>
    HAL_UART_Receive_IT(&huart2, (uint8_t*)rxData, RX_SIZE);
 8000740:	2207      	movs	r2, #7
 8000742:	4903      	ldr	r1, [pc, #12]	@ (8000750 <Liga_Usart2+0x18>)
 8000744:	4803      	ldr	r0, [pc, #12]	@ (8000754 <Liga_Usart2+0x1c>)
 8000746:	f002 fd27 	bl	8003198 <HAL_UART_Receive_IT>
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000078 	.word	0x20000078
 8000754:	20000080 	.word	0x20000080

08000758 <main>:
static void MX_DMA_Init(void);
static void MX_ADC1_Init(void);


int main(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  HAL_Init();
 800075c:	f000 fba2 	bl	8000ea4 <HAL_Init>
  SystemClock_Config();
 8000760:	f000 f822 	bl	80007a8 <SystemClock_Config>
  MX_GPIO_Init();
 8000764:	f000 f92a 	bl	80009bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000768:	f000 f8ea 	bl	8000940 <MX_DMA_Init>
  MX_ADC1_Init();
 800076c:	f000 f886 	bl	800087c <MX_ADC1_Init>
  Liga_Usart2();
 8000770:	f7ff ffe2 	bl	8000738 <Liga_Usart2>

  while (1)
  {
	  if(getMilis()-t_ant>=1000){
 8000774:	f000 fb18 	bl	8000da8 <getMilis>
 8000778:	4602      	mov	r2, r0
 800077a:	4b08      	ldr	r3, [pc, #32]	@ (800079c <main+0x44>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	1ad3      	subs	r3, r2, r3
 8000780:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000784:	d3f6      	bcc.n	8000774 <main+0x1c>
		  t_ant=getMilis();
 8000786:	f000 fb0f 	bl	8000da8 <getMilis>
 800078a:	4603      	mov	r3, r0
 800078c:	4a03      	ldr	r2, [pc, #12]	@ (800079c <main+0x44>)
 800078e:	6013      	str	r3, [r2, #0]
		  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuffer, 2);
 8000790:	2202      	movs	r2, #2
 8000792:	4903      	ldr	r1, [pc, #12]	@ (80007a0 <main+0x48>)
 8000794:	4803      	ldr	r0, [pc, #12]	@ (80007a4 <main+0x4c>)
 8000796:	f000 fd4b 	bl	8001230 <HAL_ADC_Start_DMA>
	  if(getMilis()-t_ant>=1000){
 800079a:	e7eb      	b.n	8000774 <main+0x1c>
 800079c:	20000234 	.word	0x20000234
 80007a0:	20000230 	.word	0x20000230
 80007a4:	200000c8 	.word	0x200000c8

080007a8 <SystemClock_Config>:

}


void SystemClock_Config(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b094      	sub	sp, #80	@ 0x50
 80007ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ae:	f107 0320 	add.w	r3, r7, #32
 80007b2:	2230      	movs	r2, #48	@ 0x30
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f003 fc5c 	bl	8004074 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007bc:	f107 030c 	add.w	r3, r7, #12
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 80007cc:	2300      	movs	r3, #0
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	4b28      	ldr	r3, [pc, #160]	@ (8000874 <SystemClock_Config+0xcc>)
 80007d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d4:	4a27      	ldr	r2, [pc, #156]	@ (8000874 <SystemClock_Config+0xcc>)
 80007d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007da:	6413      	str	r3, [r2, #64]	@ 0x40
 80007dc:	4b25      	ldr	r3, [pc, #148]	@ (8000874 <SystemClock_Config+0xcc>)
 80007de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007e8:	2300      	movs	r3, #0
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	4b22      	ldr	r3, [pc, #136]	@ (8000878 <SystemClock_Config+0xd0>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a21      	ldr	r2, [pc, #132]	@ (8000878 <SystemClock_Config+0xd0>)
 80007f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007f6:	6013      	str	r3, [r2, #0]
 80007f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000878 <SystemClock_Config+0xd0>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	687b      	ldr	r3, [r7, #4]


  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000804:	2301      	movs	r3, #1
 8000806:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000808:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800080c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800080e:	2302      	movs	r3, #2
 8000810:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000812:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000816:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000818:	2304      	movs	r3, #4
 800081a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800081c:	23a8      	movs	r3, #168	@ 0xa8
 800081e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000820:	2302      	movs	r3, #2
 8000822:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000824:	2304      	movs	r3, #4
 8000826:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000828:	f107 0320 	add.w	r3, r7, #32
 800082c:	4618      	mov	r0, r3
 800082e:	f001 ff95 	bl	800275c <HAL_RCC_OscConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000838:	f000 f8e8 	bl	8000a0c <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083c:	230f      	movs	r3, #15
 800083e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000840:	2302      	movs	r3, #2
 8000842:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000848:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800084c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800084e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000852:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000854:	f107 030c 	add.w	r3, r7, #12
 8000858:	2105      	movs	r1, #5
 800085a:	4618      	mov	r0, r3
 800085c:	f002 f9f6 	bl	8002c4c <HAL_RCC_ClockConfig>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000866:	f000 f8d1 	bl	8000a0c <Error_Handler>
  }
}
 800086a:	bf00      	nop
 800086c:	3750      	adds	r7, #80	@ 0x50
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40023800 	.word	0x40023800
 8000878:	40007000 	.word	0x40007000

0800087c <MX_ADC1_Init>:

static void MX_ADC1_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000882:	463b      	mov	r3, r7
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]
  hadc1.Instance = ADC1;
 800088e:	4b29      	ldr	r3, [pc, #164]	@ (8000934 <MX_ADC1_Init+0xb8>)
 8000890:	4a29      	ldr	r2, [pc, #164]	@ (8000938 <MX_ADC1_Init+0xbc>)
 8000892:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000894:	4b27      	ldr	r3, [pc, #156]	@ (8000934 <MX_ADC1_Init+0xb8>)
 8000896:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800089a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800089c:	4b25      	ldr	r3, [pc, #148]	@ (8000934 <MX_ADC1_Init+0xb8>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80008a2:	4b24      	ldr	r3, [pc, #144]	@ (8000934 <MX_ADC1_Init+0xb8>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	611a      	str	r2, [r3, #16]
  //Com DISABLE: converte apenas quando recebe um start (software/hardware)
  //Com ENABLE: converte continuamente sem parar
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008a8:	4b22      	ldr	r3, [pc, #136]	@ (8000934 <MX_ADC1_Init+0xb8>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	761a      	strb	r2, [r3, #24]
  // desabilita a conversão de cada channel em sequência arbitrária
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008ae:	4b21      	ldr	r3, [pc, #132]	@ (8000934 <MX_ADC1_Init+0xb8>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000934 <MX_ADC1_Init+0xb8>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;//HAL_ADC_Start()
 80008bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000934 <MX_ADC1_Init+0xb8>)
 80008be:	4a1f      	ldr	r2, [pc, #124]	@ (800093c <MX_ADC1_Init+0xc0>)
 80008c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000934 <MX_ADC1_Init+0xb8>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2; //são dois canais - duas conversões
 80008c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000934 <MX_ADC1_Init+0xb8>)
 80008ca:	2202      	movs	r2, #2
 80008cc:	61da      	str	r2, [r3, #28]
  //após cada conversão o DMA para
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008ce:	4b19      	ldr	r3, [pc, #100]	@ (8000934 <MX_ADC1_Init+0xb8>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV; //Flag ativa após cada conversão
 80008d6:	4b17      	ldr	r3, [pc, #92]	@ (8000934 <MX_ADC1_Init+0xb8>)
 80008d8:	2201      	movs	r2, #1
 80008da:	615a      	str	r2, [r3, #20]

  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008dc:	4815      	ldr	r0, [pc, #84]	@ (8000934 <MX_ADC1_Init+0xb8>)
 80008de:	f000 fb53 	bl	8000f88 <HAL_ADC_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80008e8:	f000 f890 	bl	8000a0c <Error_Handler>
  }


  sConfig.Channel = ADC_CHANNEL_0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008f0:	2301      	movs	r3, #1
 80008f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80008f4:	2306      	movs	r3, #6
 80008f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008f8:	463b      	mov	r3, r7
 80008fa:	4619      	mov	r1, r3
 80008fc:	480d      	ldr	r0, [pc, #52]	@ (8000934 <MX_ADC1_Init+0xb8>)
 80008fe:	f000 fdd3 	bl	80014a8 <HAL_ADC_ConfigChannel>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_ADC1_Init+0x90>
  {
      Error_Handler();
 8000908:	f000 f880 	bl	8000a0c <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_1;
 800090c:	2301      	movs	r3, #1
 800090e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000910:	2302      	movs	r3, #2
 8000912:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000914:	2306      	movs	r3, #6
 8000916:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000918:	463b      	mov	r3, r7
 800091a:	4619      	mov	r1, r3
 800091c:	4805      	ldr	r0, [pc, #20]	@ (8000934 <MX_ADC1_Init+0xb8>)
 800091e:	f000 fdc3 	bl	80014a8 <HAL_ADC_ConfigChannel>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_ADC1_Init+0xb0>
  {
      Error_Handler();
 8000928:	f000 f870 	bl	8000a0c <Error_Handler>
  }


}
 800092c:	bf00      	nop
 800092e:	3710      	adds	r7, #16
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	200000c8 	.word	0x200000c8
 8000938:	40012000 	.word	0x40012000
 800093c:	0f000001 	.word	0x0f000001

08000940 <MX_DMA_Init>:


static void MX_DMA_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0

  __HAL_RCC_DMA2_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	4b1b      	ldr	r3, [pc, #108]	@ (80009b8 <MX_DMA_Init+0x78>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	4a1a      	ldr	r2, [pc, #104]	@ (80009b8 <MX_DMA_Init+0x78>)
 8000950:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000954:	6313      	str	r3, [r2, #48]	@ 0x30
 8000956:	4b18      	ldr	r3, [pc, #96]	@ (80009b8 <MX_DMA_Init+0x78>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	603b      	str	r3, [r7, #0]
 8000966:	4b14      	ldr	r3, [pc, #80]	@ (80009b8 <MX_DMA_Init+0x78>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	4a13      	ldr	r2, [pc, #76]	@ (80009b8 <MX_DMA_Init+0x78>)
 800096c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000970:	6313      	str	r3, [r2, #48]	@ 0x30
 8000972:	4b11      	ldr	r3, [pc, #68]	@ (80009b8 <MX_DMA_Init+0x78>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2100      	movs	r1, #0
 8000982:	2010      	movs	r0, #16
 8000984:	f001 f915 	bl	8001bb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000988:	2010      	movs	r0, #16
 800098a:	f001 f92e 	bl	8001bea <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2100      	movs	r1, #0
 8000992:	2011      	movs	r0, #17
 8000994:	f001 f90d 	bl	8001bb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000998:	2011      	movs	r0, #17
 800099a:	f001 f926 	bl	8001bea <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2100      	movs	r1, #0
 80009a2:	203c      	movs	r0, #60	@ 0x3c
 80009a4:	f001 f905 	bl	8001bb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80009a8:	203c      	movs	r0, #60	@ 0x3c
 80009aa:	f001 f91e 	bl	8001bea <HAL_NVIC_EnableIRQ>

}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40023800 	.word	0x40023800

080009bc <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0

  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	4b10      	ldr	r3, [pc, #64]	@ (8000a08 <MX_GPIO_Init+0x4c>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	4a0f      	ldr	r2, [pc, #60]	@ (8000a08 <MX_GPIO_Init+0x4c>)
 80009cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000a08 <MX_GPIO_Init+0x4c>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	603b      	str	r3, [r7, #0]
 80009e2:	4b09      	ldr	r3, [pc, #36]	@ (8000a08 <MX_GPIO_Init+0x4c>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	4a08      	ldr	r2, [pc, #32]	@ (8000a08 <MX_GPIO_Init+0x4c>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ee:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <MX_GPIO_Init+0x4c>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]

}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	40023800 	.word	0x40023800

08000a0c <Error_Handler>:

void Error_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a10:	b672      	cpsid	i
}
 8000a12:	bf00      	nop

  __disable_irq();
  while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <Error_Handler+0x8>

08000a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	4b10      	ldr	r3, [pc, #64]	@ (8000a64 <HAL_MspInit+0x4c>)
 8000a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a26:	4a0f      	ldr	r2, [pc, #60]	@ (8000a64 <HAL_MspInit+0x4c>)
 8000a28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a64 <HAL_MspInit+0x4c>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	603b      	str	r3, [r7, #0]
 8000a3e:	4b09      	ldr	r3, [pc, #36]	@ (8000a64 <HAL_MspInit+0x4c>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a42:	4a08      	ldr	r2, [pc, #32]	@ (8000a64 <HAL_MspInit+0x4c>)
 8000a44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a4a:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <HAL_MspInit+0x4c>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	40023800 	.word	0x40023800

08000a68 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	@ 0x28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a33      	ldr	r2, [pc, #204]	@ (8000b54 <HAL_ADC_MspInit+0xec>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d15f      	bne.n	8000b4a <HAL_ADC_MspInit+0xe2>
  {
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	4b32      	ldr	r3, [pc, #200]	@ (8000b58 <HAL_ADC_MspInit+0xf0>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a92:	4a31      	ldr	r2, [pc, #196]	@ (8000b58 <HAL_ADC_MspInit+0xf0>)
 8000a94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a98:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a9a:	4b2f      	ldr	r3, [pc, #188]	@ (8000b58 <HAL_ADC_MspInit+0xf0>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	4b2b      	ldr	r3, [pc, #172]	@ (8000b58 <HAL_ADC_MspInit+0xf0>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	4a2a      	ldr	r2, [pc, #168]	@ (8000b58 <HAL_ADC_MspInit+0xf0>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab6:	4b28      	ldr	r3, [pc, #160]	@ (8000b58 <HAL_ADC_MspInit+0xf0>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ace:	f107 0314 	add.w	r3, r7, #20
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4821      	ldr	r0, [pc, #132]	@ (8000b5c <HAL_ADC_MspInit+0xf4>)
 8000ad6:	f001 fca5 	bl	8002424 <HAL_GPIO_Init>

    hdma_adc1.Instance = DMA2_Stream4;
 8000ada:	4b21      	ldr	r3, [pc, #132]	@ (8000b60 <HAL_ADC_MspInit+0xf8>)
 8000adc:	4a21      	ldr	r2, [pc, #132]	@ (8000b64 <HAL_ADC_MspInit+0xfc>)
 8000ade:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ae0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b60 <HAL_ADC_MspInit+0xf8>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ae6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b60 <HAL_ADC_MspInit+0xf8>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aec:	4b1c      	ldr	r3, [pc, #112]	@ (8000b60 <HAL_ADC_MspInit+0xf8>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000af2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b60 <HAL_ADC_MspInit+0xf8>)
 8000af4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000af8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000afa:	4b19      	ldr	r3, [pc, #100]	@ (8000b60 <HAL_ADC_MspInit+0xf8>)
 8000afc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b00:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b02:	4b17      	ldr	r3, [pc, #92]	@ (8000b60 <HAL_ADC_MspInit+0xf8>)
 8000b04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b08:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b0a:	4b15      	ldr	r3, [pc, #84]	@ (8000b60 <HAL_ADC_MspInit+0xf8>)
 8000b0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b10:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b12:	4b13      	ldr	r3, [pc, #76]	@ (8000b60 <HAL_ADC_MspInit+0xf8>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b18:	4b11      	ldr	r3, [pc, #68]	@ (8000b60 <HAL_ADC_MspInit+0xf8>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b1e:	4810      	ldr	r0, [pc, #64]	@ (8000b60 <HAL_ADC_MspInit+0xf8>)
 8000b20:	f001 f87e 	bl	8001c20 <HAL_DMA_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000b2a:	f7ff ff6f 	bl	8000a0c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4a0b      	ldr	r2, [pc, #44]	@ (8000b60 <HAL_ADC_MspInit+0xf8>)
 8000b32:	639a      	str	r2, [r3, #56]	@ 0x38
 8000b34:	4a0a      	ldr	r2, [pc, #40]	@ (8000b60 <HAL_ADC_MspInit+0xf8>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DMA2 Stream4 interrupt Init */
    HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	203c      	movs	r0, #60	@ 0x3c
 8000b40:	f001 f837 	bl	8001bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000b44:	203c      	movs	r0, #60	@ 0x3c
 8000b46:	f001 f850 	bl	8001bea <HAL_NVIC_EnableIRQ>


  }

}
 8000b4a:	bf00      	nop
 8000b4c:	3728      	adds	r7, #40	@ 0x28
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40012000 	.word	0x40012000
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40020000 	.word	0x40020000
 8000b60:	20000110 	.word	0x20000110
 8000b64:	40026470 	.word	0x40026470

08000b68 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	@ 0x28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a4c      	ldr	r2, [pc, #304]	@ (8000cb8 <HAL_UART_MspInit+0x150>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	f040 8091 	bne.w	8000cae <HAL_UART_MspInit+0x146>
  {

    __HAL_RCC_USART2_CLK_ENABLE();
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	4b4a      	ldr	r3, [pc, #296]	@ (8000cbc <HAL_UART_MspInit+0x154>)
 8000b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b94:	4a49      	ldr	r2, [pc, #292]	@ (8000cbc <HAL_UART_MspInit+0x154>)
 8000b96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b9c:	4b47      	ldr	r3, [pc, #284]	@ (8000cbc <HAL_UART_MspInit+0x154>)
 8000b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	4b43      	ldr	r3, [pc, #268]	@ (8000cbc <HAL_UART_MspInit+0x154>)
 8000bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb0:	4a42      	ldr	r2, [pc, #264]	@ (8000cbc <HAL_UART_MspInit+0x154>)
 8000bb2:	f043 0301 	orr.w	r3, r3, #1
 8000bb6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb8:	4b40      	ldr	r3, [pc, #256]	@ (8000cbc <HAL_UART_MspInit+0x154>)
 8000bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbc:	f003 0301 	and.w	r3, r3, #1
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bc4:	230c      	movs	r3, #12
 8000bc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bd4:	2307      	movs	r3, #7
 8000bd6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4838      	ldr	r0, [pc, #224]	@ (8000cc0 <HAL_UART_MspInit+0x158>)
 8000be0:	f001 fc20 	bl	8002424 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000be4:	4b37      	ldr	r3, [pc, #220]	@ (8000cc4 <HAL_UART_MspInit+0x15c>)
 8000be6:	4a38      	ldr	r2, [pc, #224]	@ (8000cc8 <HAL_UART_MspInit+0x160>)
 8000be8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000bea:	4b36      	ldr	r3, [pc, #216]	@ (8000cc4 <HAL_UART_MspInit+0x15c>)
 8000bec:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000bf0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bf2:	4b34      	ldr	r3, [pc, #208]	@ (8000cc4 <HAL_UART_MspInit+0x15c>)
 8000bf4:	2240      	movs	r2, #64	@ 0x40
 8000bf6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bf8:	4b32      	ldr	r3, [pc, #200]	@ (8000cc4 <HAL_UART_MspInit+0x15c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000bfe:	4b31      	ldr	r3, [pc, #196]	@ (8000cc4 <HAL_UART_MspInit+0x15c>)
 8000c00:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c04:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c06:	4b2f      	ldr	r3, [pc, #188]	@ (8000cc4 <HAL_UART_MspInit+0x15c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c0c:	4b2d      	ldr	r3, [pc, #180]	@ (8000cc4 <HAL_UART_MspInit+0x15c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000c12:	4b2c      	ldr	r3, [pc, #176]	@ (8000cc4 <HAL_UART_MspInit+0x15c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c18:	4b2a      	ldr	r3, [pc, #168]	@ (8000cc4 <HAL_UART_MspInit+0x15c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c1e:	4b29      	ldr	r3, [pc, #164]	@ (8000cc4 <HAL_UART_MspInit+0x15c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000c24:	4827      	ldr	r0, [pc, #156]	@ (8000cc4 <HAL_UART_MspInit+0x15c>)
 8000c26:	f000 fffb 	bl	8001c20 <HAL_DMA_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000c30:	f7ff feec 	bl	8000a0c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4a23      	ldr	r2, [pc, #140]	@ (8000cc4 <HAL_UART_MspInit+0x15c>)
 8000c38:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c3a:	4a22      	ldr	r2, [pc, #136]	@ (8000cc4 <HAL_UART_MspInit+0x15c>)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000c40:	4b22      	ldr	r3, [pc, #136]	@ (8000ccc <HAL_UART_MspInit+0x164>)
 8000c42:	4a23      	ldr	r2, [pc, #140]	@ (8000cd0 <HAL_UART_MspInit+0x168>)
 8000c44:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000c46:	4b21      	ldr	r3, [pc, #132]	@ (8000ccc <HAL_UART_MspInit+0x164>)
 8000c48:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000c4c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c4e:	4b1f      	ldr	r3, [pc, #124]	@ (8000ccc <HAL_UART_MspInit+0x164>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c54:	4b1d      	ldr	r3, [pc, #116]	@ (8000ccc <HAL_UART_MspInit+0x164>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ccc <HAL_UART_MspInit+0x164>)
 8000c5c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c60:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c62:	4b1a      	ldr	r3, [pc, #104]	@ (8000ccc <HAL_UART_MspInit+0x164>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c68:	4b18      	ldr	r3, [pc, #96]	@ (8000ccc <HAL_UART_MspInit+0x164>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000c6e:	4b17      	ldr	r3, [pc, #92]	@ (8000ccc <HAL_UART_MspInit+0x164>)
 8000c70:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c74:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c76:	4b15      	ldr	r3, [pc, #84]	@ (8000ccc <HAL_UART_MspInit+0x164>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c7c:	4b13      	ldr	r3, [pc, #76]	@ (8000ccc <HAL_UART_MspInit+0x164>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000c82:	4812      	ldr	r0, [pc, #72]	@ (8000ccc <HAL_UART_MspInit+0x164>)
 8000c84:	f000 ffcc 	bl	8001c20 <HAL_DMA_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000c8e:	f7ff febd 	bl	8000a0c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a0d      	ldr	r2, [pc, #52]	@ (8000ccc <HAL_UART_MspInit+0x164>)
 8000c96:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c98:	4a0c      	ldr	r2, [pc, #48]	@ (8000ccc <HAL_UART_MspInit+0x164>)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	2026      	movs	r0, #38	@ 0x26
 8000ca4:	f000 ff85 	bl	8001bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ca8:	2026      	movs	r0, #38	@ 0x26
 8000caa:	f000 ff9e 	bl	8001bea <HAL_NVIC_EnableIRQ>


  }

}
 8000cae:	bf00      	nop
 8000cb0:	3728      	adds	r7, #40	@ 0x28
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40004400 	.word	0x40004400
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40020000 	.word	0x40020000
 8000cc4:	20000170 	.word	0x20000170
 8000cc8:	400260a0 	.word	0x400260a0
 8000ccc:	200001d0 	.word	0x200001d0
 8000cd0:	40026088 	.word	0x40026088

08000cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <NMI_Handler+0x4>

08000cdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <HardFault_Handler+0x4>

08000ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <MemManage_Handler+0x4>

08000cec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <BusFault_Handler+0x4>

08000cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <UsageFault_Handler+0x4>

08000cfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
	...

08000d28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  milisegundo++;
 8000d2c:	4b04      	ldr	r3, [pc, #16]	@ (8000d40 <SysTick_Handler+0x18>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	3301      	adds	r3, #1
 8000d32:	4a03      	ldr	r2, [pc, #12]	@ (8000d40 <SysTick_Handler+0x18>)
 8000d34:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d36:	f000 f907 	bl	8000f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000238 	.word	0x20000238

08000d44 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000d48:	4802      	ldr	r0, [pc, #8]	@ (8000d54 <DMA1_Stream5_IRQHandler+0x10>)
 8000d4a:	f001 f901 	bl	8001f50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	200001d0 	.word	0x200001d0

08000d58 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000d5c:	4802      	ldr	r0, [pc, #8]	@ (8000d68 <DMA1_Stream6_IRQHandler+0x10>)
 8000d5e:	f001 f8f7 	bl	8001f50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000170 	.word	0x20000170

08000d6c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000d70:	4802      	ldr	r0, [pc, #8]	@ (8000d7c <ADC_IRQHandler+0x10>)
 8000d72:	f000 f94c 	bl	800100e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200000c8 	.word	0x200000c8

08000d80 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d84:	4802      	ldr	r0, [pc, #8]	@ (8000d90 <USART2_IRQHandler+0x10>)
 8000d86:	f002 fa2d 	bl	80031e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000080 	.word	0x20000080

08000d94 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d98:	4802      	ldr	r0, [pc, #8]	@ (8000da4 <DMA2_Stream4_IRQHandler+0x10>)
 8000d9a:	f001 f8d9 	bl	8001f50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000110 	.word	0x20000110

08000da8 <getMilis>:

/* USER CODE BEGIN 1 */
uint32_t getMilis(void){
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
	return milisegundo;
 8000dac:	4b03      	ldr	r3, [pc, #12]	@ (8000dbc <getMilis+0x14>)
 8000dae:	681b      	ldr	r3, [r3, #0]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	20000238 	.word	0x20000238

08000dc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dc8:	4a14      	ldr	r2, [pc, #80]	@ (8000e1c <_sbrk+0x5c>)
 8000dca:	4b15      	ldr	r3, [pc, #84]	@ (8000e20 <_sbrk+0x60>)
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd4:	4b13      	ldr	r3, [pc, #76]	@ (8000e24 <_sbrk+0x64>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d102      	bne.n	8000de2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ddc:	4b11      	ldr	r3, [pc, #68]	@ (8000e24 <_sbrk+0x64>)
 8000dde:	4a12      	ldr	r2, [pc, #72]	@ (8000e28 <_sbrk+0x68>)
 8000de0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000de2:	4b10      	ldr	r3, [pc, #64]	@ (8000e24 <_sbrk+0x64>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d207      	bcs.n	8000e00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df0:	f003 f95a 	bl	80040a8 <__errno>
 8000df4:	4603      	mov	r3, r0
 8000df6:	220c      	movs	r2, #12
 8000df8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dfa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dfe:	e009      	b.n	8000e14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e00:	4b08      	ldr	r3, [pc, #32]	@ (8000e24 <_sbrk+0x64>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e06:	4b07      	ldr	r3, [pc, #28]	@ (8000e24 <_sbrk+0x64>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	4a05      	ldr	r2, [pc, #20]	@ (8000e24 <_sbrk+0x64>)
 8000e10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e12:	68fb      	ldr	r3, [r7, #12]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20020000 	.word	0x20020000
 8000e20:	00000400 	.word	0x00000400
 8000e24:	2000023c 	.word	0x2000023c
 8000e28:	20000390 	.word	0x20000390

08000e2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e30:	4b06      	ldr	r3, [pc, #24]	@ (8000e4c <SystemInit+0x20>)
 8000e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e36:	4a05      	ldr	r2, [pc, #20]	@ (8000e4c <SystemInit+0x20>)
 8000e38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e88 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e54:	f7ff ffea 	bl	8000e2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e58:	480c      	ldr	r0, [pc, #48]	@ (8000e8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e5a:	490d      	ldr	r1, [pc, #52]	@ (8000e90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e60:	e002      	b.n	8000e68 <LoopCopyDataInit>

08000e62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e66:	3304      	adds	r3, #4

08000e68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e6c:	d3f9      	bcc.n	8000e62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e70:	4c0a      	ldr	r4, [pc, #40]	@ (8000e9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e74:	e001      	b.n	8000e7a <LoopFillZerobss>

08000e76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e78:	3204      	adds	r2, #4

08000e7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e7c:	d3fb      	bcc.n	8000e76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e7e:	f003 f919 	bl	80040b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e82:	f7ff fc69 	bl	8000758 <main>
  bx  lr    
 8000e86:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e90:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e94:	08004a54 	.word	0x08004a54
  ldr r2, =_sbss
 8000e98:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e9c:	2000038c 	.word	0x2000038c

08000ea0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea0:	e7fe      	b.n	8000ea0 <CAN1_RX0_IRQHandler>
	...

08000ea4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee4 <HAL_Init+0x40>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a0d      	ldr	r2, [pc, #52]	@ (8000ee4 <HAL_Init+0x40>)
 8000eae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000eb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee4 <HAL_Init+0x40>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee4 <HAL_Init+0x40>)
 8000eba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ebe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec0:	4b08      	ldr	r3, [pc, #32]	@ (8000ee4 <HAL_Init+0x40>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a07      	ldr	r2, [pc, #28]	@ (8000ee4 <HAL_Init+0x40>)
 8000ec6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ecc:	2003      	movs	r0, #3
 8000ece:	f000 fe65 	bl	8001b9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ed2:	200f      	movs	r0, #15
 8000ed4:	f000 f808 	bl	8000ee8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed8:	f7ff fd9e 	bl	8000a18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40023c00 	.word	0x40023c00

08000ee8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef0:	4b12      	ldr	r3, [pc, #72]	@ (8000f3c <HAL_InitTick+0x54>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <HAL_InitTick+0x58>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000efe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 fe7d 	bl	8001c06 <HAL_SYSTICK_Config>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e00e      	b.n	8000f34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2b0f      	cmp	r3, #15
 8000f1a:	d80a      	bhi.n	8000f32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f24:	f000 fe45 	bl	8001bb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f28:	4a06      	ldr	r2, [pc, #24]	@ (8000f44 <HAL_InitTick+0x5c>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	e000      	b.n	8000f34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000000 	.word	0x20000000
 8000f40:	20000008 	.word	0x20000008
 8000f44:	20000004 	.word	0x20000004

08000f48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <HAL_IncTick+0x20>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	461a      	mov	r2, r3
 8000f52:	4b06      	ldr	r3, [pc, #24]	@ (8000f6c <HAL_IncTick+0x24>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4413      	add	r3, r2
 8000f58:	4a04      	ldr	r2, [pc, #16]	@ (8000f6c <HAL_IncTick+0x24>)
 8000f5a:	6013      	str	r3, [r2, #0]
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	20000008 	.word	0x20000008
 8000f6c:	20000240 	.word	0x20000240

08000f70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return uwTick;
 8000f74:	4b03      	ldr	r3, [pc, #12]	@ (8000f84 <HAL_GetTick+0x14>)
 8000f76:	681b      	ldr	r3, [r3, #0]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	20000240 	.word	0x20000240

08000f88 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f90:	2300      	movs	r3, #0
 8000f92:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d101      	bne.n	8000f9e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e033      	b.n	8001006 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d109      	bne.n	8000fba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff fd5e 	bl	8000a68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fbe:	f003 0310 	and.w	r3, r3, #16
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d118      	bne.n	8000ff8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fca:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000fce:	f023 0302 	bic.w	r3, r3, #2
 8000fd2:	f043 0202 	orr.w	r2, r3, #2
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f000 fb86 	bl	80016ec <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fea:	f023 0303 	bic.w	r3, r3, #3
 8000fee:	f043 0201 	orr.w	r2, r3, #1
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ff6:	e001      	b.n	8000ffc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001004:	7bfb      	ldrb	r3, [r7, #15]
}
 8001006:	4618      	mov	r0, r3
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b086      	sub	sp, #24
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	f003 0320 	and.w	r3, r3, #32
 800103c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d049      	beq.n	80010d8 <HAL_ADC_IRQHandler+0xca>
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d046      	beq.n	80010d8 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104e:	f003 0310 	and.w	r3, r3, #16
 8001052:	2b00      	cmp	r3, #0
 8001054:	d105      	bne.n	8001062 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d12b      	bne.n	80010c8 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001074:	2b00      	cmp	r3, #0
 8001076:	d127      	bne.n	80010c8 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800107e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001082:	2b00      	cmp	r3, #0
 8001084:	d006      	beq.n	8001094 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001090:	2b00      	cmp	r3, #0
 8001092:	d119      	bne.n	80010c8 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	685a      	ldr	r2, [r3, #4]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f022 0220 	bic.w	r2, r2, #32
 80010a2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d105      	bne.n	80010c8 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c0:	f043 0201 	orr.w	r2, r3, #1
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f000 f9c5 	bl	8001458 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f06f 0212 	mvn.w	r2, #18
 80010d6:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f003 0304 	and.w	r3, r3, #4
 80010de:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010e6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d057      	beq.n	800119e <HAL_ADC_IRQHandler+0x190>
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d054      	beq.n	800119e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f8:	f003 0310 	and.w	r3, r3, #16
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d105      	bne.n	800110c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001104:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d139      	bne.n	800118e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001120:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001124:	2b00      	cmp	r3, #0
 8001126:	d006      	beq.n	8001136 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001132:	2b00      	cmp	r3, #0
 8001134:	d12b      	bne.n	800118e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001140:	2b00      	cmp	r3, #0
 8001142:	d124      	bne.n	800118e <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800114e:	2b00      	cmp	r3, #0
 8001150:	d11d      	bne.n	800118e <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001156:	2b00      	cmp	r3, #0
 8001158:	d119      	bne.n	800118e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001168:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800117e:	2b00      	cmp	r3, #0
 8001180:	d105      	bne.n	800118e <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001186:	f043 0201 	orr.w	r2, r3, #1
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f000 fc2a 	bl	80019e8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f06f 020c 	mvn.w	r2, #12
 800119c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011ac:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d017      	beq.n	80011e4 <HAL_ADC_IRQHandler+0x1d6>
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d014      	beq.n	80011e4 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d10d      	bne.n	80011e4 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011cc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f000 f953 	bl	8001480 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f06f 0201 	mvn.w	r2, #1
 80011e2:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f003 0320 	and.w	r3, r3, #32
 80011ea:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80011f2:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d015      	beq.n	8001226 <HAL_ADC_IRQHandler+0x218>
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d012      	beq.n	8001226 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001204:	f043 0202 	orr.w	r2, r3, #2
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f06f 0220 	mvn.w	r2, #32
 8001214:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f000 f93c 	bl	8001494 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f06f 0220 	mvn.w	r2, #32
 8001224:	601a      	str	r2, [r3, #0]
  }
}
 8001226:	bf00      	nop
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001240:	2300      	movs	r3, #0
 8001242:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800124a:	2b01      	cmp	r3, #1
 800124c:	d101      	bne.n	8001252 <HAL_ADC_Start_DMA+0x22>
 800124e:	2302      	movs	r3, #2
 8001250:	e0eb      	b.n	800142a <HAL_ADC_Start_DMA+0x1fa>
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2201      	movs	r2, #1
 8001256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	f003 0301 	and.w	r3, r3, #1
 8001264:	2b01      	cmp	r3, #1
 8001266:	d018      	beq.n	800129a <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	689a      	ldr	r2, [r3, #8]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f042 0201 	orr.w	r2, r2, #1
 8001276:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001278:	4b6e      	ldr	r3, [pc, #440]	@ (8001434 <HAL_ADC_Start_DMA+0x204>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a6e      	ldr	r2, [pc, #440]	@ (8001438 <HAL_ADC_Start_DMA+0x208>)
 800127e:	fba2 2303 	umull	r2, r3, r2, r3
 8001282:	0c9a      	lsrs	r2, r3, #18
 8001284:	4613      	mov	r3, r2
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	4413      	add	r3, r2
 800128a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 800128c:	e002      	b.n	8001294 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	3b01      	subs	r3, #1
 8001292:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f9      	bne.n	800128e <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80012a8:	d107      	bne.n	80012ba <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	689a      	ldr	r2, [r3, #8]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80012b8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	f040 80a3 	bne.w	8001410 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ce:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80012d2:	f023 0301 	bic.w	r3, r3, #1
 80012d6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d007      	beq.n	80012fc <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80012f4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001300:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001304:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001308:	d106      	bne.n	8001318 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130e:	f023 0206 	bic.w	r2, r3, #6
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	645a      	str	r2, [r3, #68]	@ 0x44
 8001316:	e002      	b.n	800131e <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	2200      	movs	r2, #0
 800131c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	2200      	movs	r2, #0
 8001322:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001326:	4b45      	ldr	r3, [pc, #276]	@ (800143c <HAL_ADC_Start_DMA+0x20c>)
 8001328:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800132e:	4a44      	ldr	r2, [pc, #272]	@ (8001440 <HAL_ADC_Start_DMA+0x210>)
 8001330:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001336:	4a43      	ldr	r2, [pc, #268]	@ (8001444 <HAL_ADC_Start_DMA+0x214>)
 8001338:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800133e:	4a42      	ldr	r2, [pc, #264]	@ (8001448 <HAL_ADC_Start_DMA+0x218>)
 8001340:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800134a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800135a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	689a      	ldr	r2, [r3, #8]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800136a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	334c      	adds	r3, #76	@ 0x4c
 8001376:	4619      	mov	r1, r3
 8001378:	68ba      	ldr	r2, [r7, #8]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f000 fcfe 	bl	8001d7c <HAL_DMA_Start_IT>
 8001380:	4603      	mov	r3, r0
 8001382:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 031f 	and.w	r3, r3, #31
 800138c:	2b00      	cmp	r3, #0
 800138e:	d12a      	bne.n	80013e6 <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a2d      	ldr	r2, [pc, #180]	@ (800144c <HAL_ADC_Start_DMA+0x21c>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d015      	beq.n	80013c6 <HAL_ADC_Start_DMA+0x196>
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a2c      	ldr	r2, [pc, #176]	@ (8001450 <HAL_ADC_Start_DMA+0x220>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d105      	bne.n	80013b0 <HAL_ADC_Start_DMA+0x180>
 80013a4:	4b25      	ldr	r3, [pc, #148]	@ (800143c <HAL_ADC_Start_DMA+0x20c>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f003 031f 	and.w	r3, r3, #31
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d00a      	beq.n	80013c6 <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a27      	ldr	r2, [pc, #156]	@ (8001454 <HAL_ADC_Start_DMA+0x224>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d136      	bne.n	8001428 <HAL_ADC_Start_DMA+0x1f8>
 80013ba:	4b20      	ldr	r3, [pc, #128]	@ (800143c <HAL_ADC_Start_DMA+0x20c>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f003 0310 	and.w	r3, r3, #16
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d130      	bne.n	8001428 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d129      	bne.n	8001428 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	689a      	ldr	r2, [r3, #8]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	e020      	b.n	8001428 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a18      	ldr	r2, [pc, #96]	@ (800144c <HAL_ADC_Start_DMA+0x21c>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d11b      	bne.n	8001428 <HAL_ADC_Start_DMA+0x1f8>
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d114      	bne.n	8001428 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	689a      	ldr	r2, [r3, #8]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	e00b      	b.n	8001428 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001414:	f043 0210 	orr.w	r2, r3, #16
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001420:	f043 0201 	orr.w	r2, r3, #1
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8001428:	7ffb      	ldrb	r3, [r7, #31]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3720      	adds	r7, #32
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000000 	.word	0x20000000
 8001438:	431bde83 	.word	0x431bde83
 800143c:	40012300 	.word	0x40012300
 8001440:	080018e5 	.word	0x080018e5
 8001444:	0800199f 	.word	0x0800199f
 8001448:	080019bb 	.word	0x080019bb
 800144c:	40012000 	.word	0x40012000
 8001450:	40012100 	.word	0x40012100
 8001454:	40012200 	.word	0x40012200

08001458 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d101      	bne.n	80014c4 <HAL_ADC_ConfigChannel+0x1c>
 80014c0:	2302      	movs	r3, #2
 80014c2:	e105      	b.n	80016d0 <HAL_ADC_ConfigChannel+0x228>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b09      	cmp	r3, #9
 80014d2:	d925      	bls.n	8001520 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	68d9      	ldr	r1, [r3, #12]
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	b29b      	uxth	r3, r3
 80014e0:	461a      	mov	r2, r3
 80014e2:	4613      	mov	r3, r2
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	4413      	add	r3, r2
 80014e8:	3b1e      	subs	r3, #30
 80014ea:	2207      	movs	r2, #7
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	43da      	mvns	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	400a      	ands	r2, r1
 80014f8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68d9      	ldr	r1, [r3, #12]
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	689a      	ldr	r2, [r3, #8]
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	b29b      	uxth	r3, r3
 800150a:	4618      	mov	r0, r3
 800150c:	4603      	mov	r3, r0
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	4403      	add	r3, r0
 8001512:	3b1e      	subs	r3, #30
 8001514:	409a      	lsls	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	430a      	orrs	r2, r1
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	e022      	b.n	8001566 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6919      	ldr	r1, [r3, #16]
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	b29b      	uxth	r3, r3
 800152c:	461a      	mov	r2, r3
 800152e:	4613      	mov	r3, r2
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	4413      	add	r3, r2
 8001534:	2207      	movs	r2, #7
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43da      	mvns	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	400a      	ands	r2, r1
 8001542:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6919      	ldr	r1, [r3, #16]
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	689a      	ldr	r2, [r3, #8]
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	b29b      	uxth	r3, r3
 8001554:	4618      	mov	r0, r3
 8001556:	4603      	mov	r3, r0
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	4403      	add	r3, r0
 800155c:	409a      	lsls	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	430a      	orrs	r2, r1
 8001564:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2b06      	cmp	r3, #6
 800156c:	d824      	bhi.n	80015b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	4613      	mov	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	4413      	add	r3, r2
 800157e:	3b05      	subs	r3, #5
 8001580:	221f      	movs	r2, #31
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43da      	mvns	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	400a      	ands	r2, r1
 800158e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	b29b      	uxth	r3, r3
 800159c:	4618      	mov	r0, r3
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	4613      	mov	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	3b05      	subs	r3, #5
 80015aa:	fa00 f203 	lsl.w	r2, r0, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	430a      	orrs	r2, r1
 80015b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80015b6:	e04c      	b.n	8001652 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b0c      	cmp	r3, #12
 80015be:	d824      	bhi.n	800160a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	4613      	mov	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	3b23      	subs	r3, #35	@ 0x23
 80015d2:	221f      	movs	r2, #31
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	43da      	mvns	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	400a      	ands	r2, r1
 80015e0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	4618      	mov	r0, r3
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685a      	ldr	r2, [r3, #4]
 80015f4:	4613      	mov	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4413      	add	r3, r2
 80015fa:	3b23      	subs	r3, #35	@ 0x23
 80015fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	430a      	orrs	r2, r1
 8001606:	631a      	str	r2, [r3, #48]	@ 0x30
 8001608:	e023      	b.n	8001652 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685a      	ldr	r2, [r3, #4]
 8001614:	4613      	mov	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4413      	add	r3, r2
 800161a:	3b41      	subs	r3, #65	@ 0x41
 800161c:	221f      	movs	r2, #31
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43da      	mvns	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	400a      	ands	r2, r1
 800162a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	b29b      	uxth	r3, r3
 8001638:	4618      	mov	r0, r3
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	4613      	mov	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	3b41      	subs	r3, #65	@ 0x41
 8001646:	fa00 f203 	lsl.w	r2, r0, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	430a      	orrs	r2, r1
 8001650:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001652:	4b22      	ldr	r3, [pc, #136]	@ (80016dc <HAL_ADC_ConfigChannel+0x234>)
 8001654:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a21      	ldr	r2, [pc, #132]	@ (80016e0 <HAL_ADC_ConfigChannel+0x238>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d109      	bne.n	8001674 <HAL_ADC_ConfigChannel+0x1cc>
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2b12      	cmp	r3, #18
 8001666:	d105      	bne.n	8001674 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a19      	ldr	r2, [pc, #100]	@ (80016e0 <HAL_ADC_ConfigChannel+0x238>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d123      	bne.n	80016c6 <HAL_ADC_ConfigChannel+0x21e>
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2b10      	cmp	r3, #16
 8001684:	d003      	beq.n	800168e <HAL_ADC_ConfigChannel+0x1e6>
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2b11      	cmp	r3, #17
 800168c:	d11b      	bne.n	80016c6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2b10      	cmp	r3, #16
 80016a0:	d111      	bne.n	80016c6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016a2:	4b10      	ldr	r3, [pc, #64]	@ (80016e4 <HAL_ADC_ConfigChannel+0x23c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a10      	ldr	r2, [pc, #64]	@ (80016e8 <HAL_ADC_ConfigChannel+0x240>)
 80016a8:	fba2 2303 	umull	r2, r3, r2, r3
 80016ac:	0c9a      	lsrs	r2, r3, #18
 80016ae:	4613      	mov	r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4413      	add	r3, r2
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80016b8:	e002      	b.n	80016c0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	3b01      	subs	r3, #1
 80016be:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1f9      	bne.n	80016ba <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	40012300 	.word	0x40012300
 80016e0:	40012000 	.word	0x40012000
 80016e4:	20000000 	.word	0x20000000
 80016e8:	431bde83 	.word	0x431bde83

080016ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016f4:	4b79      	ldr	r3, [pc, #484]	@ (80018dc <ADC_Init+0x1f0>)
 80016f6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	685a      	ldr	r2, [r3, #4]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	431a      	orrs	r2, r3
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001720:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6859      	ldr	r1, [r3, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	021a      	lsls	r2, r3, #8
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	430a      	orrs	r2, r1
 8001734:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	685a      	ldr	r2, [r3, #4]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001744:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6859      	ldr	r1, [r3, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	430a      	orrs	r2, r1
 8001756:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	689a      	ldr	r2, [r3, #8]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001766:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6899      	ldr	r1, [r3, #8]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68da      	ldr	r2, [r3, #12]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	430a      	orrs	r2, r1
 8001778:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800177e:	4a58      	ldr	r2, [pc, #352]	@ (80018e0 <ADC_Init+0x1f4>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d022      	beq.n	80017ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	689a      	ldr	r2, [r3, #8]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001792:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6899      	ldr	r1, [r3, #8]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	430a      	orrs	r2, r1
 80017a4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	689a      	ldr	r2, [r3, #8]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80017b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6899      	ldr	r1, [r3, #8]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	430a      	orrs	r2, r1
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	e00f      	b.n	80017ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80017d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80017e8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f022 0202 	bic.w	r2, r2, #2
 80017f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6899      	ldr	r1, [r3, #8]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	7e1b      	ldrb	r3, [r3, #24]
 8001804:	005a      	lsls	r2, r3, #1
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	430a      	orrs	r2, r1
 800180c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d01b      	beq.n	8001850 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	685a      	ldr	r2, [r3, #4]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001826:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001836:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6859      	ldr	r1, [r3, #4]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001842:	3b01      	subs	r3, #1
 8001844:	035a      	lsls	r2, r3, #13
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	430a      	orrs	r2, r1
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	e007      	b.n	8001860 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800185e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800186e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	3b01      	subs	r3, #1
 800187c:	051a      	lsls	r2, r3, #20
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	430a      	orrs	r2, r1
 8001884:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001894:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6899      	ldr	r1, [r3, #8]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80018a2:	025a      	lsls	r2, r3, #9
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	430a      	orrs	r2, r1
 80018aa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	689a      	ldr	r2, [r3, #8]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80018ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6899      	ldr	r1, [r3, #8]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	029a      	lsls	r2, r3, #10
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	430a      	orrs	r2, r1
 80018ce:	609a      	str	r2, [r3, #8]
}
 80018d0:	bf00      	nop
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	40012300 	.word	0x40012300
 80018e0:	0f000001 	.word	0x0f000001

080018e4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018f0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d13c      	bne.n	8001978 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001902:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d12b      	bne.n	8001970 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800191c:	2b00      	cmp	r3, #0
 800191e:	d127      	bne.n	8001970 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001926:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800192a:	2b00      	cmp	r3, #0
 800192c:	d006      	beq.n	800193c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001938:	2b00      	cmp	r3, #0
 800193a:	d119      	bne.n	8001970 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	685a      	ldr	r2, [r3, #4]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f022 0220 	bic.w	r2, r2, #32
 800194a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001950:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d105      	bne.n	8001970 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001968:	f043 0201 	orr.w	r2, r3, #1
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f7ff fd71 	bl	8001458 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001976:	e00e      	b.n	8001996 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197c:	f003 0310 	and.w	r3, r3, #16
 8001980:	2b00      	cmp	r3, #0
 8001982:	d003      	beq.n	800198c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f7ff fd85 	bl	8001494 <HAL_ADC_ErrorCallback>
}
 800198a:	e004      	b.n	8001996 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	4798      	blx	r3
}
 8001996:	bf00      	nop
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b084      	sub	sp, #16
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019aa:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f7ff fd5d 	bl	800146c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019b2:	bf00      	nop
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b084      	sub	sp, #16
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019c6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2240      	movs	r2, #64	@ 0x40
 80019cc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d2:	f043 0204 	orr.w	r2, r3, #4
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80019da:	68f8      	ldr	r0, [r7, #12]
 80019dc:	f7ff fd5a 	bl	8001494 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019e0:	bf00      	nop
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a40 <__NVIC_SetPriorityGrouping+0x44>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a12:	68ba      	ldr	r2, [r7, #8]
 8001a14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a18:	4013      	ands	r3, r2
 8001a1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a2e:	4a04      	ldr	r2, [pc, #16]	@ (8001a40 <__NVIC_SetPriorityGrouping+0x44>)
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	60d3      	str	r3, [r2, #12]
}
 8001a34:	bf00      	nop
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a48:	4b04      	ldr	r3, [pc, #16]	@ (8001a5c <__NVIC_GetPriorityGrouping+0x18>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	0a1b      	lsrs	r3, r3, #8
 8001a4e:	f003 0307 	and.w	r3, r3, #7
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	db0b      	blt.n	8001a8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	f003 021f 	and.w	r2, r3, #31
 8001a78:	4907      	ldr	r1, [pc, #28]	@ (8001a98 <__NVIC_EnableIRQ+0x38>)
 8001a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7e:	095b      	lsrs	r3, r3, #5
 8001a80:	2001      	movs	r0, #1
 8001a82:	fa00 f202 	lsl.w	r2, r0, r2
 8001a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	e000e100 	.word	0xe000e100

08001a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	6039      	str	r1, [r7, #0]
 8001aa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	db0a      	blt.n	8001ac6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	b2da      	uxtb	r2, r3
 8001ab4:	490c      	ldr	r1, [pc, #48]	@ (8001ae8 <__NVIC_SetPriority+0x4c>)
 8001ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aba:	0112      	lsls	r2, r2, #4
 8001abc:	b2d2      	uxtb	r2, r2
 8001abe:	440b      	add	r3, r1
 8001ac0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ac4:	e00a      	b.n	8001adc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	4908      	ldr	r1, [pc, #32]	@ (8001aec <__NVIC_SetPriority+0x50>)
 8001acc:	79fb      	ldrb	r3, [r7, #7]
 8001ace:	f003 030f 	and.w	r3, r3, #15
 8001ad2:	3b04      	subs	r3, #4
 8001ad4:	0112      	lsls	r2, r2, #4
 8001ad6:	b2d2      	uxtb	r2, r2
 8001ad8:	440b      	add	r3, r1
 8001ada:	761a      	strb	r2, [r3, #24]
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	e000e100 	.word	0xe000e100
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b089      	sub	sp, #36	@ 0x24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f1c3 0307 	rsb	r3, r3, #7
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	bf28      	it	cs
 8001b0e:	2304      	movcs	r3, #4
 8001b10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	3304      	adds	r3, #4
 8001b16:	2b06      	cmp	r3, #6
 8001b18:	d902      	bls.n	8001b20 <NVIC_EncodePriority+0x30>
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	3b03      	subs	r3, #3
 8001b1e:	e000      	b.n	8001b22 <NVIC_EncodePriority+0x32>
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	43da      	mvns	r2, r3
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	401a      	ands	r2, r3
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b38:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b42:	43d9      	mvns	r1, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b48:	4313      	orrs	r3, r2
         );
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3724      	adds	r7, #36	@ 0x24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3b01      	subs	r3, #1
 8001b64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b68:	d301      	bcc.n	8001b6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e00f      	b.n	8001b8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b98 <SysTick_Config+0x40>)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3b01      	subs	r3, #1
 8001b74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b76:	210f      	movs	r1, #15
 8001b78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b7c:	f7ff ff8e 	bl	8001a9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b80:	4b05      	ldr	r3, [pc, #20]	@ (8001b98 <SysTick_Config+0x40>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b86:	4b04      	ldr	r3, [pc, #16]	@ (8001b98 <SysTick_Config+0x40>)
 8001b88:	2207      	movs	r2, #7
 8001b8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	e000e010 	.word	0xe000e010

08001b9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7ff ff29 	bl	80019fc <__NVIC_SetPriorityGrouping>
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b086      	sub	sp, #24
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	4603      	mov	r3, r0
 8001bba:	60b9      	str	r1, [r7, #8]
 8001bbc:	607a      	str	r2, [r7, #4]
 8001bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bc4:	f7ff ff3e 	bl	8001a44 <__NVIC_GetPriorityGrouping>
 8001bc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	68b9      	ldr	r1, [r7, #8]
 8001bce:	6978      	ldr	r0, [r7, #20]
 8001bd0:	f7ff ff8e 	bl	8001af0 <NVIC_EncodePriority>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bda:	4611      	mov	r1, r2
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff ff5d 	bl	8001a9c <__NVIC_SetPriority>
}
 8001be2:	bf00      	nop
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff ff31 	bl	8001a60 <__NVIC_EnableIRQ>
}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7ff ffa2 	bl	8001b58 <SysTick_Config>
 8001c14:	4603      	mov	r3, r0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
	...

08001c20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c2c:	f7ff f9a0 	bl	8000f70 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d101      	bne.n	8001c3c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e099      	b.n	8001d70 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2202      	movs	r2, #2
 8001c40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 0201 	bic.w	r2, r2, #1
 8001c5a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c5c:	e00f      	b.n	8001c7e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c5e:	f7ff f987 	bl	8000f70 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b05      	cmp	r3, #5
 8001c6a:	d908      	bls.n	8001c7e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2220      	movs	r2, #32
 8001c70:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2203      	movs	r2, #3
 8001c76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e078      	b.n	8001d70 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1e8      	bne.n	8001c5e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	4b38      	ldr	r3, [pc, #224]	@ (8001d78 <HAL_DMA_Init+0x158>)
 8001c98:	4013      	ands	r3, r2
 8001c9a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001caa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cc2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd4:	2b04      	cmp	r3, #4
 8001cd6:	d107      	bne.n	8001ce8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	f023 0307 	bic.w	r3, r3, #7
 8001cfe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0e:	2b04      	cmp	r3, #4
 8001d10:	d117      	bne.n	8001d42 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d00e      	beq.n	8001d42 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 fb01 	bl	800232c <DMA_CheckFifoParam>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d008      	beq.n	8001d42 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2240      	movs	r2, #64	@ 0x40
 8001d34:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e016      	b.n	8001d70 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 fab8 	bl	80022c0 <DMA_CalcBaseAndBitshift>
 8001d50:	4603      	mov	r3, r0
 8001d52:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d58:	223f      	movs	r2, #63	@ 0x3f
 8001d5a:	409a      	lsls	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	f010803f 	.word	0xf010803f

08001d7c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
 8001d88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d92:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d101      	bne.n	8001da2 <HAL_DMA_Start_IT+0x26>
 8001d9e:	2302      	movs	r3, #2
 8001da0:	e040      	b.n	8001e24 <HAL_DMA_Start_IT+0xa8>
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d12f      	bne.n	8001e16 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2202      	movs	r2, #2
 8001dba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	68b9      	ldr	r1, [r7, #8]
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f000 fa4a 	bl	8002264 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dd4:	223f      	movs	r2, #63	@ 0x3f
 8001dd6:	409a      	lsls	r2, r3
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f042 0216 	orr.w	r2, r2, #22
 8001dea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d007      	beq.n	8001e04 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f042 0208 	orr.w	r2, r2, #8
 8001e02:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f042 0201 	orr.w	r2, r2, #1
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	e005      	b.n	8001e22 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3718      	adds	r7, #24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e38:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e3a:	f7ff f899 	bl	8000f70 <HAL_GetTick>
 8001e3e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d008      	beq.n	8001e5e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2280      	movs	r2, #128	@ 0x80
 8001e50:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e052      	b.n	8001f04 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 0216 	bic.w	r2, r2, #22
 8001e6c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	695a      	ldr	r2, [r3, #20]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e7c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d103      	bne.n	8001e8e <HAL_DMA_Abort+0x62>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d007      	beq.n	8001e9e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 0208 	bic.w	r2, r2, #8
 8001e9c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 0201 	bic.w	r2, r2, #1
 8001eac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eae:	e013      	b.n	8001ed8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001eb0:	f7ff f85e 	bl	8000f70 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b05      	cmp	r3, #5
 8001ebc:	d90c      	bls.n	8001ed8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2220      	movs	r2, #32
 8001ec2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2203      	movs	r2, #3
 8001ec8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e015      	b.n	8001f04 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1e4      	bne.n	8001eb0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eea:	223f      	movs	r2, #63	@ 0x3f
 8001eec:	409a      	lsls	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d004      	beq.n	8001f2a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2280      	movs	r2, #128	@ 0x80
 8001f24:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e00c      	b.n	8001f44 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2205      	movs	r2, #5
 8001f2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0201 	bic.w	r2, r2, #1
 8001f40:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f5c:	4b8e      	ldr	r3, [pc, #568]	@ (8002198 <HAL_DMA_IRQHandler+0x248>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a8e      	ldr	r2, [pc, #568]	@ (800219c <HAL_DMA_IRQHandler+0x24c>)
 8001f62:	fba2 2303 	umull	r2, r3, r2, r3
 8001f66:	0a9b      	lsrs	r3, r3, #10
 8001f68:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f6e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f7a:	2208      	movs	r2, #8
 8001f7c:	409a      	lsls	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	4013      	ands	r3, r2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d01a      	beq.n	8001fbc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d013      	beq.n	8001fbc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 0204 	bic.w	r2, r2, #4
 8001fa2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa8:	2208      	movs	r2, #8
 8001faa:	409a      	lsls	r2, r3
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fb4:	f043 0201 	orr.w	r2, r3, #1
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	409a      	lsls	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d012      	beq.n	8001ff2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00b      	beq.n	8001ff2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fde:	2201      	movs	r2, #1
 8001fe0:	409a      	lsls	r2, r3
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fea:	f043 0202 	orr.w	r2, r3, #2
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff6:	2204      	movs	r2, #4
 8001ff8:	409a      	lsls	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d012      	beq.n	8002028 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00b      	beq.n	8002028 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002014:	2204      	movs	r2, #4
 8002016:	409a      	lsls	r2, r3
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002020:	f043 0204 	orr.w	r2, r3, #4
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800202c:	2210      	movs	r2, #16
 800202e:	409a      	lsls	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	4013      	ands	r3, r2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d043      	beq.n	80020c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0308 	and.w	r3, r3, #8
 8002042:	2b00      	cmp	r3, #0
 8002044:	d03c      	beq.n	80020c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800204a:	2210      	movs	r2, #16
 800204c:	409a      	lsls	r2, r3
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d018      	beq.n	8002092 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d108      	bne.n	8002080 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002072:	2b00      	cmp	r3, #0
 8002074:	d024      	beq.n	80020c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	4798      	blx	r3
 800207e:	e01f      	b.n	80020c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002084:	2b00      	cmp	r3, #0
 8002086:	d01b      	beq.n	80020c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	4798      	blx	r3
 8002090:	e016      	b.n	80020c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800209c:	2b00      	cmp	r3, #0
 800209e:	d107      	bne.n	80020b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f022 0208 	bic.w	r2, r2, #8
 80020ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d003      	beq.n	80020c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c4:	2220      	movs	r2, #32
 80020c6:	409a      	lsls	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	4013      	ands	r3, r2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f000 808f 	beq.w	80021f0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0310 	and.w	r3, r3, #16
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f000 8087 	beq.w	80021f0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020e6:	2220      	movs	r2, #32
 80020e8:	409a      	lsls	r2, r3
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b05      	cmp	r3, #5
 80020f8:	d136      	bne.n	8002168 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 0216 	bic.w	r2, r2, #22
 8002108:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	695a      	ldr	r2, [r3, #20]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002118:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211e:	2b00      	cmp	r3, #0
 8002120:	d103      	bne.n	800212a <HAL_DMA_IRQHandler+0x1da>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002126:	2b00      	cmp	r3, #0
 8002128:	d007      	beq.n	800213a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 0208 	bic.w	r2, r2, #8
 8002138:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800213e:	223f      	movs	r2, #63	@ 0x3f
 8002140:	409a      	lsls	r2, r3
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800215a:	2b00      	cmp	r3, #0
 800215c:	d07e      	beq.n	800225c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	4798      	blx	r3
        }
        return;
 8002166:	e079      	b.n	800225c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d01d      	beq.n	80021b2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10d      	bne.n	80021a0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002188:	2b00      	cmp	r3, #0
 800218a:	d031      	beq.n	80021f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	4798      	blx	r3
 8002194:	e02c      	b.n	80021f0 <HAL_DMA_IRQHandler+0x2a0>
 8002196:	bf00      	nop
 8002198:	20000000 	.word	0x20000000
 800219c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d023      	beq.n	80021f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	4798      	blx	r3
 80021b0:	e01e      	b.n	80021f0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d10f      	bne.n	80021e0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 0210 	bic.w	r2, r2, #16
 80021ce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d003      	beq.n	80021f0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d032      	beq.n	800225e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	2b00      	cmp	r3, #0
 8002202:	d022      	beq.n	800224a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2205      	movs	r2, #5
 8002208:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 0201 	bic.w	r2, r2, #1
 800221a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	3301      	adds	r3, #1
 8002220:	60bb      	str	r3, [r7, #8]
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	429a      	cmp	r2, r3
 8002226:	d307      	bcc.n	8002238 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1f2      	bne.n	800221c <HAL_DMA_IRQHandler+0x2cc>
 8002236:	e000      	b.n	800223a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002238:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800224e:	2b00      	cmp	r3, #0
 8002250:	d005      	beq.n	800225e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	4798      	blx	r3
 800225a:	e000      	b.n	800225e <HAL_DMA_IRQHandler+0x30e>
        return;
 800225c:	bf00      	nop
    }
  }
}
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
 8002270:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002280:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	2b40      	cmp	r3, #64	@ 0x40
 8002290:	d108      	bne.n	80022a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022a2:	e007      	b.n	80022b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68ba      	ldr	r2, [r7, #8]
 80022aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	60da      	str	r2, [r3, #12]
}
 80022b4:	bf00      	nop
 80022b6:	3714      	adds	r7, #20
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	3b10      	subs	r3, #16
 80022d0:	4a14      	ldr	r2, [pc, #80]	@ (8002324 <DMA_CalcBaseAndBitshift+0x64>)
 80022d2:	fba2 2303 	umull	r2, r3, r2, r3
 80022d6:	091b      	lsrs	r3, r3, #4
 80022d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022da:	4a13      	ldr	r2, [pc, #76]	@ (8002328 <DMA_CalcBaseAndBitshift+0x68>)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	4413      	add	r3, r2
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	461a      	mov	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2b03      	cmp	r3, #3
 80022ec:	d909      	bls.n	8002302 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80022f6:	f023 0303 	bic.w	r3, r3, #3
 80022fa:	1d1a      	adds	r2, r3, #4
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	659a      	str	r2, [r3, #88]	@ 0x58
 8002300:	e007      	b.n	8002312 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800230a:	f023 0303 	bic.w	r3, r3, #3
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002316:	4618      	mov	r0, r3
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	aaaaaaab 	.word	0xaaaaaaab
 8002328:	08004a08 	.word	0x08004a08

0800232c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002334:	2300      	movs	r3, #0
 8002336:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800233c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d11f      	bne.n	8002386 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	2b03      	cmp	r3, #3
 800234a:	d856      	bhi.n	80023fa <DMA_CheckFifoParam+0xce>
 800234c:	a201      	add	r2, pc, #4	@ (adr r2, 8002354 <DMA_CheckFifoParam+0x28>)
 800234e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002352:	bf00      	nop
 8002354:	08002365 	.word	0x08002365
 8002358:	08002377 	.word	0x08002377
 800235c:	08002365 	.word	0x08002365
 8002360:	080023fb 	.word	0x080023fb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002368:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d046      	beq.n	80023fe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002374:	e043      	b.n	80023fe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800237a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800237e:	d140      	bne.n	8002402 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002384:	e03d      	b.n	8002402 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800238e:	d121      	bne.n	80023d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	2b03      	cmp	r3, #3
 8002394:	d837      	bhi.n	8002406 <DMA_CheckFifoParam+0xda>
 8002396:	a201      	add	r2, pc, #4	@ (adr r2, 800239c <DMA_CheckFifoParam+0x70>)
 8002398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800239c:	080023ad 	.word	0x080023ad
 80023a0:	080023b3 	.word	0x080023b3
 80023a4:	080023ad 	.word	0x080023ad
 80023a8:	080023c5 	.word	0x080023c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	73fb      	strb	r3, [r7, #15]
      break;
 80023b0:	e030      	b.n	8002414 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d025      	beq.n	800240a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023c2:	e022      	b.n	800240a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80023cc:	d11f      	bne.n	800240e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023d2:	e01c      	b.n	800240e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d903      	bls.n	80023e2 <DMA_CheckFifoParam+0xb6>
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	2b03      	cmp	r3, #3
 80023de:	d003      	beq.n	80023e8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023e0:	e018      	b.n	8002414 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	73fb      	strb	r3, [r7, #15]
      break;
 80023e6:	e015      	b.n	8002414 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00e      	beq.n	8002412 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	73fb      	strb	r3, [r7, #15]
      break;
 80023f8:	e00b      	b.n	8002412 <DMA_CheckFifoParam+0xe6>
      break;
 80023fa:	bf00      	nop
 80023fc:	e00a      	b.n	8002414 <DMA_CheckFifoParam+0xe8>
      break;
 80023fe:	bf00      	nop
 8002400:	e008      	b.n	8002414 <DMA_CheckFifoParam+0xe8>
      break;
 8002402:	bf00      	nop
 8002404:	e006      	b.n	8002414 <DMA_CheckFifoParam+0xe8>
      break;
 8002406:	bf00      	nop
 8002408:	e004      	b.n	8002414 <DMA_CheckFifoParam+0xe8>
      break;
 800240a:	bf00      	nop
 800240c:	e002      	b.n	8002414 <DMA_CheckFifoParam+0xe8>
      break;   
 800240e:	bf00      	nop
 8002410:	e000      	b.n	8002414 <DMA_CheckFifoParam+0xe8>
      break;
 8002412:	bf00      	nop
    }
  } 
  
  return status; 
 8002414:	7bfb      	ldrb	r3, [r7, #15]
}
 8002416:	4618      	mov	r0, r3
 8002418:	3714      	adds	r7, #20
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop

08002424 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002424:	b480      	push	{r7}
 8002426:	b089      	sub	sp, #36	@ 0x24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800242e:	2300      	movs	r3, #0
 8002430:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002432:	2300      	movs	r3, #0
 8002434:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002436:	2300      	movs	r3, #0
 8002438:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800243a:	2300      	movs	r3, #0
 800243c:	61fb      	str	r3, [r7, #28]
 800243e:	e16b      	b.n	8002718 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002440:	2201      	movs	r2, #1
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	4013      	ands	r3, r2
 8002452:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	429a      	cmp	r2, r3
 800245a:	f040 815a 	bne.w	8002712 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	2b01      	cmp	r3, #1
 8002468:	d005      	beq.n	8002476 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002472:	2b02      	cmp	r3, #2
 8002474:	d130      	bne.n	80024d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	2203      	movs	r2, #3
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	43db      	mvns	r3, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4013      	ands	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4313      	orrs	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024ac:	2201      	movs	r2, #1
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	43db      	mvns	r3, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4013      	ands	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	091b      	lsrs	r3, r3, #4
 80024c2:	f003 0201 	and.w	r2, r3, #1
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 0303 	and.w	r3, r3, #3
 80024e0:	2b03      	cmp	r3, #3
 80024e2:	d017      	beq.n	8002514 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	2203      	movs	r2, #3
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	43db      	mvns	r3, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4013      	ands	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4313      	orrs	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 0303 	and.w	r3, r3, #3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d123      	bne.n	8002568 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	08da      	lsrs	r2, r3, #3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3208      	adds	r2, #8
 8002528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800252c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	f003 0307 	and.w	r3, r3, #7
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	220f      	movs	r2, #15
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	43db      	mvns	r3, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4013      	ands	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	691a      	ldr	r2, [r3, #16]
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4313      	orrs	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	08da      	lsrs	r2, r3, #3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	3208      	adds	r2, #8
 8002562:	69b9      	ldr	r1, [r7, #24]
 8002564:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	2203      	movs	r2, #3
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	43db      	mvns	r3, r3
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4013      	ands	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 0203 	and.w	r2, r3, #3
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4313      	orrs	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f000 80b4 	beq.w	8002712 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025aa:	2300      	movs	r3, #0
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	4b60      	ldr	r3, [pc, #384]	@ (8002730 <HAL_GPIO_Init+0x30c>)
 80025b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b2:	4a5f      	ldr	r2, [pc, #380]	@ (8002730 <HAL_GPIO_Init+0x30c>)
 80025b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80025ba:	4b5d      	ldr	r3, [pc, #372]	@ (8002730 <HAL_GPIO_Init+0x30c>)
 80025bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025c6:	4a5b      	ldr	r2, [pc, #364]	@ (8002734 <HAL_GPIO_Init+0x310>)
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	089b      	lsrs	r3, r3, #2
 80025cc:	3302      	adds	r3, #2
 80025ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	f003 0303 	and.w	r3, r3, #3
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	220f      	movs	r2, #15
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	43db      	mvns	r3, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4013      	ands	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a52      	ldr	r2, [pc, #328]	@ (8002738 <HAL_GPIO_Init+0x314>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d02b      	beq.n	800264a <HAL_GPIO_Init+0x226>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a51      	ldr	r2, [pc, #324]	@ (800273c <HAL_GPIO_Init+0x318>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d025      	beq.n	8002646 <HAL_GPIO_Init+0x222>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a50      	ldr	r2, [pc, #320]	@ (8002740 <HAL_GPIO_Init+0x31c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d01f      	beq.n	8002642 <HAL_GPIO_Init+0x21e>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a4f      	ldr	r2, [pc, #316]	@ (8002744 <HAL_GPIO_Init+0x320>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d019      	beq.n	800263e <HAL_GPIO_Init+0x21a>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a4e      	ldr	r2, [pc, #312]	@ (8002748 <HAL_GPIO_Init+0x324>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d013      	beq.n	800263a <HAL_GPIO_Init+0x216>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a4d      	ldr	r2, [pc, #308]	@ (800274c <HAL_GPIO_Init+0x328>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d00d      	beq.n	8002636 <HAL_GPIO_Init+0x212>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a4c      	ldr	r2, [pc, #304]	@ (8002750 <HAL_GPIO_Init+0x32c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d007      	beq.n	8002632 <HAL_GPIO_Init+0x20e>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a4b      	ldr	r2, [pc, #300]	@ (8002754 <HAL_GPIO_Init+0x330>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d101      	bne.n	800262e <HAL_GPIO_Init+0x20a>
 800262a:	2307      	movs	r3, #7
 800262c:	e00e      	b.n	800264c <HAL_GPIO_Init+0x228>
 800262e:	2308      	movs	r3, #8
 8002630:	e00c      	b.n	800264c <HAL_GPIO_Init+0x228>
 8002632:	2306      	movs	r3, #6
 8002634:	e00a      	b.n	800264c <HAL_GPIO_Init+0x228>
 8002636:	2305      	movs	r3, #5
 8002638:	e008      	b.n	800264c <HAL_GPIO_Init+0x228>
 800263a:	2304      	movs	r3, #4
 800263c:	e006      	b.n	800264c <HAL_GPIO_Init+0x228>
 800263e:	2303      	movs	r3, #3
 8002640:	e004      	b.n	800264c <HAL_GPIO_Init+0x228>
 8002642:	2302      	movs	r3, #2
 8002644:	e002      	b.n	800264c <HAL_GPIO_Init+0x228>
 8002646:	2301      	movs	r3, #1
 8002648:	e000      	b.n	800264c <HAL_GPIO_Init+0x228>
 800264a:	2300      	movs	r3, #0
 800264c:	69fa      	ldr	r2, [r7, #28]
 800264e:	f002 0203 	and.w	r2, r2, #3
 8002652:	0092      	lsls	r2, r2, #2
 8002654:	4093      	lsls	r3, r2
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4313      	orrs	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800265c:	4935      	ldr	r1, [pc, #212]	@ (8002734 <HAL_GPIO_Init+0x310>)
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	089b      	lsrs	r3, r3, #2
 8002662:	3302      	adds	r3, #2
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800266a:	4b3b      	ldr	r3, [pc, #236]	@ (8002758 <HAL_GPIO_Init+0x334>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	43db      	mvns	r3, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4013      	ands	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	4313      	orrs	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800268e:	4a32      	ldr	r2, [pc, #200]	@ (8002758 <HAL_GPIO_Init+0x334>)
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002694:	4b30      	ldr	r3, [pc, #192]	@ (8002758 <HAL_GPIO_Init+0x334>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	43db      	mvns	r3, r3
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	4013      	ands	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026b8:	4a27      	ldr	r2, [pc, #156]	@ (8002758 <HAL_GPIO_Init+0x334>)
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026be:	4b26      	ldr	r3, [pc, #152]	@ (8002758 <HAL_GPIO_Init+0x334>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	43db      	mvns	r3, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4013      	ands	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	4313      	orrs	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026e2:	4a1d      	ldr	r2, [pc, #116]	@ (8002758 <HAL_GPIO_Init+0x334>)
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002758 <HAL_GPIO_Init+0x334>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	43db      	mvns	r3, r3
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4013      	ands	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	4313      	orrs	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800270c:	4a12      	ldr	r2, [pc, #72]	@ (8002758 <HAL_GPIO_Init+0x334>)
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	3301      	adds	r3, #1
 8002716:	61fb      	str	r3, [r7, #28]
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	2b0f      	cmp	r3, #15
 800271c:	f67f ae90 	bls.w	8002440 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002720:	bf00      	nop
 8002722:	bf00      	nop
 8002724:	3724      	adds	r7, #36	@ 0x24
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	40023800 	.word	0x40023800
 8002734:	40013800 	.word	0x40013800
 8002738:	40020000 	.word	0x40020000
 800273c:	40020400 	.word	0x40020400
 8002740:	40020800 	.word	0x40020800
 8002744:	40020c00 	.word	0x40020c00
 8002748:	40021000 	.word	0x40021000
 800274c:	40021400 	.word	0x40021400
 8002750:	40021800 	.word	0x40021800
 8002754:	40021c00 	.word	0x40021c00
 8002758:	40013c00 	.word	0x40013c00

0800275c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e267      	b.n	8002c3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d075      	beq.n	8002866 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800277a:	4b88      	ldr	r3, [pc, #544]	@ (800299c <HAL_RCC_OscConfig+0x240>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 030c 	and.w	r3, r3, #12
 8002782:	2b04      	cmp	r3, #4
 8002784:	d00c      	beq.n	80027a0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002786:	4b85      	ldr	r3, [pc, #532]	@ (800299c <HAL_RCC_OscConfig+0x240>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800278e:	2b08      	cmp	r3, #8
 8002790:	d112      	bne.n	80027b8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002792:	4b82      	ldr	r3, [pc, #520]	@ (800299c <HAL_RCC_OscConfig+0x240>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800279a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800279e:	d10b      	bne.n	80027b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a0:	4b7e      	ldr	r3, [pc, #504]	@ (800299c <HAL_RCC_OscConfig+0x240>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d05b      	beq.n	8002864 <HAL_RCC_OscConfig+0x108>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d157      	bne.n	8002864 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e242      	b.n	8002c3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027c0:	d106      	bne.n	80027d0 <HAL_RCC_OscConfig+0x74>
 80027c2:	4b76      	ldr	r3, [pc, #472]	@ (800299c <HAL_RCC_OscConfig+0x240>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a75      	ldr	r2, [pc, #468]	@ (800299c <HAL_RCC_OscConfig+0x240>)
 80027c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027cc:	6013      	str	r3, [r2, #0]
 80027ce:	e01d      	b.n	800280c <HAL_RCC_OscConfig+0xb0>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027d8:	d10c      	bne.n	80027f4 <HAL_RCC_OscConfig+0x98>
 80027da:	4b70      	ldr	r3, [pc, #448]	@ (800299c <HAL_RCC_OscConfig+0x240>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a6f      	ldr	r2, [pc, #444]	@ (800299c <HAL_RCC_OscConfig+0x240>)
 80027e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027e4:	6013      	str	r3, [r2, #0]
 80027e6:	4b6d      	ldr	r3, [pc, #436]	@ (800299c <HAL_RCC_OscConfig+0x240>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a6c      	ldr	r2, [pc, #432]	@ (800299c <HAL_RCC_OscConfig+0x240>)
 80027ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027f0:	6013      	str	r3, [r2, #0]
 80027f2:	e00b      	b.n	800280c <HAL_RCC_OscConfig+0xb0>
 80027f4:	4b69      	ldr	r3, [pc, #420]	@ (800299c <HAL_RCC_OscConfig+0x240>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a68      	ldr	r2, [pc, #416]	@ (800299c <HAL_RCC_OscConfig+0x240>)
 80027fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027fe:	6013      	str	r3, [r2, #0]
 8002800:	4b66      	ldr	r3, [pc, #408]	@ (800299c <HAL_RCC_OscConfig+0x240>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a65      	ldr	r2, [pc, #404]	@ (800299c <HAL_RCC_OscConfig+0x240>)
 8002806:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800280a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d013      	beq.n	800283c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002814:	f7fe fbac 	bl	8000f70 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800281c:	f7fe fba8 	bl	8000f70 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b64      	cmp	r3, #100	@ 0x64
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e207      	b.n	8002c3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282e:	4b5b      	ldr	r3, [pc, #364]	@ (800299c <HAL_RCC_OscConfig+0x240>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0f0      	beq.n	800281c <HAL_RCC_OscConfig+0xc0>
 800283a:	e014      	b.n	8002866 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283c:	f7fe fb98 	bl	8000f70 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002844:	f7fe fb94 	bl	8000f70 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b64      	cmp	r3, #100	@ 0x64
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e1f3      	b.n	8002c3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002856:	4b51      	ldr	r3, [pc, #324]	@ (800299c <HAL_RCC_OscConfig+0x240>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f0      	bne.n	8002844 <HAL_RCC_OscConfig+0xe8>
 8002862:	e000      	b.n	8002866 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002864:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d063      	beq.n	800293a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002872:	4b4a      	ldr	r3, [pc, #296]	@ (800299c <HAL_RCC_OscConfig+0x240>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 030c 	and.w	r3, r3, #12
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00b      	beq.n	8002896 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800287e:	4b47      	ldr	r3, [pc, #284]	@ (800299c <HAL_RCC_OscConfig+0x240>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002886:	2b08      	cmp	r3, #8
 8002888:	d11c      	bne.n	80028c4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800288a:	4b44      	ldr	r3, [pc, #272]	@ (800299c <HAL_RCC_OscConfig+0x240>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d116      	bne.n	80028c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002896:	4b41      	ldr	r3, [pc, #260]	@ (800299c <HAL_RCC_OscConfig+0x240>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d005      	beq.n	80028ae <HAL_RCC_OscConfig+0x152>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d001      	beq.n	80028ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e1c7      	b.n	8002c3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ae:	4b3b      	ldr	r3, [pc, #236]	@ (800299c <HAL_RCC_OscConfig+0x240>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	4937      	ldr	r1, [pc, #220]	@ (800299c <HAL_RCC_OscConfig+0x240>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028c2:	e03a      	b.n	800293a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d020      	beq.n	800290e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028cc:	4b34      	ldr	r3, [pc, #208]	@ (80029a0 <HAL_RCC_OscConfig+0x244>)
 80028ce:	2201      	movs	r2, #1
 80028d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d2:	f7fe fb4d 	bl	8000f70 <HAL_GetTick>
 80028d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d8:	e008      	b.n	80028ec <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028da:	f7fe fb49 	bl	8000f70 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e1a8      	b.n	8002c3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ec:	4b2b      	ldr	r3, [pc, #172]	@ (800299c <HAL_RCC_OscConfig+0x240>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0f0      	beq.n	80028da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f8:	4b28      	ldr	r3, [pc, #160]	@ (800299c <HAL_RCC_OscConfig+0x240>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	4925      	ldr	r1, [pc, #148]	@ (800299c <HAL_RCC_OscConfig+0x240>)
 8002908:	4313      	orrs	r3, r2
 800290a:	600b      	str	r3, [r1, #0]
 800290c:	e015      	b.n	800293a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800290e:	4b24      	ldr	r3, [pc, #144]	@ (80029a0 <HAL_RCC_OscConfig+0x244>)
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002914:	f7fe fb2c 	bl	8000f70 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800291c:	f7fe fb28 	bl	8000f70 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e187      	b.n	8002c3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800292e:	4b1b      	ldr	r3, [pc, #108]	@ (800299c <HAL_RCC_OscConfig+0x240>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1f0      	bne.n	800291c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0308 	and.w	r3, r3, #8
 8002942:	2b00      	cmp	r3, #0
 8002944:	d036      	beq.n	80029b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d016      	beq.n	800297c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800294e:	4b15      	ldr	r3, [pc, #84]	@ (80029a4 <HAL_RCC_OscConfig+0x248>)
 8002950:	2201      	movs	r2, #1
 8002952:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002954:	f7fe fb0c 	bl	8000f70 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800295c:	f7fe fb08 	bl	8000f70 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e167      	b.n	8002c3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800296e:	4b0b      	ldr	r3, [pc, #44]	@ (800299c <HAL_RCC_OscConfig+0x240>)
 8002970:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0f0      	beq.n	800295c <HAL_RCC_OscConfig+0x200>
 800297a:	e01b      	b.n	80029b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800297c:	4b09      	ldr	r3, [pc, #36]	@ (80029a4 <HAL_RCC_OscConfig+0x248>)
 800297e:	2200      	movs	r2, #0
 8002980:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002982:	f7fe faf5 	bl	8000f70 <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002988:	e00e      	b.n	80029a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800298a:	f7fe faf1 	bl	8000f70 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d907      	bls.n	80029a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e150      	b.n	8002c3e <HAL_RCC_OscConfig+0x4e2>
 800299c:	40023800 	.word	0x40023800
 80029a0:	42470000 	.word	0x42470000
 80029a4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029a8:	4b88      	ldr	r3, [pc, #544]	@ (8002bcc <HAL_RCC_OscConfig+0x470>)
 80029aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1ea      	bne.n	800298a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 8097 	beq.w	8002af0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029c2:	2300      	movs	r3, #0
 80029c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029c6:	4b81      	ldr	r3, [pc, #516]	@ (8002bcc <HAL_RCC_OscConfig+0x470>)
 80029c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10f      	bne.n	80029f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	60bb      	str	r3, [r7, #8]
 80029d6:	4b7d      	ldr	r3, [pc, #500]	@ (8002bcc <HAL_RCC_OscConfig+0x470>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029da:	4a7c      	ldr	r2, [pc, #496]	@ (8002bcc <HAL_RCC_OscConfig+0x470>)
 80029dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80029e2:	4b7a      	ldr	r3, [pc, #488]	@ (8002bcc <HAL_RCC_OscConfig+0x470>)
 80029e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ea:	60bb      	str	r3, [r7, #8]
 80029ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029ee:	2301      	movs	r3, #1
 80029f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f2:	4b77      	ldr	r3, [pc, #476]	@ (8002bd0 <HAL_RCC_OscConfig+0x474>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d118      	bne.n	8002a30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029fe:	4b74      	ldr	r3, [pc, #464]	@ (8002bd0 <HAL_RCC_OscConfig+0x474>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a73      	ldr	r2, [pc, #460]	@ (8002bd0 <HAL_RCC_OscConfig+0x474>)
 8002a04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a0a:	f7fe fab1 	bl	8000f70 <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a12:	f7fe faad 	bl	8000f70 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e10c      	b.n	8002c3e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a24:	4b6a      	ldr	r3, [pc, #424]	@ (8002bd0 <HAL_RCC_OscConfig+0x474>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0f0      	beq.n	8002a12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d106      	bne.n	8002a46 <HAL_RCC_OscConfig+0x2ea>
 8002a38:	4b64      	ldr	r3, [pc, #400]	@ (8002bcc <HAL_RCC_OscConfig+0x470>)
 8002a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a3c:	4a63      	ldr	r2, [pc, #396]	@ (8002bcc <HAL_RCC_OscConfig+0x470>)
 8002a3e:	f043 0301 	orr.w	r3, r3, #1
 8002a42:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a44:	e01c      	b.n	8002a80 <HAL_RCC_OscConfig+0x324>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	2b05      	cmp	r3, #5
 8002a4c:	d10c      	bne.n	8002a68 <HAL_RCC_OscConfig+0x30c>
 8002a4e:	4b5f      	ldr	r3, [pc, #380]	@ (8002bcc <HAL_RCC_OscConfig+0x470>)
 8002a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a52:	4a5e      	ldr	r2, [pc, #376]	@ (8002bcc <HAL_RCC_OscConfig+0x470>)
 8002a54:	f043 0304 	orr.w	r3, r3, #4
 8002a58:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a5a:	4b5c      	ldr	r3, [pc, #368]	@ (8002bcc <HAL_RCC_OscConfig+0x470>)
 8002a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a5e:	4a5b      	ldr	r2, [pc, #364]	@ (8002bcc <HAL_RCC_OscConfig+0x470>)
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a66:	e00b      	b.n	8002a80 <HAL_RCC_OscConfig+0x324>
 8002a68:	4b58      	ldr	r3, [pc, #352]	@ (8002bcc <HAL_RCC_OscConfig+0x470>)
 8002a6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a6c:	4a57      	ldr	r2, [pc, #348]	@ (8002bcc <HAL_RCC_OscConfig+0x470>)
 8002a6e:	f023 0301 	bic.w	r3, r3, #1
 8002a72:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a74:	4b55      	ldr	r3, [pc, #340]	@ (8002bcc <HAL_RCC_OscConfig+0x470>)
 8002a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a78:	4a54      	ldr	r2, [pc, #336]	@ (8002bcc <HAL_RCC_OscConfig+0x470>)
 8002a7a:	f023 0304 	bic.w	r3, r3, #4
 8002a7e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d015      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a88:	f7fe fa72 	bl	8000f70 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a8e:	e00a      	b.n	8002aa6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a90:	f7fe fa6e 	bl	8000f70 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e0cb      	b.n	8002c3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa6:	4b49      	ldr	r3, [pc, #292]	@ (8002bcc <HAL_RCC_OscConfig+0x470>)
 8002aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d0ee      	beq.n	8002a90 <HAL_RCC_OscConfig+0x334>
 8002ab2:	e014      	b.n	8002ade <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab4:	f7fe fa5c 	bl	8000f70 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aba:	e00a      	b.n	8002ad2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002abc:	f7fe fa58 	bl	8000f70 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e0b5      	b.n	8002c3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ad2:	4b3e      	ldr	r3, [pc, #248]	@ (8002bcc <HAL_RCC_OscConfig+0x470>)
 8002ad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1ee      	bne.n	8002abc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ade:	7dfb      	ldrb	r3, [r7, #23]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d105      	bne.n	8002af0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ae4:	4b39      	ldr	r3, [pc, #228]	@ (8002bcc <HAL_RCC_OscConfig+0x470>)
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae8:	4a38      	ldr	r2, [pc, #224]	@ (8002bcc <HAL_RCC_OscConfig+0x470>)
 8002aea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002aee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 80a1 	beq.w	8002c3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002afa:	4b34      	ldr	r3, [pc, #208]	@ (8002bcc <HAL_RCC_OscConfig+0x470>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 030c 	and.w	r3, r3, #12
 8002b02:	2b08      	cmp	r3, #8
 8002b04:	d05c      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d141      	bne.n	8002b92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b0e:	4b31      	ldr	r3, [pc, #196]	@ (8002bd4 <HAL_RCC_OscConfig+0x478>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b14:	f7fe fa2c 	bl	8000f70 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b1c:	f7fe fa28 	bl	8000f70 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e087      	b.n	8002c3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b2e:	4b27      	ldr	r3, [pc, #156]	@ (8002bcc <HAL_RCC_OscConfig+0x470>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1f0      	bne.n	8002b1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	69da      	ldr	r2, [r3, #28]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	431a      	orrs	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b48:	019b      	lsls	r3, r3, #6
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b50:	085b      	lsrs	r3, r3, #1
 8002b52:	3b01      	subs	r3, #1
 8002b54:	041b      	lsls	r3, r3, #16
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b5c:	061b      	lsls	r3, r3, #24
 8002b5e:	491b      	ldr	r1, [pc, #108]	@ (8002bcc <HAL_RCC_OscConfig+0x470>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b64:	4b1b      	ldr	r3, [pc, #108]	@ (8002bd4 <HAL_RCC_OscConfig+0x478>)
 8002b66:	2201      	movs	r2, #1
 8002b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6a:	f7fe fa01 	bl	8000f70 <HAL_GetTick>
 8002b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b70:	e008      	b.n	8002b84 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b72:	f7fe f9fd 	bl	8000f70 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e05c      	b.n	8002c3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b84:	4b11      	ldr	r3, [pc, #68]	@ (8002bcc <HAL_RCC_OscConfig+0x470>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0f0      	beq.n	8002b72 <HAL_RCC_OscConfig+0x416>
 8002b90:	e054      	b.n	8002c3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b92:	4b10      	ldr	r3, [pc, #64]	@ (8002bd4 <HAL_RCC_OscConfig+0x478>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b98:	f7fe f9ea 	bl	8000f70 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba0:	f7fe f9e6 	bl	8000f70 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e045      	b.n	8002c3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb2:	4b06      	ldr	r3, [pc, #24]	@ (8002bcc <HAL_RCC_OscConfig+0x470>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f0      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x444>
 8002bbe:	e03d      	b.n	8002c3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d107      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e038      	b.n	8002c3e <HAL_RCC_OscConfig+0x4e2>
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	40007000 	.word	0x40007000
 8002bd4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c48 <HAL_RCC_OscConfig+0x4ec>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d028      	beq.n	8002c38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d121      	bne.n	8002c38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d11a      	bne.n	8002c38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c08:	4013      	ands	r3, r2
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d111      	bne.n	8002c38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c1e:	085b      	lsrs	r3, r3, #1
 8002c20:	3b01      	subs	r3, #1
 8002c22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d107      	bne.n	8002c38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d001      	beq.n	8002c3c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e000      	b.n	8002c3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	40023800 	.word	0x40023800

08002c4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d101      	bne.n	8002c60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e0cc      	b.n	8002dfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c60:	4b68      	ldr	r3, [pc, #416]	@ (8002e04 <HAL_RCC_ClockConfig+0x1b8>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0307 	and.w	r3, r3, #7
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d90c      	bls.n	8002c88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c6e:	4b65      	ldr	r3, [pc, #404]	@ (8002e04 <HAL_RCC_ClockConfig+0x1b8>)
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	b2d2      	uxtb	r2, r2
 8002c74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c76:	4b63      	ldr	r3, [pc, #396]	@ (8002e04 <HAL_RCC_ClockConfig+0x1b8>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d001      	beq.n	8002c88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e0b8      	b.n	8002dfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d020      	beq.n	8002cd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d005      	beq.n	8002cac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ca0:	4b59      	ldr	r3, [pc, #356]	@ (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	4a58      	ldr	r2, [pc, #352]	@ (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002caa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0308 	and.w	r3, r3, #8
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d005      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cb8:	4b53      	ldr	r3, [pc, #332]	@ (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	4a52      	ldr	r2, [pc, #328]	@ (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002cbe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002cc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cc4:	4b50      	ldr	r3, [pc, #320]	@ (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	494d      	ldr	r1, [pc, #308]	@ (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d044      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d107      	bne.n	8002cfa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cea:	4b47      	ldr	r3, [pc, #284]	@ (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d119      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e07f      	b.n	8002dfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d003      	beq.n	8002d0a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d06:	2b03      	cmp	r3, #3
 8002d08:	d107      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d0a:	4b3f      	ldr	r3, [pc, #252]	@ (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d109      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e06f      	b.n	8002dfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d1a:	4b3b      	ldr	r3, [pc, #236]	@ (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e067      	b.n	8002dfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d2a:	4b37      	ldr	r3, [pc, #220]	@ (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f023 0203 	bic.w	r2, r3, #3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	4934      	ldr	r1, [pc, #208]	@ (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d3c:	f7fe f918 	bl	8000f70 <HAL_GetTick>
 8002d40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d42:	e00a      	b.n	8002d5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d44:	f7fe f914 	bl	8000f70 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e04f      	b.n	8002dfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d5a:	4b2b      	ldr	r3, [pc, #172]	@ (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 020c 	and.w	r2, r3, #12
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d1eb      	bne.n	8002d44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d6c:	4b25      	ldr	r3, [pc, #148]	@ (8002e04 <HAL_RCC_ClockConfig+0x1b8>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d20c      	bcs.n	8002d94 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7a:	4b22      	ldr	r3, [pc, #136]	@ (8002e04 <HAL_RCC_ClockConfig+0x1b8>)
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	b2d2      	uxtb	r2, r2
 8002d80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d82:	4b20      	ldr	r3, [pc, #128]	@ (8002e04 <HAL_RCC_ClockConfig+0x1b8>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0307 	and.w	r3, r3, #7
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d001      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e032      	b.n	8002dfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0304 	and.w	r3, r3, #4
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d008      	beq.n	8002db2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002da0:	4b19      	ldr	r3, [pc, #100]	@ (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	4916      	ldr	r1, [pc, #88]	@ (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0308 	and.w	r3, r3, #8
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d009      	beq.n	8002dd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dbe:	4b12      	ldr	r3, [pc, #72]	@ (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	490e      	ldr	r1, [pc, #56]	@ (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dd2:	f000 f821 	bl	8002e18 <HAL_RCC_GetSysClockFreq>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	091b      	lsrs	r3, r3, #4
 8002dde:	f003 030f 	and.w	r3, r3, #15
 8002de2:	490a      	ldr	r1, [pc, #40]	@ (8002e0c <HAL_RCC_ClockConfig+0x1c0>)
 8002de4:	5ccb      	ldrb	r3, [r1, r3]
 8002de6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dea:	4a09      	ldr	r2, [pc, #36]	@ (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002dec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002dee:	4b09      	ldr	r3, [pc, #36]	@ (8002e14 <HAL_RCC_ClockConfig+0x1c8>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fe f878 	bl	8000ee8 <HAL_InitTick>

  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	40023c00 	.word	0x40023c00
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	080049f0 	.word	0x080049f0
 8002e10:	20000000 	.word	0x20000000
 8002e14:	20000004 	.word	0x20000004

08002e18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e1c:	b094      	sub	sp, #80	@ 0x50
 8002e1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002e24:	2300      	movs	r3, #0
 8002e26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e30:	4b79      	ldr	r3, [pc, #484]	@ (8003018 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 030c 	and.w	r3, r3, #12
 8002e38:	2b08      	cmp	r3, #8
 8002e3a:	d00d      	beq.n	8002e58 <HAL_RCC_GetSysClockFreq+0x40>
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	f200 80e1 	bhi.w	8003004 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d002      	beq.n	8002e4c <HAL_RCC_GetSysClockFreq+0x34>
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d003      	beq.n	8002e52 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e4a:	e0db      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e4c:	4b73      	ldr	r3, [pc, #460]	@ (800301c <HAL_RCC_GetSysClockFreq+0x204>)
 8002e4e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e50:	e0db      	b.n	800300a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e52:	4b73      	ldr	r3, [pc, #460]	@ (8003020 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e56:	e0d8      	b.n	800300a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e58:	4b6f      	ldr	r3, [pc, #444]	@ (8003018 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e60:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e62:	4b6d      	ldr	r3, [pc, #436]	@ (8003018 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d063      	beq.n	8002f36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e6e:	4b6a      	ldr	r3, [pc, #424]	@ (8003018 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	099b      	lsrs	r3, r3, #6
 8002e74:	2200      	movs	r2, #0
 8002e76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e78:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e80:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e82:	2300      	movs	r3, #0
 8002e84:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002e8a:	4622      	mov	r2, r4
 8002e8c:	462b      	mov	r3, r5
 8002e8e:	f04f 0000 	mov.w	r0, #0
 8002e92:	f04f 0100 	mov.w	r1, #0
 8002e96:	0159      	lsls	r1, r3, #5
 8002e98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e9c:	0150      	lsls	r0, r2, #5
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	4621      	mov	r1, r4
 8002ea4:	1a51      	subs	r1, r2, r1
 8002ea6:	6139      	str	r1, [r7, #16]
 8002ea8:	4629      	mov	r1, r5
 8002eaa:	eb63 0301 	sbc.w	r3, r3, r1
 8002eae:	617b      	str	r3, [r7, #20]
 8002eb0:	f04f 0200 	mov.w	r2, #0
 8002eb4:	f04f 0300 	mov.w	r3, #0
 8002eb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ebc:	4659      	mov	r1, fp
 8002ebe:	018b      	lsls	r3, r1, #6
 8002ec0:	4651      	mov	r1, sl
 8002ec2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ec6:	4651      	mov	r1, sl
 8002ec8:	018a      	lsls	r2, r1, #6
 8002eca:	4651      	mov	r1, sl
 8002ecc:	ebb2 0801 	subs.w	r8, r2, r1
 8002ed0:	4659      	mov	r1, fp
 8002ed2:	eb63 0901 	sbc.w	r9, r3, r1
 8002ed6:	f04f 0200 	mov.w	r2, #0
 8002eda:	f04f 0300 	mov.w	r3, #0
 8002ede:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ee2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ee6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002eea:	4690      	mov	r8, r2
 8002eec:	4699      	mov	r9, r3
 8002eee:	4623      	mov	r3, r4
 8002ef0:	eb18 0303 	adds.w	r3, r8, r3
 8002ef4:	60bb      	str	r3, [r7, #8]
 8002ef6:	462b      	mov	r3, r5
 8002ef8:	eb49 0303 	adc.w	r3, r9, r3
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	f04f 0300 	mov.w	r3, #0
 8002f06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f0a:	4629      	mov	r1, r5
 8002f0c:	024b      	lsls	r3, r1, #9
 8002f0e:	4621      	mov	r1, r4
 8002f10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f14:	4621      	mov	r1, r4
 8002f16:	024a      	lsls	r2, r1, #9
 8002f18:	4610      	mov	r0, r2
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f1e:	2200      	movs	r2, #0
 8002f20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f28:	f7fd f9aa 	bl	8000280 <__aeabi_uldivmod>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	460b      	mov	r3, r1
 8002f30:	4613      	mov	r3, r2
 8002f32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f34:	e058      	b.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f36:	4b38      	ldr	r3, [pc, #224]	@ (8003018 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	099b      	lsrs	r3, r3, #6
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	4618      	mov	r0, r3
 8002f40:	4611      	mov	r1, r2
 8002f42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f46:	623b      	str	r3, [r7, #32]
 8002f48:	2300      	movs	r3, #0
 8002f4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f50:	4642      	mov	r2, r8
 8002f52:	464b      	mov	r3, r9
 8002f54:	f04f 0000 	mov.w	r0, #0
 8002f58:	f04f 0100 	mov.w	r1, #0
 8002f5c:	0159      	lsls	r1, r3, #5
 8002f5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f62:	0150      	lsls	r0, r2, #5
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	4641      	mov	r1, r8
 8002f6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f6e:	4649      	mov	r1, r9
 8002f70:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f74:	f04f 0200 	mov.w	r2, #0
 8002f78:	f04f 0300 	mov.w	r3, #0
 8002f7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f88:	ebb2 040a 	subs.w	r4, r2, sl
 8002f8c:	eb63 050b 	sbc.w	r5, r3, fp
 8002f90:	f04f 0200 	mov.w	r2, #0
 8002f94:	f04f 0300 	mov.w	r3, #0
 8002f98:	00eb      	lsls	r3, r5, #3
 8002f9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f9e:	00e2      	lsls	r2, r4, #3
 8002fa0:	4614      	mov	r4, r2
 8002fa2:	461d      	mov	r5, r3
 8002fa4:	4643      	mov	r3, r8
 8002fa6:	18e3      	adds	r3, r4, r3
 8002fa8:	603b      	str	r3, [r7, #0]
 8002faa:	464b      	mov	r3, r9
 8002fac:	eb45 0303 	adc.w	r3, r5, r3
 8002fb0:	607b      	str	r3, [r7, #4]
 8002fb2:	f04f 0200 	mov.w	r2, #0
 8002fb6:	f04f 0300 	mov.w	r3, #0
 8002fba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fbe:	4629      	mov	r1, r5
 8002fc0:	028b      	lsls	r3, r1, #10
 8002fc2:	4621      	mov	r1, r4
 8002fc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fc8:	4621      	mov	r1, r4
 8002fca:	028a      	lsls	r2, r1, #10
 8002fcc:	4610      	mov	r0, r2
 8002fce:	4619      	mov	r1, r3
 8002fd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	61bb      	str	r3, [r7, #24]
 8002fd6:	61fa      	str	r2, [r7, #28]
 8002fd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fdc:	f7fd f950 	bl	8000280 <__aeabi_uldivmod>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8003018 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	0c1b      	lsrs	r3, r3, #16
 8002fee:	f003 0303 	and.w	r3, r3, #3
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002ff8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ffa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003000:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003002:	e002      	b.n	800300a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003004:	4b05      	ldr	r3, [pc, #20]	@ (800301c <HAL_RCC_GetSysClockFreq+0x204>)
 8003006:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003008:	bf00      	nop
    }
  }
  return sysclockfreq;
 800300a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800300c:	4618      	mov	r0, r3
 800300e:	3750      	adds	r7, #80	@ 0x50
 8003010:	46bd      	mov	sp, r7
 8003012:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003016:	bf00      	nop
 8003018:	40023800 	.word	0x40023800
 800301c:	00f42400 	.word	0x00f42400
 8003020:	007a1200 	.word	0x007a1200

08003024 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003028:	4b03      	ldr	r3, [pc, #12]	@ (8003038 <HAL_RCC_GetHCLKFreq+0x14>)
 800302a:	681b      	ldr	r3, [r3, #0]
}
 800302c:	4618      	mov	r0, r3
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	20000000 	.word	0x20000000

0800303c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003040:	f7ff fff0 	bl	8003024 <HAL_RCC_GetHCLKFreq>
 8003044:	4602      	mov	r2, r0
 8003046:	4b05      	ldr	r3, [pc, #20]	@ (800305c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	0a9b      	lsrs	r3, r3, #10
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	4903      	ldr	r1, [pc, #12]	@ (8003060 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003052:	5ccb      	ldrb	r3, [r1, r3]
 8003054:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003058:	4618      	mov	r0, r3
 800305a:	bd80      	pop	{r7, pc}
 800305c:	40023800 	.word	0x40023800
 8003060:	08004a00 	.word	0x08004a00

08003064 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003068:	f7ff ffdc 	bl	8003024 <HAL_RCC_GetHCLKFreq>
 800306c:	4602      	mov	r2, r0
 800306e:	4b05      	ldr	r3, [pc, #20]	@ (8003084 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	0b5b      	lsrs	r3, r3, #13
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	4903      	ldr	r1, [pc, #12]	@ (8003088 <HAL_RCC_GetPCLK2Freq+0x24>)
 800307a:	5ccb      	ldrb	r3, [r1, r3]
 800307c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003080:	4618      	mov	r0, r3
 8003082:	bd80      	pop	{r7, pc}
 8003084:	40023800 	.word	0x40023800
 8003088:	08004a00 	.word	0x08004a00

0800308c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e042      	b.n	8003124 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d106      	bne.n	80030b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7fd fd58 	bl	8000b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2224      	movs	r2, #36	@ 0x24
 80030bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68da      	ldr	r2, [r3, #12]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 fd25 	bl	8003b20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	691a      	ldr	r2, [r3, #16]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80030e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	695a      	ldr	r2, [r3, #20]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80030f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68da      	ldr	r2, [r3, #12]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003104:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2220      	movs	r2, #32
 8003110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2220      	movs	r2, #32
 8003118:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3708      	adds	r7, #8
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	4613      	mov	r3, r2
 8003138:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b20      	cmp	r3, #32
 8003144:	d121      	bne.n	800318a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d002      	beq.n	8003152 <HAL_UART_Transmit_IT+0x26>
 800314c:	88fb      	ldrh	r3, [r7, #6]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e01a      	b.n	800318c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	88fa      	ldrh	r2, [r7, #6]
 8003160:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	88fa      	ldrh	r2, [r7, #6]
 8003166:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2221      	movs	r2, #33	@ 0x21
 8003172:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68da      	ldr	r2, [r3, #12]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003184:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003186:	2300      	movs	r3, #0
 8003188:	e000      	b.n	800318c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800318a:	2302      	movs	r3, #2
  }
}
 800318c:	4618      	mov	r0, r3
 800318e:	3714      	adds	r7, #20
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	4613      	mov	r3, r2
 80031a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b20      	cmp	r3, #32
 80031b0:	d112      	bne.n	80031d8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d002      	beq.n	80031be <HAL_UART_Receive_IT+0x26>
 80031b8:	88fb      	ldrh	r3, [r7, #6]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e00b      	b.n	80031da <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80031c8:	88fb      	ldrh	r3, [r7, #6]
 80031ca:	461a      	mov	r2, r3
 80031cc:	68b9      	ldr	r1, [r7, #8]
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 fad2 	bl	8003778 <UART_Start_Receive_IT>
 80031d4:	4603      	mov	r3, r0
 80031d6:	e000      	b.n	80031da <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80031d8:	2302      	movs	r3, #2
  }
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
	...

080031e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b0ba      	sub	sp, #232	@ 0xe8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800320a:	2300      	movs	r3, #0
 800320c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003210:	2300      	movs	r3, #0
 8003212:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003222:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10f      	bne.n	800324a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800322a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800322e:	f003 0320 	and.w	r3, r3, #32
 8003232:	2b00      	cmp	r3, #0
 8003234:	d009      	beq.n	800324a <HAL_UART_IRQHandler+0x66>
 8003236:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800323a:	f003 0320 	and.w	r3, r3, #32
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 fbae 	bl	80039a4 <UART_Receive_IT>
      return;
 8003248:	e273      	b.n	8003732 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800324a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 80de 	beq.w	8003410 <HAL_UART_IRQHandler+0x22c>
 8003254:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	2b00      	cmp	r3, #0
 800325e:	d106      	bne.n	800326e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003264:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 80d1 	beq.w	8003410 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800326e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00b      	beq.n	8003292 <HAL_UART_IRQHandler+0xae>
 800327a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800327e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003282:	2b00      	cmp	r3, #0
 8003284:	d005      	beq.n	8003292 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800328a:	f043 0201 	orr.w	r2, r3, #1
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003296:	f003 0304 	and.w	r3, r3, #4
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00b      	beq.n	80032b6 <HAL_UART_IRQHandler+0xd2>
 800329e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d005      	beq.n	80032b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ae:	f043 0202 	orr.w	r2, r3, #2
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00b      	beq.n	80032da <HAL_UART_IRQHandler+0xf6>
 80032c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d005      	beq.n	80032da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d2:	f043 0204 	orr.w	r2, r3, #4
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80032da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032de:	f003 0308 	and.w	r3, r3, #8
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d011      	beq.n	800330a <HAL_UART_IRQHandler+0x126>
 80032e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032ea:	f003 0320 	and.w	r3, r3, #32
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d105      	bne.n	80032fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80032f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d005      	beq.n	800330a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003302:	f043 0208 	orr.w	r2, r3, #8
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 820a 	beq.w	8003728 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003318:	f003 0320 	and.w	r3, r3, #32
 800331c:	2b00      	cmp	r3, #0
 800331e:	d008      	beq.n	8003332 <HAL_UART_IRQHandler+0x14e>
 8003320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003324:	f003 0320 	and.w	r3, r3, #32
 8003328:	2b00      	cmp	r3, #0
 800332a:	d002      	beq.n	8003332 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 fb39 	bl	80039a4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800333c:	2b40      	cmp	r3, #64	@ 0x40
 800333e:	bf0c      	ite	eq
 8003340:	2301      	moveq	r3, #1
 8003342:	2300      	movne	r3, #0
 8003344:	b2db      	uxtb	r3, r3
 8003346:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800334e:	f003 0308 	and.w	r3, r3, #8
 8003352:	2b00      	cmp	r3, #0
 8003354:	d103      	bne.n	800335e <HAL_UART_IRQHandler+0x17a>
 8003356:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800335a:	2b00      	cmp	r3, #0
 800335c:	d04f      	beq.n	80033fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 fa44 	bl	80037ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800336e:	2b40      	cmp	r3, #64	@ 0x40
 8003370:	d141      	bne.n	80033f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	3314      	adds	r3, #20
 8003378:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800337c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003380:	e853 3f00 	ldrex	r3, [r3]
 8003384:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003388:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800338c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003390:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	3314      	adds	r3, #20
 800339a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800339e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80033a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80033aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80033ae:	e841 2300 	strex	r3, r2, [r1]
 80033b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80033b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1d9      	bne.n	8003372 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d013      	beq.n	80033ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ca:	4a8a      	ldr	r2, [pc, #552]	@ (80035f4 <HAL_UART_IRQHandler+0x410>)
 80033cc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fe fd9a 	bl	8001f0c <HAL_DMA_Abort_IT>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d016      	beq.n	800340c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80033e8:	4610      	mov	r0, r2
 80033ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ec:	e00e      	b.n	800340c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f9ac 	bl	800374c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033f4:	e00a      	b.n	800340c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f9a8 	bl	800374c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033fc:	e006      	b.n	800340c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 f9a4 	bl	800374c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800340a:	e18d      	b.n	8003728 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800340c:	bf00      	nop
    return;
 800340e:	e18b      	b.n	8003728 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003414:	2b01      	cmp	r3, #1
 8003416:	f040 8167 	bne.w	80036e8 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800341a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800341e:	f003 0310 	and.w	r3, r3, #16
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 8160 	beq.w	80036e8 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8003428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800342c:	f003 0310 	and.w	r3, r3, #16
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 8159 	beq.w	80036e8 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003436:	2300      	movs	r3, #0
 8003438:	60bb      	str	r3, [r7, #8]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	60bb      	str	r3, [r7, #8]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	60bb      	str	r3, [r7, #8]
 800344a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003456:	2b40      	cmp	r3, #64	@ 0x40
 8003458:	f040 80ce 	bne.w	80035f8 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003468:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 80a9 	beq.w	80035c4 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003476:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800347a:	429a      	cmp	r2, r3
 800347c:	f080 80a2 	bcs.w	80035c4 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003486:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003492:	f000 8088 	beq.w	80035a6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	330c      	adds	r3, #12
 800349c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80034a4:	e853 3f00 	ldrex	r3, [r3]
 80034a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80034ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80034b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	330c      	adds	r3, #12
 80034be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80034c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80034c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80034ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80034d2:	e841 2300 	strex	r3, r2, [r1]
 80034d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80034da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1d9      	bne.n	8003496 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	3314      	adds	r3, #20
 80034e8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034ec:	e853 3f00 	ldrex	r3, [r3]
 80034f0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80034f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80034f4:	f023 0301 	bic.w	r3, r3, #1
 80034f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	3314      	adds	r3, #20
 8003502:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003506:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800350a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800350c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800350e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003512:	e841 2300 	strex	r3, r2, [r1]
 8003516:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003518:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1e1      	bne.n	80034e2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	3314      	adds	r3, #20
 8003524:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003526:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003528:	e853 3f00 	ldrex	r3, [r3]
 800352c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800352e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003530:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003534:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	3314      	adds	r3, #20
 800353e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003542:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003544:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003546:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003548:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800354a:	e841 2300 	strex	r3, r2, [r1]
 800354e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003550:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1e3      	bne.n	800351e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2220      	movs	r2, #32
 800355a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	330c      	adds	r3, #12
 800356a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800356c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800356e:	e853 3f00 	ldrex	r3, [r3]
 8003572:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003574:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003576:	f023 0310 	bic.w	r3, r3, #16
 800357a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	330c      	adds	r3, #12
 8003584:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003588:	65ba      	str	r2, [r7, #88]	@ 0x58
 800358a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800358c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800358e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003590:	e841 2300 	strex	r3, r2, [r1]
 8003594:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003596:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1e3      	bne.n	8003564 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7fe fc43 	bl	8001e2c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2202      	movs	r2, #2
 80035aa:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	4619      	mov	r1, r3
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 f8cf 	bl	8003760 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80035c2:	e0b3      	b.n	800372c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80035c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80035cc:	429a      	cmp	r2, r3
 80035ce:	f040 80ad 	bne.w	800372c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035dc:	f040 80a6 	bne.w	800372c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2202      	movs	r2, #2
 80035e4:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80035ea:	4619      	mov	r1, r3
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 f8b7 	bl	8003760 <HAL_UARTEx_RxEventCallback>
      return;
 80035f2:	e09b      	b.n	800372c <HAL_UART_IRQHandler+0x548>
 80035f4:	080038b3 	.word	0x080038b3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003600:	b29b      	uxth	r3, r3
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800360c:	b29b      	uxth	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 808e 	beq.w	8003730 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003614:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 8089 	beq.w	8003730 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	330c      	adds	r3, #12
 8003624:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003628:	e853 3f00 	ldrex	r3, [r3]
 800362c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800362e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003630:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003634:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	330c      	adds	r3, #12
 800363e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003642:	647a      	str	r2, [r7, #68]	@ 0x44
 8003644:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003646:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003648:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800364a:	e841 2300 	strex	r3, r2, [r1]
 800364e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003650:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1e3      	bne.n	800361e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	3314      	adds	r3, #20
 800365c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003660:	e853 3f00 	ldrex	r3, [r3]
 8003664:	623b      	str	r3, [r7, #32]
   return(result);
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	f023 0301 	bic.w	r3, r3, #1
 800366c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	3314      	adds	r3, #20
 8003676:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800367a:	633a      	str	r2, [r7, #48]	@ 0x30
 800367c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003680:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003682:	e841 2300 	strex	r3, r2, [r1]
 8003686:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1e3      	bne.n	8003656 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2220      	movs	r2, #32
 8003692:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	330c      	adds	r3, #12
 80036a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	e853 3f00 	ldrex	r3, [r3]
 80036aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f023 0310 	bic.w	r3, r3, #16
 80036b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	330c      	adds	r3, #12
 80036bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80036c0:	61fa      	str	r2, [r7, #28]
 80036c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c4:	69b9      	ldr	r1, [r7, #24]
 80036c6:	69fa      	ldr	r2, [r7, #28]
 80036c8:	e841 2300 	strex	r3, r2, [r1]
 80036cc:	617b      	str	r3, [r7, #20]
   return(result);
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1e3      	bne.n	800369c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2202      	movs	r2, #2
 80036d8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80036de:	4619      	mov	r1, r3
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 f83d 	bl	8003760 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80036e6:	e023      	b.n	8003730 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80036e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d009      	beq.n	8003708 <HAL_UART_IRQHandler+0x524>
 80036f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d003      	beq.n	8003708 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 f8e7 	bl	80038d4 <UART_Transmit_IT>
    return;
 8003706:	e014      	b.n	8003732 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800370c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00e      	beq.n	8003732 <HAL_UART_IRQHandler+0x54e>
 8003714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800371c:	2b00      	cmp	r3, #0
 800371e:	d008      	beq.n	8003732 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 f927 	bl	8003974 <UART_EndTransmit_IT>
    return;
 8003726:	e004      	b.n	8003732 <HAL_UART_IRQHandler+0x54e>
    return;
 8003728:	bf00      	nop
 800372a:	e002      	b.n	8003732 <HAL_UART_IRQHandler+0x54e>
      return;
 800372c:	bf00      	nop
 800372e:	e000      	b.n	8003732 <HAL_UART_IRQHandler+0x54e>
      return;
 8003730:	bf00      	nop
  }
}
 8003732:	37e8      	adds	r7, #232	@ 0xe8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	460b      	mov	r3, r1
 800376a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	4613      	mov	r3, r2
 8003784:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	68ba      	ldr	r2, [r7, #8]
 800378a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	88fa      	ldrh	r2, [r7, #6]
 8003790:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	88fa      	ldrh	r2, [r7, #6]
 8003796:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2222      	movs	r2, #34	@ 0x22
 80037a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d007      	beq.n	80037be <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68da      	ldr	r2, [r3, #12]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037bc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	695a      	ldr	r2, [r3, #20]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f042 0201 	orr.w	r2, r2, #1
 80037cc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68da      	ldr	r2, [r3, #12]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f042 0220 	orr.w	r2, r2, #32
 80037dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3714      	adds	r7, #20
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b095      	sub	sp, #84	@ 0x54
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	330c      	adds	r3, #12
 80037fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037fe:	e853 3f00 	ldrex	r3, [r3]
 8003802:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003806:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800380a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	330c      	adds	r3, #12
 8003812:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003814:	643a      	str	r2, [r7, #64]	@ 0x40
 8003816:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003818:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800381a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800381c:	e841 2300 	strex	r3, r2, [r1]
 8003820:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1e5      	bne.n	80037f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	3314      	adds	r3, #20
 800382e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003830:	6a3b      	ldr	r3, [r7, #32]
 8003832:	e853 3f00 	ldrex	r3, [r3]
 8003836:	61fb      	str	r3, [r7, #28]
   return(result);
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	f023 0301 	bic.w	r3, r3, #1
 800383e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	3314      	adds	r3, #20
 8003846:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003848:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800384a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800384e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003850:	e841 2300 	strex	r3, r2, [r1]
 8003854:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1e5      	bne.n	8003828 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003860:	2b01      	cmp	r3, #1
 8003862:	d119      	bne.n	8003898 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	330c      	adds	r3, #12
 800386a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	e853 3f00 	ldrex	r3, [r3]
 8003872:	60bb      	str	r3, [r7, #8]
   return(result);
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	f023 0310 	bic.w	r3, r3, #16
 800387a:	647b      	str	r3, [r7, #68]	@ 0x44
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	330c      	adds	r3, #12
 8003882:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003884:	61ba      	str	r2, [r7, #24]
 8003886:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003888:	6979      	ldr	r1, [r7, #20]
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	e841 2300 	strex	r3, r2, [r1]
 8003890:	613b      	str	r3, [r7, #16]
   return(result);
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1e5      	bne.n	8003864 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2220      	movs	r2, #32
 800389c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80038a6:	bf00      	nop
 80038a8:	3754      	adds	r7, #84	@ 0x54
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b084      	sub	sp, #16
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f7ff ff40 	bl	800374c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038cc:	bf00      	nop
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b21      	cmp	r3, #33	@ 0x21
 80038e6:	d13e      	bne.n	8003966 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038f0:	d114      	bne.n	800391c <UART_Transmit_IT+0x48>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d110      	bne.n	800391c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	881b      	ldrh	r3, [r3, #0]
 8003904:	461a      	mov	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800390e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	1c9a      	adds	r2, r3, #2
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	621a      	str	r2, [r3, #32]
 800391a:	e008      	b.n	800392e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	1c59      	adds	r1, r3, #1
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	6211      	str	r1, [r2, #32]
 8003926:	781a      	ldrb	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003932:	b29b      	uxth	r3, r3
 8003934:	3b01      	subs	r3, #1
 8003936:	b29b      	uxth	r3, r3
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	4619      	mov	r1, r3
 800393c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10f      	bne.n	8003962 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68da      	ldr	r2, [r3, #12]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003950:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68da      	ldr	r2, [r3, #12]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003960:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003962:	2300      	movs	r3, #0
 8003964:	e000      	b.n	8003968 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003966:	2302      	movs	r3, #2
  }
}
 8003968:	4618      	mov	r0, r3
 800396a:	3714      	adds	r7, #20
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68da      	ldr	r2, [r3, #12]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800398a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2220      	movs	r2, #32
 8003990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f7ff fecf 	bl	8003738 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b08c      	sub	sp, #48	@ 0x30
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80039ac:	2300      	movs	r3, #0
 80039ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80039b0:	2300      	movs	r3, #0
 80039b2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b22      	cmp	r3, #34	@ 0x22
 80039be:	f040 80aa 	bne.w	8003b16 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039ca:	d115      	bne.n	80039f8 <UART_Receive_IT+0x54>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d111      	bne.n	80039f8 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039f0:	1c9a      	adds	r2, r3, #2
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80039f6:	e024      	b.n	8003a42 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a06:	d007      	beq.n	8003a18 <UART_Receive_IT+0x74>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d10a      	bne.n	8003a26 <UART_Receive_IT+0x82>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d106      	bne.n	8003a26 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a22:	701a      	strb	r2, [r3, #0]
 8003a24:	e008      	b.n	8003a38 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a32:	b2da      	uxtb	r2, r3
 8003a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a36:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a3c:	1c5a      	adds	r2, r3, #1
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	4619      	mov	r1, r3
 8003a50:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d15d      	bne.n	8003b12 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68da      	ldr	r2, [r3, #12]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 0220 	bic.w	r2, r2, #32
 8003a64:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68da      	ldr	r2, [r3, #12]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a74:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	695a      	ldr	r2, [r3, #20]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 0201 	bic.w	r2, r2, #1
 8003a84:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d135      	bne.n	8003b08 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	330c      	adds	r3, #12
 8003aa8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	e853 3f00 	ldrex	r3, [r3]
 8003ab0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	f023 0310 	bic.w	r3, r3, #16
 8003ab8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	330c      	adds	r3, #12
 8003ac0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ac2:	623a      	str	r2, [r7, #32]
 8003ac4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac6:	69f9      	ldr	r1, [r7, #28]
 8003ac8:	6a3a      	ldr	r2, [r7, #32]
 8003aca:	e841 2300 	strex	r3, r2, [r1]
 8003ace:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1e5      	bne.n	8003aa2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0310 	and.w	r3, r3, #16
 8003ae0:	2b10      	cmp	r3, #16
 8003ae2:	d10a      	bne.n	8003afa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	60fb      	str	r3, [r7, #12]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003afe:	4619      	mov	r1, r3
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f7ff fe2d 	bl	8003760 <HAL_UARTEx_RxEventCallback>
 8003b06:	e002      	b.n	8003b0e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f7fc fd4f 	bl	80005ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	e002      	b.n	8003b18 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003b12:	2300      	movs	r3, #0
 8003b14:	e000      	b.n	8003b18 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003b16:	2302      	movs	r3, #2
  }
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3730      	adds	r7, #48	@ 0x30
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b24:	b0c0      	sub	sp, #256	@ 0x100
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b3c:	68d9      	ldr	r1, [r3, #12]
 8003b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	ea40 0301 	orr.w	r3, r0, r1
 8003b48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	431a      	orrs	r2, r3
 8003b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003b78:	f021 010c 	bic.w	r1, r1, #12
 8003b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003b86:	430b      	orrs	r3, r1
 8003b88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b9a:	6999      	ldr	r1, [r3, #24]
 8003b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	ea40 0301 	orr.w	r3, r0, r1
 8003ba6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	4b8f      	ldr	r3, [pc, #572]	@ (8003dec <UART_SetConfig+0x2cc>)
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d005      	beq.n	8003bc0 <UART_SetConfig+0xa0>
 8003bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	4b8d      	ldr	r3, [pc, #564]	@ (8003df0 <UART_SetConfig+0x2d0>)
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d104      	bne.n	8003bca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bc0:	f7ff fa50 	bl	8003064 <HAL_RCC_GetPCLK2Freq>
 8003bc4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003bc8:	e003      	b.n	8003bd2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bca:	f7ff fa37 	bl	800303c <HAL_RCC_GetPCLK1Freq>
 8003bce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bd6:	69db      	ldr	r3, [r3, #28]
 8003bd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bdc:	f040 810c 	bne.w	8003df8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003be0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003be4:	2200      	movs	r2, #0
 8003be6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003bea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003bee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003bf2:	4622      	mov	r2, r4
 8003bf4:	462b      	mov	r3, r5
 8003bf6:	1891      	adds	r1, r2, r2
 8003bf8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003bfa:	415b      	adcs	r3, r3
 8003bfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003bfe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003c02:	4621      	mov	r1, r4
 8003c04:	eb12 0801 	adds.w	r8, r2, r1
 8003c08:	4629      	mov	r1, r5
 8003c0a:	eb43 0901 	adc.w	r9, r3, r1
 8003c0e:	f04f 0200 	mov.w	r2, #0
 8003c12:	f04f 0300 	mov.w	r3, #0
 8003c16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c22:	4690      	mov	r8, r2
 8003c24:	4699      	mov	r9, r3
 8003c26:	4623      	mov	r3, r4
 8003c28:	eb18 0303 	adds.w	r3, r8, r3
 8003c2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003c30:	462b      	mov	r3, r5
 8003c32:	eb49 0303 	adc.w	r3, r9, r3
 8003c36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c46:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003c4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c4e:	460b      	mov	r3, r1
 8003c50:	18db      	adds	r3, r3, r3
 8003c52:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c54:	4613      	mov	r3, r2
 8003c56:	eb42 0303 	adc.w	r3, r2, r3
 8003c5a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003c60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003c64:	f7fc fb0c 	bl	8000280 <__aeabi_uldivmod>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	4b61      	ldr	r3, [pc, #388]	@ (8003df4 <UART_SetConfig+0x2d4>)
 8003c6e:	fba3 2302 	umull	r2, r3, r3, r2
 8003c72:	095b      	lsrs	r3, r3, #5
 8003c74:	011c      	lsls	r4, r3, #4
 8003c76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c80:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003c84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003c88:	4642      	mov	r2, r8
 8003c8a:	464b      	mov	r3, r9
 8003c8c:	1891      	adds	r1, r2, r2
 8003c8e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003c90:	415b      	adcs	r3, r3
 8003c92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003c98:	4641      	mov	r1, r8
 8003c9a:	eb12 0a01 	adds.w	sl, r2, r1
 8003c9e:	4649      	mov	r1, r9
 8003ca0:	eb43 0b01 	adc.w	fp, r3, r1
 8003ca4:	f04f 0200 	mov.w	r2, #0
 8003ca8:	f04f 0300 	mov.w	r3, #0
 8003cac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003cb0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003cb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cb8:	4692      	mov	sl, r2
 8003cba:	469b      	mov	fp, r3
 8003cbc:	4643      	mov	r3, r8
 8003cbe:	eb1a 0303 	adds.w	r3, sl, r3
 8003cc2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003cc6:	464b      	mov	r3, r9
 8003cc8:	eb4b 0303 	adc.w	r3, fp, r3
 8003ccc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003cdc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003ce0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	18db      	adds	r3, r3, r3
 8003ce8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cea:	4613      	mov	r3, r2
 8003cec:	eb42 0303 	adc.w	r3, r2, r3
 8003cf0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cf2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003cf6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003cfa:	f7fc fac1 	bl	8000280 <__aeabi_uldivmod>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	460b      	mov	r3, r1
 8003d02:	4611      	mov	r1, r2
 8003d04:	4b3b      	ldr	r3, [pc, #236]	@ (8003df4 <UART_SetConfig+0x2d4>)
 8003d06:	fba3 2301 	umull	r2, r3, r3, r1
 8003d0a:	095b      	lsrs	r3, r3, #5
 8003d0c:	2264      	movs	r2, #100	@ 0x64
 8003d0e:	fb02 f303 	mul.w	r3, r2, r3
 8003d12:	1acb      	subs	r3, r1, r3
 8003d14:	00db      	lsls	r3, r3, #3
 8003d16:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003d1a:	4b36      	ldr	r3, [pc, #216]	@ (8003df4 <UART_SetConfig+0x2d4>)
 8003d1c:	fba3 2302 	umull	r2, r3, r3, r2
 8003d20:	095b      	lsrs	r3, r3, #5
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003d28:	441c      	add	r4, r3
 8003d2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d34:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003d38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003d3c:	4642      	mov	r2, r8
 8003d3e:	464b      	mov	r3, r9
 8003d40:	1891      	adds	r1, r2, r2
 8003d42:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003d44:	415b      	adcs	r3, r3
 8003d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003d4c:	4641      	mov	r1, r8
 8003d4e:	1851      	adds	r1, r2, r1
 8003d50:	6339      	str	r1, [r7, #48]	@ 0x30
 8003d52:	4649      	mov	r1, r9
 8003d54:	414b      	adcs	r3, r1
 8003d56:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d58:	f04f 0200 	mov.w	r2, #0
 8003d5c:	f04f 0300 	mov.w	r3, #0
 8003d60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003d64:	4659      	mov	r1, fp
 8003d66:	00cb      	lsls	r3, r1, #3
 8003d68:	4651      	mov	r1, sl
 8003d6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d6e:	4651      	mov	r1, sl
 8003d70:	00ca      	lsls	r2, r1, #3
 8003d72:	4610      	mov	r0, r2
 8003d74:	4619      	mov	r1, r3
 8003d76:	4603      	mov	r3, r0
 8003d78:	4642      	mov	r2, r8
 8003d7a:	189b      	adds	r3, r3, r2
 8003d7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d80:	464b      	mov	r3, r9
 8003d82:	460a      	mov	r2, r1
 8003d84:	eb42 0303 	adc.w	r3, r2, r3
 8003d88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003d98:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003d9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003da0:	460b      	mov	r3, r1
 8003da2:	18db      	adds	r3, r3, r3
 8003da4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003da6:	4613      	mov	r3, r2
 8003da8:	eb42 0303 	adc.w	r3, r2, r3
 8003dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003dae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003db2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003db6:	f7fc fa63 	bl	8000280 <__aeabi_uldivmod>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8003df4 <UART_SetConfig+0x2d4>)
 8003dc0:	fba3 1302 	umull	r1, r3, r3, r2
 8003dc4:	095b      	lsrs	r3, r3, #5
 8003dc6:	2164      	movs	r1, #100	@ 0x64
 8003dc8:	fb01 f303 	mul.w	r3, r1, r3
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	3332      	adds	r3, #50	@ 0x32
 8003dd2:	4a08      	ldr	r2, [pc, #32]	@ (8003df4 <UART_SetConfig+0x2d4>)
 8003dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd8:	095b      	lsrs	r3, r3, #5
 8003dda:	f003 0207 	and.w	r2, r3, #7
 8003dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4422      	add	r2, r4
 8003de6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003de8:	e106      	b.n	8003ff8 <UART_SetConfig+0x4d8>
 8003dea:	bf00      	nop
 8003dec:	40011000 	.word	0x40011000
 8003df0:	40011400 	.word	0x40011400
 8003df4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003df8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003e02:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003e06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003e0a:	4642      	mov	r2, r8
 8003e0c:	464b      	mov	r3, r9
 8003e0e:	1891      	adds	r1, r2, r2
 8003e10:	6239      	str	r1, [r7, #32]
 8003e12:	415b      	adcs	r3, r3
 8003e14:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e1a:	4641      	mov	r1, r8
 8003e1c:	1854      	adds	r4, r2, r1
 8003e1e:	4649      	mov	r1, r9
 8003e20:	eb43 0501 	adc.w	r5, r3, r1
 8003e24:	f04f 0200 	mov.w	r2, #0
 8003e28:	f04f 0300 	mov.w	r3, #0
 8003e2c:	00eb      	lsls	r3, r5, #3
 8003e2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e32:	00e2      	lsls	r2, r4, #3
 8003e34:	4614      	mov	r4, r2
 8003e36:	461d      	mov	r5, r3
 8003e38:	4643      	mov	r3, r8
 8003e3a:	18e3      	adds	r3, r4, r3
 8003e3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003e40:	464b      	mov	r3, r9
 8003e42:	eb45 0303 	adc.w	r3, r5, r3
 8003e46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003e56:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003e5a:	f04f 0200 	mov.w	r2, #0
 8003e5e:	f04f 0300 	mov.w	r3, #0
 8003e62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003e66:	4629      	mov	r1, r5
 8003e68:	008b      	lsls	r3, r1, #2
 8003e6a:	4621      	mov	r1, r4
 8003e6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e70:	4621      	mov	r1, r4
 8003e72:	008a      	lsls	r2, r1, #2
 8003e74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003e78:	f7fc fa02 	bl	8000280 <__aeabi_uldivmod>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	460b      	mov	r3, r1
 8003e80:	4b60      	ldr	r3, [pc, #384]	@ (8004004 <UART_SetConfig+0x4e4>)
 8003e82:	fba3 2302 	umull	r2, r3, r3, r2
 8003e86:	095b      	lsrs	r3, r3, #5
 8003e88:	011c      	lsls	r4, r3, #4
 8003e8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e94:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003e98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003e9c:	4642      	mov	r2, r8
 8003e9e:	464b      	mov	r3, r9
 8003ea0:	1891      	adds	r1, r2, r2
 8003ea2:	61b9      	str	r1, [r7, #24]
 8003ea4:	415b      	adcs	r3, r3
 8003ea6:	61fb      	str	r3, [r7, #28]
 8003ea8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003eac:	4641      	mov	r1, r8
 8003eae:	1851      	adds	r1, r2, r1
 8003eb0:	6139      	str	r1, [r7, #16]
 8003eb2:	4649      	mov	r1, r9
 8003eb4:	414b      	adcs	r3, r1
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	f04f 0200 	mov.w	r2, #0
 8003ebc:	f04f 0300 	mov.w	r3, #0
 8003ec0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ec4:	4659      	mov	r1, fp
 8003ec6:	00cb      	lsls	r3, r1, #3
 8003ec8:	4651      	mov	r1, sl
 8003eca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ece:	4651      	mov	r1, sl
 8003ed0:	00ca      	lsls	r2, r1, #3
 8003ed2:	4610      	mov	r0, r2
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	4642      	mov	r2, r8
 8003eda:	189b      	adds	r3, r3, r2
 8003edc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ee0:	464b      	mov	r3, r9
 8003ee2:	460a      	mov	r2, r1
 8003ee4:	eb42 0303 	adc.w	r3, r2, r3
 8003ee8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003ef6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003ef8:	f04f 0200 	mov.w	r2, #0
 8003efc:	f04f 0300 	mov.w	r3, #0
 8003f00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003f04:	4649      	mov	r1, r9
 8003f06:	008b      	lsls	r3, r1, #2
 8003f08:	4641      	mov	r1, r8
 8003f0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f0e:	4641      	mov	r1, r8
 8003f10:	008a      	lsls	r2, r1, #2
 8003f12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003f16:	f7fc f9b3 	bl	8000280 <__aeabi_uldivmod>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	4611      	mov	r1, r2
 8003f20:	4b38      	ldr	r3, [pc, #224]	@ (8004004 <UART_SetConfig+0x4e4>)
 8003f22:	fba3 2301 	umull	r2, r3, r3, r1
 8003f26:	095b      	lsrs	r3, r3, #5
 8003f28:	2264      	movs	r2, #100	@ 0x64
 8003f2a:	fb02 f303 	mul.w	r3, r2, r3
 8003f2e:	1acb      	subs	r3, r1, r3
 8003f30:	011b      	lsls	r3, r3, #4
 8003f32:	3332      	adds	r3, #50	@ 0x32
 8003f34:	4a33      	ldr	r2, [pc, #204]	@ (8004004 <UART_SetConfig+0x4e4>)
 8003f36:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3a:	095b      	lsrs	r3, r3, #5
 8003f3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f40:	441c      	add	r4, r3
 8003f42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f46:	2200      	movs	r2, #0
 8003f48:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f4a:	677a      	str	r2, [r7, #116]	@ 0x74
 8003f4c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003f50:	4642      	mov	r2, r8
 8003f52:	464b      	mov	r3, r9
 8003f54:	1891      	adds	r1, r2, r2
 8003f56:	60b9      	str	r1, [r7, #8]
 8003f58:	415b      	adcs	r3, r3
 8003f5a:	60fb      	str	r3, [r7, #12]
 8003f5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f60:	4641      	mov	r1, r8
 8003f62:	1851      	adds	r1, r2, r1
 8003f64:	6039      	str	r1, [r7, #0]
 8003f66:	4649      	mov	r1, r9
 8003f68:	414b      	adcs	r3, r1
 8003f6a:	607b      	str	r3, [r7, #4]
 8003f6c:	f04f 0200 	mov.w	r2, #0
 8003f70:	f04f 0300 	mov.w	r3, #0
 8003f74:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f78:	4659      	mov	r1, fp
 8003f7a:	00cb      	lsls	r3, r1, #3
 8003f7c:	4651      	mov	r1, sl
 8003f7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f82:	4651      	mov	r1, sl
 8003f84:	00ca      	lsls	r2, r1, #3
 8003f86:	4610      	mov	r0, r2
 8003f88:	4619      	mov	r1, r3
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	4642      	mov	r2, r8
 8003f8e:	189b      	adds	r3, r3, r2
 8003f90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f92:	464b      	mov	r3, r9
 8003f94:	460a      	mov	r2, r1
 8003f96:	eb42 0303 	adc.w	r3, r2, r3
 8003f9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	663b      	str	r3, [r7, #96]	@ 0x60
 8003fa6:	667a      	str	r2, [r7, #100]	@ 0x64
 8003fa8:	f04f 0200 	mov.w	r2, #0
 8003fac:	f04f 0300 	mov.w	r3, #0
 8003fb0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003fb4:	4649      	mov	r1, r9
 8003fb6:	008b      	lsls	r3, r1, #2
 8003fb8:	4641      	mov	r1, r8
 8003fba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fbe:	4641      	mov	r1, r8
 8003fc0:	008a      	lsls	r2, r1, #2
 8003fc2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003fc6:	f7fc f95b 	bl	8000280 <__aeabi_uldivmod>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	460b      	mov	r3, r1
 8003fce:	4b0d      	ldr	r3, [pc, #52]	@ (8004004 <UART_SetConfig+0x4e4>)
 8003fd0:	fba3 1302 	umull	r1, r3, r3, r2
 8003fd4:	095b      	lsrs	r3, r3, #5
 8003fd6:	2164      	movs	r1, #100	@ 0x64
 8003fd8:	fb01 f303 	mul.w	r3, r1, r3
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	011b      	lsls	r3, r3, #4
 8003fe0:	3332      	adds	r3, #50	@ 0x32
 8003fe2:	4a08      	ldr	r2, [pc, #32]	@ (8004004 <UART_SetConfig+0x4e4>)
 8003fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe8:	095b      	lsrs	r3, r3, #5
 8003fea:	f003 020f 	and.w	r2, r3, #15
 8003fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4422      	add	r2, r4
 8003ff6:	609a      	str	r2, [r3, #8]
}
 8003ff8:	bf00      	nop
 8003ffa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003ffe:	46bd      	mov	sp, r7
 8004000:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004004:	51eb851f 	.word	0x51eb851f

08004008 <sniprintf>:
 8004008:	b40c      	push	{r2, r3}
 800400a:	b530      	push	{r4, r5, lr}
 800400c:	4b18      	ldr	r3, [pc, #96]	@ (8004070 <sniprintf+0x68>)
 800400e:	1e0c      	subs	r4, r1, #0
 8004010:	681d      	ldr	r5, [r3, #0]
 8004012:	b09d      	sub	sp, #116	@ 0x74
 8004014:	da08      	bge.n	8004028 <sniprintf+0x20>
 8004016:	238b      	movs	r3, #139	@ 0x8b
 8004018:	602b      	str	r3, [r5, #0]
 800401a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800401e:	b01d      	add	sp, #116	@ 0x74
 8004020:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004024:	b002      	add	sp, #8
 8004026:	4770      	bx	lr
 8004028:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800402c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004030:	f04f 0300 	mov.w	r3, #0
 8004034:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004036:	bf14      	ite	ne
 8004038:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800403c:	4623      	moveq	r3, r4
 800403e:	9304      	str	r3, [sp, #16]
 8004040:	9307      	str	r3, [sp, #28]
 8004042:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004046:	9002      	str	r0, [sp, #8]
 8004048:	9006      	str	r0, [sp, #24]
 800404a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800404e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004050:	ab21      	add	r3, sp, #132	@ 0x84
 8004052:	a902      	add	r1, sp, #8
 8004054:	4628      	mov	r0, r5
 8004056:	9301      	str	r3, [sp, #4]
 8004058:	f000 f9a6 	bl	80043a8 <_svfiprintf_r>
 800405c:	1c43      	adds	r3, r0, #1
 800405e:	bfbc      	itt	lt
 8004060:	238b      	movlt	r3, #139	@ 0x8b
 8004062:	602b      	strlt	r3, [r5, #0]
 8004064:	2c00      	cmp	r4, #0
 8004066:	d0da      	beq.n	800401e <sniprintf+0x16>
 8004068:	9b02      	ldr	r3, [sp, #8]
 800406a:	2200      	movs	r2, #0
 800406c:	701a      	strb	r2, [r3, #0]
 800406e:	e7d6      	b.n	800401e <sniprintf+0x16>
 8004070:	2000000c 	.word	0x2000000c

08004074 <memset>:
 8004074:	4402      	add	r2, r0
 8004076:	4603      	mov	r3, r0
 8004078:	4293      	cmp	r3, r2
 800407a:	d100      	bne.n	800407e <memset+0xa>
 800407c:	4770      	bx	lr
 800407e:	f803 1b01 	strb.w	r1, [r3], #1
 8004082:	e7f9      	b.n	8004078 <memset+0x4>

08004084 <strncmp>:
 8004084:	b510      	push	{r4, lr}
 8004086:	b16a      	cbz	r2, 80040a4 <strncmp+0x20>
 8004088:	3901      	subs	r1, #1
 800408a:	1884      	adds	r4, r0, r2
 800408c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004090:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004094:	429a      	cmp	r2, r3
 8004096:	d103      	bne.n	80040a0 <strncmp+0x1c>
 8004098:	42a0      	cmp	r0, r4
 800409a:	d001      	beq.n	80040a0 <strncmp+0x1c>
 800409c:	2a00      	cmp	r2, #0
 800409e:	d1f5      	bne.n	800408c <strncmp+0x8>
 80040a0:	1ad0      	subs	r0, r2, r3
 80040a2:	bd10      	pop	{r4, pc}
 80040a4:	4610      	mov	r0, r2
 80040a6:	e7fc      	b.n	80040a2 <strncmp+0x1e>

080040a8 <__errno>:
 80040a8:	4b01      	ldr	r3, [pc, #4]	@ (80040b0 <__errno+0x8>)
 80040aa:	6818      	ldr	r0, [r3, #0]
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	2000000c 	.word	0x2000000c

080040b4 <__libc_init_array>:
 80040b4:	b570      	push	{r4, r5, r6, lr}
 80040b6:	4d0d      	ldr	r5, [pc, #52]	@ (80040ec <__libc_init_array+0x38>)
 80040b8:	4c0d      	ldr	r4, [pc, #52]	@ (80040f0 <__libc_init_array+0x3c>)
 80040ba:	1b64      	subs	r4, r4, r5
 80040bc:	10a4      	asrs	r4, r4, #2
 80040be:	2600      	movs	r6, #0
 80040c0:	42a6      	cmp	r6, r4
 80040c2:	d109      	bne.n	80040d8 <__libc_init_array+0x24>
 80040c4:	4d0b      	ldr	r5, [pc, #44]	@ (80040f4 <__libc_init_array+0x40>)
 80040c6:	4c0c      	ldr	r4, [pc, #48]	@ (80040f8 <__libc_init_array+0x44>)
 80040c8:	f000 fc64 	bl	8004994 <_init>
 80040cc:	1b64      	subs	r4, r4, r5
 80040ce:	10a4      	asrs	r4, r4, #2
 80040d0:	2600      	movs	r6, #0
 80040d2:	42a6      	cmp	r6, r4
 80040d4:	d105      	bne.n	80040e2 <__libc_init_array+0x2e>
 80040d6:	bd70      	pop	{r4, r5, r6, pc}
 80040d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80040dc:	4798      	blx	r3
 80040de:	3601      	adds	r6, #1
 80040e0:	e7ee      	b.n	80040c0 <__libc_init_array+0xc>
 80040e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80040e6:	4798      	blx	r3
 80040e8:	3601      	adds	r6, #1
 80040ea:	e7f2      	b.n	80040d2 <__libc_init_array+0x1e>
 80040ec:	08004a4c 	.word	0x08004a4c
 80040f0:	08004a4c 	.word	0x08004a4c
 80040f4:	08004a4c 	.word	0x08004a4c
 80040f8:	08004a50 	.word	0x08004a50

080040fc <__retarget_lock_acquire_recursive>:
 80040fc:	4770      	bx	lr

080040fe <__retarget_lock_release_recursive>:
 80040fe:	4770      	bx	lr

08004100 <_free_r>:
 8004100:	b538      	push	{r3, r4, r5, lr}
 8004102:	4605      	mov	r5, r0
 8004104:	2900      	cmp	r1, #0
 8004106:	d041      	beq.n	800418c <_free_r+0x8c>
 8004108:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800410c:	1f0c      	subs	r4, r1, #4
 800410e:	2b00      	cmp	r3, #0
 8004110:	bfb8      	it	lt
 8004112:	18e4      	addlt	r4, r4, r3
 8004114:	f000 f8e0 	bl	80042d8 <__malloc_lock>
 8004118:	4a1d      	ldr	r2, [pc, #116]	@ (8004190 <_free_r+0x90>)
 800411a:	6813      	ldr	r3, [r2, #0]
 800411c:	b933      	cbnz	r3, 800412c <_free_r+0x2c>
 800411e:	6063      	str	r3, [r4, #4]
 8004120:	6014      	str	r4, [r2, #0]
 8004122:	4628      	mov	r0, r5
 8004124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004128:	f000 b8dc 	b.w	80042e4 <__malloc_unlock>
 800412c:	42a3      	cmp	r3, r4
 800412e:	d908      	bls.n	8004142 <_free_r+0x42>
 8004130:	6820      	ldr	r0, [r4, #0]
 8004132:	1821      	adds	r1, r4, r0
 8004134:	428b      	cmp	r3, r1
 8004136:	bf01      	itttt	eq
 8004138:	6819      	ldreq	r1, [r3, #0]
 800413a:	685b      	ldreq	r3, [r3, #4]
 800413c:	1809      	addeq	r1, r1, r0
 800413e:	6021      	streq	r1, [r4, #0]
 8004140:	e7ed      	b.n	800411e <_free_r+0x1e>
 8004142:	461a      	mov	r2, r3
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	b10b      	cbz	r3, 800414c <_free_r+0x4c>
 8004148:	42a3      	cmp	r3, r4
 800414a:	d9fa      	bls.n	8004142 <_free_r+0x42>
 800414c:	6811      	ldr	r1, [r2, #0]
 800414e:	1850      	adds	r0, r2, r1
 8004150:	42a0      	cmp	r0, r4
 8004152:	d10b      	bne.n	800416c <_free_r+0x6c>
 8004154:	6820      	ldr	r0, [r4, #0]
 8004156:	4401      	add	r1, r0
 8004158:	1850      	adds	r0, r2, r1
 800415a:	4283      	cmp	r3, r0
 800415c:	6011      	str	r1, [r2, #0]
 800415e:	d1e0      	bne.n	8004122 <_free_r+0x22>
 8004160:	6818      	ldr	r0, [r3, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	6053      	str	r3, [r2, #4]
 8004166:	4408      	add	r0, r1
 8004168:	6010      	str	r0, [r2, #0]
 800416a:	e7da      	b.n	8004122 <_free_r+0x22>
 800416c:	d902      	bls.n	8004174 <_free_r+0x74>
 800416e:	230c      	movs	r3, #12
 8004170:	602b      	str	r3, [r5, #0]
 8004172:	e7d6      	b.n	8004122 <_free_r+0x22>
 8004174:	6820      	ldr	r0, [r4, #0]
 8004176:	1821      	adds	r1, r4, r0
 8004178:	428b      	cmp	r3, r1
 800417a:	bf04      	itt	eq
 800417c:	6819      	ldreq	r1, [r3, #0]
 800417e:	685b      	ldreq	r3, [r3, #4]
 8004180:	6063      	str	r3, [r4, #4]
 8004182:	bf04      	itt	eq
 8004184:	1809      	addeq	r1, r1, r0
 8004186:	6021      	streq	r1, [r4, #0]
 8004188:	6054      	str	r4, [r2, #4]
 800418a:	e7ca      	b.n	8004122 <_free_r+0x22>
 800418c:	bd38      	pop	{r3, r4, r5, pc}
 800418e:	bf00      	nop
 8004190:	20000388 	.word	0x20000388

08004194 <sbrk_aligned>:
 8004194:	b570      	push	{r4, r5, r6, lr}
 8004196:	4e0f      	ldr	r6, [pc, #60]	@ (80041d4 <sbrk_aligned+0x40>)
 8004198:	460c      	mov	r4, r1
 800419a:	6831      	ldr	r1, [r6, #0]
 800419c:	4605      	mov	r5, r0
 800419e:	b911      	cbnz	r1, 80041a6 <sbrk_aligned+0x12>
 80041a0:	f000 fba4 	bl	80048ec <_sbrk_r>
 80041a4:	6030      	str	r0, [r6, #0]
 80041a6:	4621      	mov	r1, r4
 80041a8:	4628      	mov	r0, r5
 80041aa:	f000 fb9f 	bl	80048ec <_sbrk_r>
 80041ae:	1c43      	adds	r3, r0, #1
 80041b0:	d103      	bne.n	80041ba <sbrk_aligned+0x26>
 80041b2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80041b6:	4620      	mov	r0, r4
 80041b8:	bd70      	pop	{r4, r5, r6, pc}
 80041ba:	1cc4      	adds	r4, r0, #3
 80041bc:	f024 0403 	bic.w	r4, r4, #3
 80041c0:	42a0      	cmp	r0, r4
 80041c2:	d0f8      	beq.n	80041b6 <sbrk_aligned+0x22>
 80041c4:	1a21      	subs	r1, r4, r0
 80041c6:	4628      	mov	r0, r5
 80041c8:	f000 fb90 	bl	80048ec <_sbrk_r>
 80041cc:	3001      	adds	r0, #1
 80041ce:	d1f2      	bne.n	80041b6 <sbrk_aligned+0x22>
 80041d0:	e7ef      	b.n	80041b2 <sbrk_aligned+0x1e>
 80041d2:	bf00      	nop
 80041d4:	20000384 	.word	0x20000384

080041d8 <_malloc_r>:
 80041d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041dc:	1ccd      	adds	r5, r1, #3
 80041de:	f025 0503 	bic.w	r5, r5, #3
 80041e2:	3508      	adds	r5, #8
 80041e4:	2d0c      	cmp	r5, #12
 80041e6:	bf38      	it	cc
 80041e8:	250c      	movcc	r5, #12
 80041ea:	2d00      	cmp	r5, #0
 80041ec:	4606      	mov	r6, r0
 80041ee:	db01      	blt.n	80041f4 <_malloc_r+0x1c>
 80041f0:	42a9      	cmp	r1, r5
 80041f2:	d904      	bls.n	80041fe <_malloc_r+0x26>
 80041f4:	230c      	movs	r3, #12
 80041f6:	6033      	str	r3, [r6, #0]
 80041f8:	2000      	movs	r0, #0
 80041fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80042d4 <_malloc_r+0xfc>
 8004202:	f000 f869 	bl	80042d8 <__malloc_lock>
 8004206:	f8d8 3000 	ldr.w	r3, [r8]
 800420a:	461c      	mov	r4, r3
 800420c:	bb44      	cbnz	r4, 8004260 <_malloc_r+0x88>
 800420e:	4629      	mov	r1, r5
 8004210:	4630      	mov	r0, r6
 8004212:	f7ff ffbf 	bl	8004194 <sbrk_aligned>
 8004216:	1c43      	adds	r3, r0, #1
 8004218:	4604      	mov	r4, r0
 800421a:	d158      	bne.n	80042ce <_malloc_r+0xf6>
 800421c:	f8d8 4000 	ldr.w	r4, [r8]
 8004220:	4627      	mov	r7, r4
 8004222:	2f00      	cmp	r7, #0
 8004224:	d143      	bne.n	80042ae <_malloc_r+0xd6>
 8004226:	2c00      	cmp	r4, #0
 8004228:	d04b      	beq.n	80042c2 <_malloc_r+0xea>
 800422a:	6823      	ldr	r3, [r4, #0]
 800422c:	4639      	mov	r1, r7
 800422e:	4630      	mov	r0, r6
 8004230:	eb04 0903 	add.w	r9, r4, r3
 8004234:	f000 fb5a 	bl	80048ec <_sbrk_r>
 8004238:	4581      	cmp	r9, r0
 800423a:	d142      	bne.n	80042c2 <_malloc_r+0xea>
 800423c:	6821      	ldr	r1, [r4, #0]
 800423e:	1a6d      	subs	r5, r5, r1
 8004240:	4629      	mov	r1, r5
 8004242:	4630      	mov	r0, r6
 8004244:	f7ff ffa6 	bl	8004194 <sbrk_aligned>
 8004248:	3001      	adds	r0, #1
 800424a:	d03a      	beq.n	80042c2 <_malloc_r+0xea>
 800424c:	6823      	ldr	r3, [r4, #0]
 800424e:	442b      	add	r3, r5
 8004250:	6023      	str	r3, [r4, #0]
 8004252:	f8d8 3000 	ldr.w	r3, [r8]
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	bb62      	cbnz	r2, 80042b4 <_malloc_r+0xdc>
 800425a:	f8c8 7000 	str.w	r7, [r8]
 800425e:	e00f      	b.n	8004280 <_malloc_r+0xa8>
 8004260:	6822      	ldr	r2, [r4, #0]
 8004262:	1b52      	subs	r2, r2, r5
 8004264:	d420      	bmi.n	80042a8 <_malloc_r+0xd0>
 8004266:	2a0b      	cmp	r2, #11
 8004268:	d917      	bls.n	800429a <_malloc_r+0xc2>
 800426a:	1961      	adds	r1, r4, r5
 800426c:	42a3      	cmp	r3, r4
 800426e:	6025      	str	r5, [r4, #0]
 8004270:	bf18      	it	ne
 8004272:	6059      	strne	r1, [r3, #4]
 8004274:	6863      	ldr	r3, [r4, #4]
 8004276:	bf08      	it	eq
 8004278:	f8c8 1000 	streq.w	r1, [r8]
 800427c:	5162      	str	r2, [r4, r5]
 800427e:	604b      	str	r3, [r1, #4]
 8004280:	4630      	mov	r0, r6
 8004282:	f000 f82f 	bl	80042e4 <__malloc_unlock>
 8004286:	f104 000b 	add.w	r0, r4, #11
 800428a:	1d23      	adds	r3, r4, #4
 800428c:	f020 0007 	bic.w	r0, r0, #7
 8004290:	1ac2      	subs	r2, r0, r3
 8004292:	bf1c      	itt	ne
 8004294:	1a1b      	subne	r3, r3, r0
 8004296:	50a3      	strne	r3, [r4, r2]
 8004298:	e7af      	b.n	80041fa <_malloc_r+0x22>
 800429a:	6862      	ldr	r2, [r4, #4]
 800429c:	42a3      	cmp	r3, r4
 800429e:	bf0c      	ite	eq
 80042a0:	f8c8 2000 	streq.w	r2, [r8]
 80042a4:	605a      	strne	r2, [r3, #4]
 80042a6:	e7eb      	b.n	8004280 <_malloc_r+0xa8>
 80042a8:	4623      	mov	r3, r4
 80042aa:	6864      	ldr	r4, [r4, #4]
 80042ac:	e7ae      	b.n	800420c <_malloc_r+0x34>
 80042ae:	463c      	mov	r4, r7
 80042b0:	687f      	ldr	r7, [r7, #4]
 80042b2:	e7b6      	b.n	8004222 <_malloc_r+0x4a>
 80042b4:	461a      	mov	r2, r3
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	42a3      	cmp	r3, r4
 80042ba:	d1fb      	bne.n	80042b4 <_malloc_r+0xdc>
 80042bc:	2300      	movs	r3, #0
 80042be:	6053      	str	r3, [r2, #4]
 80042c0:	e7de      	b.n	8004280 <_malloc_r+0xa8>
 80042c2:	230c      	movs	r3, #12
 80042c4:	6033      	str	r3, [r6, #0]
 80042c6:	4630      	mov	r0, r6
 80042c8:	f000 f80c 	bl	80042e4 <__malloc_unlock>
 80042cc:	e794      	b.n	80041f8 <_malloc_r+0x20>
 80042ce:	6005      	str	r5, [r0, #0]
 80042d0:	e7d6      	b.n	8004280 <_malloc_r+0xa8>
 80042d2:	bf00      	nop
 80042d4:	20000388 	.word	0x20000388

080042d8 <__malloc_lock>:
 80042d8:	4801      	ldr	r0, [pc, #4]	@ (80042e0 <__malloc_lock+0x8>)
 80042da:	f7ff bf0f 	b.w	80040fc <__retarget_lock_acquire_recursive>
 80042de:	bf00      	nop
 80042e0:	20000380 	.word	0x20000380

080042e4 <__malloc_unlock>:
 80042e4:	4801      	ldr	r0, [pc, #4]	@ (80042ec <__malloc_unlock+0x8>)
 80042e6:	f7ff bf0a 	b.w	80040fe <__retarget_lock_release_recursive>
 80042ea:	bf00      	nop
 80042ec:	20000380 	.word	0x20000380

080042f0 <__ssputs_r>:
 80042f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042f4:	688e      	ldr	r6, [r1, #8]
 80042f6:	461f      	mov	r7, r3
 80042f8:	42be      	cmp	r6, r7
 80042fa:	680b      	ldr	r3, [r1, #0]
 80042fc:	4682      	mov	sl, r0
 80042fe:	460c      	mov	r4, r1
 8004300:	4690      	mov	r8, r2
 8004302:	d82d      	bhi.n	8004360 <__ssputs_r+0x70>
 8004304:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004308:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800430c:	d026      	beq.n	800435c <__ssputs_r+0x6c>
 800430e:	6965      	ldr	r5, [r4, #20]
 8004310:	6909      	ldr	r1, [r1, #16]
 8004312:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004316:	eba3 0901 	sub.w	r9, r3, r1
 800431a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800431e:	1c7b      	adds	r3, r7, #1
 8004320:	444b      	add	r3, r9
 8004322:	106d      	asrs	r5, r5, #1
 8004324:	429d      	cmp	r5, r3
 8004326:	bf38      	it	cc
 8004328:	461d      	movcc	r5, r3
 800432a:	0553      	lsls	r3, r2, #21
 800432c:	d527      	bpl.n	800437e <__ssputs_r+0x8e>
 800432e:	4629      	mov	r1, r5
 8004330:	f7ff ff52 	bl	80041d8 <_malloc_r>
 8004334:	4606      	mov	r6, r0
 8004336:	b360      	cbz	r0, 8004392 <__ssputs_r+0xa2>
 8004338:	6921      	ldr	r1, [r4, #16]
 800433a:	464a      	mov	r2, r9
 800433c:	f000 fae6 	bl	800490c <memcpy>
 8004340:	89a3      	ldrh	r3, [r4, #12]
 8004342:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004346:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800434a:	81a3      	strh	r3, [r4, #12]
 800434c:	6126      	str	r6, [r4, #16]
 800434e:	6165      	str	r5, [r4, #20]
 8004350:	444e      	add	r6, r9
 8004352:	eba5 0509 	sub.w	r5, r5, r9
 8004356:	6026      	str	r6, [r4, #0]
 8004358:	60a5      	str	r5, [r4, #8]
 800435a:	463e      	mov	r6, r7
 800435c:	42be      	cmp	r6, r7
 800435e:	d900      	bls.n	8004362 <__ssputs_r+0x72>
 8004360:	463e      	mov	r6, r7
 8004362:	6820      	ldr	r0, [r4, #0]
 8004364:	4632      	mov	r2, r6
 8004366:	4641      	mov	r1, r8
 8004368:	f000 faa6 	bl	80048b8 <memmove>
 800436c:	68a3      	ldr	r3, [r4, #8]
 800436e:	1b9b      	subs	r3, r3, r6
 8004370:	60a3      	str	r3, [r4, #8]
 8004372:	6823      	ldr	r3, [r4, #0]
 8004374:	4433      	add	r3, r6
 8004376:	6023      	str	r3, [r4, #0]
 8004378:	2000      	movs	r0, #0
 800437a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800437e:	462a      	mov	r2, r5
 8004380:	f000 fad2 	bl	8004928 <_realloc_r>
 8004384:	4606      	mov	r6, r0
 8004386:	2800      	cmp	r0, #0
 8004388:	d1e0      	bne.n	800434c <__ssputs_r+0x5c>
 800438a:	6921      	ldr	r1, [r4, #16]
 800438c:	4650      	mov	r0, sl
 800438e:	f7ff feb7 	bl	8004100 <_free_r>
 8004392:	230c      	movs	r3, #12
 8004394:	f8ca 3000 	str.w	r3, [sl]
 8004398:	89a3      	ldrh	r3, [r4, #12]
 800439a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800439e:	81a3      	strh	r3, [r4, #12]
 80043a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80043a4:	e7e9      	b.n	800437a <__ssputs_r+0x8a>
	...

080043a8 <_svfiprintf_r>:
 80043a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043ac:	4698      	mov	r8, r3
 80043ae:	898b      	ldrh	r3, [r1, #12]
 80043b0:	061b      	lsls	r3, r3, #24
 80043b2:	b09d      	sub	sp, #116	@ 0x74
 80043b4:	4607      	mov	r7, r0
 80043b6:	460d      	mov	r5, r1
 80043b8:	4614      	mov	r4, r2
 80043ba:	d510      	bpl.n	80043de <_svfiprintf_r+0x36>
 80043bc:	690b      	ldr	r3, [r1, #16]
 80043be:	b973      	cbnz	r3, 80043de <_svfiprintf_r+0x36>
 80043c0:	2140      	movs	r1, #64	@ 0x40
 80043c2:	f7ff ff09 	bl	80041d8 <_malloc_r>
 80043c6:	6028      	str	r0, [r5, #0]
 80043c8:	6128      	str	r0, [r5, #16]
 80043ca:	b930      	cbnz	r0, 80043da <_svfiprintf_r+0x32>
 80043cc:	230c      	movs	r3, #12
 80043ce:	603b      	str	r3, [r7, #0]
 80043d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80043d4:	b01d      	add	sp, #116	@ 0x74
 80043d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043da:	2340      	movs	r3, #64	@ 0x40
 80043dc:	616b      	str	r3, [r5, #20]
 80043de:	2300      	movs	r3, #0
 80043e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80043e2:	2320      	movs	r3, #32
 80043e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80043e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80043ec:	2330      	movs	r3, #48	@ 0x30
 80043ee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800458c <_svfiprintf_r+0x1e4>
 80043f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80043f6:	f04f 0901 	mov.w	r9, #1
 80043fa:	4623      	mov	r3, r4
 80043fc:	469a      	mov	sl, r3
 80043fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004402:	b10a      	cbz	r2, 8004408 <_svfiprintf_r+0x60>
 8004404:	2a25      	cmp	r2, #37	@ 0x25
 8004406:	d1f9      	bne.n	80043fc <_svfiprintf_r+0x54>
 8004408:	ebba 0b04 	subs.w	fp, sl, r4
 800440c:	d00b      	beq.n	8004426 <_svfiprintf_r+0x7e>
 800440e:	465b      	mov	r3, fp
 8004410:	4622      	mov	r2, r4
 8004412:	4629      	mov	r1, r5
 8004414:	4638      	mov	r0, r7
 8004416:	f7ff ff6b 	bl	80042f0 <__ssputs_r>
 800441a:	3001      	adds	r0, #1
 800441c:	f000 80a7 	beq.w	800456e <_svfiprintf_r+0x1c6>
 8004420:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004422:	445a      	add	r2, fp
 8004424:	9209      	str	r2, [sp, #36]	@ 0x24
 8004426:	f89a 3000 	ldrb.w	r3, [sl]
 800442a:	2b00      	cmp	r3, #0
 800442c:	f000 809f 	beq.w	800456e <_svfiprintf_r+0x1c6>
 8004430:	2300      	movs	r3, #0
 8004432:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004436:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800443a:	f10a 0a01 	add.w	sl, sl, #1
 800443e:	9304      	str	r3, [sp, #16]
 8004440:	9307      	str	r3, [sp, #28]
 8004442:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004446:	931a      	str	r3, [sp, #104]	@ 0x68
 8004448:	4654      	mov	r4, sl
 800444a:	2205      	movs	r2, #5
 800444c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004450:	484e      	ldr	r0, [pc, #312]	@ (800458c <_svfiprintf_r+0x1e4>)
 8004452:	f7fb fec5 	bl	80001e0 <memchr>
 8004456:	9a04      	ldr	r2, [sp, #16]
 8004458:	b9d8      	cbnz	r0, 8004492 <_svfiprintf_r+0xea>
 800445a:	06d0      	lsls	r0, r2, #27
 800445c:	bf44      	itt	mi
 800445e:	2320      	movmi	r3, #32
 8004460:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004464:	0711      	lsls	r1, r2, #28
 8004466:	bf44      	itt	mi
 8004468:	232b      	movmi	r3, #43	@ 0x2b
 800446a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800446e:	f89a 3000 	ldrb.w	r3, [sl]
 8004472:	2b2a      	cmp	r3, #42	@ 0x2a
 8004474:	d015      	beq.n	80044a2 <_svfiprintf_r+0xfa>
 8004476:	9a07      	ldr	r2, [sp, #28]
 8004478:	4654      	mov	r4, sl
 800447a:	2000      	movs	r0, #0
 800447c:	f04f 0c0a 	mov.w	ip, #10
 8004480:	4621      	mov	r1, r4
 8004482:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004486:	3b30      	subs	r3, #48	@ 0x30
 8004488:	2b09      	cmp	r3, #9
 800448a:	d94b      	bls.n	8004524 <_svfiprintf_r+0x17c>
 800448c:	b1b0      	cbz	r0, 80044bc <_svfiprintf_r+0x114>
 800448e:	9207      	str	r2, [sp, #28]
 8004490:	e014      	b.n	80044bc <_svfiprintf_r+0x114>
 8004492:	eba0 0308 	sub.w	r3, r0, r8
 8004496:	fa09 f303 	lsl.w	r3, r9, r3
 800449a:	4313      	orrs	r3, r2
 800449c:	9304      	str	r3, [sp, #16]
 800449e:	46a2      	mov	sl, r4
 80044a0:	e7d2      	b.n	8004448 <_svfiprintf_r+0xa0>
 80044a2:	9b03      	ldr	r3, [sp, #12]
 80044a4:	1d19      	adds	r1, r3, #4
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	9103      	str	r1, [sp, #12]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	bfbb      	ittet	lt
 80044ae:	425b      	neglt	r3, r3
 80044b0:	f042 0202 	orrlt.w	r2, r2, #2
 80044b4:	9307      	strge	r3, [sp, #28]
 80044b6:	9307      	strlt	r3, [sp, #28]
 80044b8:	bfb8      	it	lt
 80044ba:	9204      	strlt	r2, [sp, #16]
 80044bc:	7823      	ldrb	r3, [r4, #0]
 80044be:	2b2e      	cmp	r3, #46	@ 0x2e
 80044c0:	d10a      	bne.n	80044d8 <_svfiprintf_r+0x130>
 80044c2:	7863      	ldrb	r3, [r4, #1]
 80044c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80044c6:	d132      	bne.n	800452e <_svfiprintf_r+0x186>
 80044c8:	9b03      	ldr	r3, [sp, #12]
 80044ca:	1d1a      	adds	r2, r3, #4
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	9203      	str	r2, [sp, #12]
 80044d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80044d4:	3402      	adds	r4, #2
 80044d6:	9305      	str	r3, [sp, #20]
 80044d8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800459c <_svfiprintf_r+0x1f4>
 80044dc:	7821      	ldrb	r1, [r4, #0]
 80044de:	2203      	movs	r2, #3
 80044e0:	4650      	mov	r0, sl
 80044e2:	f7fb fe7d 	bl	80001e0 <memchr>
 80044e6:	b138      	cbz	r0, 80044f8 <_svfiprintf_r+0x150>
 80044e8:	9b04      	ldr	r3, [sp, #16]
 80044ea:	eba0 000a 	sub.w	r0, r0, sl
 80044ee:	2240      	movs	r2, #64	@ 0x40
 80044f0:	4082      	lsls	r2, r0
 80044f2:	4313      	orrs	r3, r2
 80044f4:	3401      	adds	r4, #1
 80044f6:	9304      	str	r3, [sp, #16]
 80044f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044fc:	4824      	ldr	r0, [pc, #144]	@ (8004590 <_svfiprintf_r+0x1e8>)
 80044fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004502:	2206      	movs	r2, #6
 8004504:	f7fb fe6c 	bl	80001e0 <memchr>
 8004508:	2800      	cmp	r0, #0
 800450a:	d036      	beq.n	800457a <_svfiprintf_r+0x1d2>
 800450c:	4b21      	ldr	r3, [pc, #132]	@ (8004594 <_svfiprintf_r+0x1ec>)
 800450e:	bb1b      	cbnz	r3, 8004558 <_svfiprintf_r+0x1b0>
 8004510:	9b03      	ldr	r3, [sp, #12]
 8004512:	3307      	adds	r3, #7
 8004514:	f023 0307 	bic.w	r3, r3, #7
 8004518:	3308      	adds	r3, #8
 800451a:	9303      	str	r3, [sp, #12]
 800451c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800451e:	4433      	add	r3, r6
 8004520:	9309      	str	r3, [sp, #36]	@ 0x24
 8004522:	e76a      	b.n	80043fa <_svfiprintf_r+0x52>
 8004524:	fb0c 3202 	mla	r2, ip, r2, r3
 8004528:	460c      	mov	r4, r1
 800452a:	2001      	movs	r0, #1
 800452c:	e7a8      	b.n	8004480 <_svfiprintf_r+0xd8>
 800452e:	2300      	movs	r3, #0
 8004530:	3401      	adds	r4, #1
 8004532:	9305      	str	r3, [sp, #20]
 8004534:	4619      	mov	r1, r3
 8004536:	f04f 0c0a 	mov.w	ip, #10
 800453a:	4620      	mov	r0, r4
 800453c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004540:	3a30      	subs	r2, #48	@ 0x30
 8004542:	2a09      	cmp	r2, #9
 8004544:	d903      	bls.n	800454e <_svfiprintf_r+0x1a6>
 8004546:	2b00      	cmp	r3, #0
 8004548:	d0c6      	beq.n	80044d8 <_svfiprintf_r+0x130>
 800454a:	9105      	str	r1, [sp, #20]
 800454c:	e7c4      	b.n	80044d8 <_svfiprintf_r+0x130>
 800454e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004552:	4604      	mov	r4, r0
 8004554:	2301      	movs	r3, #1
 8004556:	e7f0      	b.n	800453a <_svfiprintf_r+0x192>
 8004558:	ab03      	add	r3, sp, #12
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	462a      	mov	r2, r5
 800455e:	4b0e      	ldr	r3, [pc, #56]	@ (8004598 <_svfiprintf_r+0x1f0>)
 8004560:	a904      	add	r1, sp, #16
 8004562:	4638      	mov	r0, r7
 8004564:	f3af 8000 	nop.w
 8004568:	1c42      	adds	r2, r0, #1
 800456a:	4606      	mov	r6, r0
 800456c:	d1d6      	bne.n	800451c <_svfiprintf_r+0x174>
 800456e:	89ab      	ldrh	r3, [r5, #12]
 8004570:	065b      	lsls	r3, r3, #25
 8004572:	f53f af2d 	bmi.w	80043d0 <_svfiprintf_r+0x28>
 8004576:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004578:	e72c      	b.n	80043d4 <_svfiprintf_r+0x2c>
 800457a:	ab03      	add	r3, sp, #12
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	462a      	mov	r2, r5
 8004580:	4b05      	ldr	r3, [pc, #20]	@ (8004598 <_svfiprintf_r+0x1f0>)
 8004582:	a904      	add	r1, sp, #16
 8004584:	4638      	mov	r0, r7
 8004586:	f000 f879 	bl	800467c <_printf_i>
 800458a:	e7ed      	b.n	8004568 <_svfiprintf_r+0x1c0>
 800458c:	08004a10 	.word	0x08004a10
 8004590:	08004a1a 	.word	0x08004a1a
 8004594:	00000000 	.word	0x00000000
 8004598:	080042f1 	.word	0x080042f1
 800459c:	08004a16 	.word	0x08004a16

080045a0 <_printf_common>:
 80045a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045a4:	4616      	mov	r6, r2
 80045a6:	4698      	mov	r8, r3
 80045a8:	688a      	ldr	r2, [r1, #8]
 80045aa:	690b      	ldr	r3, [r1, #16]
 80045ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80045b0:	4293      	cmp	r3, r2
 80045b2:	bfb8      	it	lt
 80045b4:	4613      	movlt	r3, r2
 80045b6:	6033      	str	r3, [r6, #0]
 80045b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80045bc:	4607      	mov	r7, r0
 80045be:	460c      	mov	r4, r1
 80045c0:	b10a      	cbz	r2, 80045c6 <_printf_common+0x26>
 80045c2:	3301      	adds	r3, #1
 80045c4:	6033      	str	r3, [r6, #0]
 80045c6:	6823      	ldr	r3, [r4, #0]
 80045c8:	0699      	lsls	r1, r3, #26
 80045ca:	bf42      	ittt	mi
 80045cc:	6833      	ldrmi	r3, [r6, #0]
 80045ce:	3302      	addmi	r3, #2
 80045d0:	6033      	strmi	r3, [r6, #0]
 80045d2:	6825      	ldr	r5, [r4, #0]
 80045d4:	f015 0506 	ands.w	r5, r5, #6
 80045d8:	d106      	bne.n	80045e8 <_printf_common+0x48>
 80045da:	f104 0a19 	add.w	sl, r4, #25
 80045de:	68e3      	ldr	r3, [r4, #12]
 80045e0:	6832      	ldr	r2, [r6, #0]
 80045e2:	1a9b      	subs	r3, r3, r2
 80045e4:	42ab      	cmp	r3, r5
 80045e6:	dc26      	bgt.n	8004636 <_printf_common+0x96>
 80045e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80045ec:	6822      	ldr	r2, [r4, #0]
 80045ee:	3b00      	subs	r3, #0
 80045f0:	bf18      	it	ne
 80045f2:	2301      	movne	r3, #1
 80045f4:	0692      	lsls	r2, r2, #26
 80045f6:	d42b      	bmi.n	8004650 <_printf_common+0xb0>
 80045f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80045fc:	4641      	mov	r1, r8
 80045fe:	4638      	mov	r0, r7
 8004600:	47c8      	blx	r9
 8004602:	3001      	adds	r0, #1
 8004604:	d01e      	beq.n	8004644 <_printf_common+0xa4>
 8004606:	6823      	ldr	r3, [r4, #0]
 8004608:	6922      	ldr	r2, [r4, #16]
 800460a:	f003 0306 	and.w	r3, r3, #6
 800460e:	2b04      	cmp	r3, #4
 8004610:	bf02      	ittt	eq
 8004612:	68e5      	ldreq	r5, [r4, #12]
 8004614:	6833      	ldreq	r3, [r6, #0]
 8004616:	1aed      	subeq	r5, r5, r3
 8004618:	68a3      	ldr	r3, [r4, #8]
 800461a:	bf0c      	ite	eq
 800461c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004620:	2500      	movne	r5, #0
 8004622:	4293      	cmp	r3, r2
 8004624:	bfc4      	itt	gt
 8004626:	1a9b      	subgt	r3, r3, r2
 8004628:	18ed      	addgt	r5, r5, r3
 800462a:	2600      	movs	r6, #0
 800462c:	341a      	adds	r4, #26
 800462e:	42b5      	cmp	r5, r6
 8004630:	d11a      	bne.n	8004668 <_printf_common+0xc8>
 8004632:	2000      	movs	r0, #0
 8004634:	e008      	b.n	8004648 <_printf_common+0xa8>
 8004636:	2301      	movs	r3, #1
 8004638:	4652      	mov	r2, sl
 800463a:	4641      	mov	r1, r8
 800463c:	4638      	mov	r0, r7
 800463e:	47c8      	blx	r9
 8004640:	3001      	adds	r0, #1
 8004642:	d103      	bne.n	800464c <_printf_common+0xac>
 8004644:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800464c:	3501      	adds	r5, #1
 800464e:	e7c6      	b.n	80045de <_printf_common+0x3e>
 8004650:	18e1      	adds	r1, r4, r3
 8004652:	1c5a      	adds	r2, r3, #1
 8004654:	2030      	movs	r0, #48	@ 0x30
 8004656:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800465a:	4422      	add	r2, r4
 800465c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004660:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004664:	3302      	adds	r3, #2
 8004666:	e7c7      	b.n	80045f8 <_printf_common+0x58>
 8004668:	2301      	movs	r3, #1
 800466a:	4622      	mov	r2, r4
 800466c:	4641      	mov	r1, r8
 800466e:	4638      	mov	r0, r7
 8004670:	47c8      	blx	r9
 8004672:	3001      	adds	r0, #1
 8004674:	d0e6      	beq.n	8004644 <_printf_common+0xa4>
 8004676:	3601      	adds	r6, #1
 8004678:	e7d9      	b.n	800462e <_printf_common+0x8e>
	...

0800467c <_printf_i>:
 800467c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004680:	7e0f      	ldrb	r7, [r1, #24]
 8004682:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004684:	2f78      	cmp	r7, #120	@ 0x78
 8004686:	4691      	mov	r9, r2
 8004688:	4680      	mov	r8, r0
 800468a:	460c      	mov	r4, r1
 800468c:	469a      	mov	sl, r3
 800468e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004692:	d807      	bhi.n	80046a4 <_printf_i+0x28>
 8004694:	2f62      	cmp	r7, #98	@ 0x62
 8004696:	d80a      	bhi.n	80046ae <_printf_i+0x32>
 8004698:	2f00      	cmp	r7, #0
 800469a:	f000 80d1 	beq.w	8004840 <_printf_i+0x1c4>
 800469e:	2f58      	cmp	r7, #88	@ 0x58
 80046a0:	f000 80b8 	beq.w	8004814 <_printf_i+0x198>
 80046a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80046a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80046ac:	e03a      	b.n	8004724 <_printf_i+0xa8>
 80046ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80046b2:	2b15      	cmp	r3, #21
 80046b4:	d8f6      	bhi.n	80046a4 <_printf_i+0x28>
 80046b6:	a101      	add	r1, pc, #4	@ (adr r1, 80046bc <_printf_i+0x40>)
 80046b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046bc:	08004715 	.word	0x08004715
 80046c0:	08004729 	.word	0x08004729
 80046c4:	080046a5 	.word	0x080046a5
 80046c8:	080046a5 	.word	0x080046a5
 80046cc:	080046a5 	.word	0x080046a5
 80046d0:	080046a5 	.word	0x080046a5
 80046d4:	08004729 	.word	0x08004729
 80046d8:	080046a5 	.word	0x080046a5
 80046dc:	080046a5 	.word	0x080046a5
 80046e0:	080046a5 	.word	0x080046a5
 80046e4:	080046a5 	.word	0x080046a5
 80046e8:	08004827 	.word	0x08004827
 80046ec:	08004753 	.word	0x08004753
 80046f0:	080047e1 	.word	0x080047e1
 80046f4:	080046a5 	.word	0x080046a5
 80046f8:	080046a5 	.word	0x080046a5
 80046fc:	08004849 	.word	0x08004849
 8004700:	080046a5 	.word	0x080046a5
 8004704:	08004753 	.word	0x08004753
 8004708:	080046a5 	.word	0x080046a5
 800470c:	080046a5 	.word	0x080046a5
 8004710:	080047e9 	.word	0x080047e9
 8004714:	6833      	ldr	r3, [r6, #0]
 8004716:	1d1a      	adds	r2, r3, #4
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	6032      	str	r2, [r6, #0]
 800471c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004720:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004724:	2301      	movs	r3, #1
 8004726:	e09c      	b.n	8004862 <_printf_i+0x1e6>
 8004728:	6833      	ldr	r3, [r6, #0]
 800472a:	6820      	ldr	r0, [r4, #0]
 800472c:	1d19      	adds	r1, r3, #4
 800472e:	6031      	str	r1, [r6, #0]
 8004730:	0606      	lsls	r6, r0, #24
 8004732:	d501      	bpl.n	8004738 <_printf_i+0xbc>
 8004734:	681d      	ldr	r5, [r3, #0]
 8004736:	e003      	b.n	8004740 <_printf_i+0xc4>
 8004738:	0645      	lsls	r5, r0, #25
 800473a:	d5fb      	bpl.n	8004734 <_printf_i+0xb8>
 800473c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004740:	2d00      	cmp	r5, #0
 8004742:	da03      	bge.n	800474c <_printf_i+0xd0>
 8004744:	232d      	movs	r3, #45	@ 0x2d
 8004746:	426d      	negs	r5, r5
 8004748:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800474c:	4858      	ldr	r0, [pc, #352]	@ (80048b0 <_printf_i+0x234>)
 800474e:	230a      	movs	r3, #10
 8004750:	e011      	b.n	8004776 <_printf_i+0xfa>
 8004752:	6821      	ldr	r1, [r4, #0]
 8004754:	6833      	ldr	r3, [r6, #0]
 8004756:	0608      	lsls	r0, r1, #24
 8004758:	f853 5b04 	ldr.w	r5, [r3], #4
 800475c:	d402      	bmi.n	8004764 <_printf_i+0xe8>
 800475e:	0649      	lsls	r1, r1, #25
 8004760:	bf48      	it	mi
 8004762:	b2ad      	uxthmi	r5, r5
 8004764:	2f6f      	cmp	r7, #111	@ 0x6f
 8004766:	4852      	ldr	r0, [pc, #328]	@ (80048b0 <_printf_i+0x234>)
 8004768:	6033      	str	r3, [r6, #0]
 800476a:	bf14      	ite	ne
 800476c:	230a      	movne	r3, #10
 800476e:	2308      	moveq	r3, #8
 8004770:	2100      	movs	r1, #0
 8004772:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004776:	6866      	ldr	r6, [r4, #4]
 8004778:	60a6      	str	r6, [r4, #8]
 800477a:	2e00      	cmp	r6, #0
 800477c:	db05      	blt.n	800478a <_printf_i+0x10e>
 800477e:	6821      	ldr	r1, [r4, #0]
 8004780:	432e      	orrs	r6, r5
 8004782:	f021 0104 	bic.w	r1, r1, #4
 8004786:	6021      	str	r1, [r4, #0]
 8004788:	d04b      	beq.n	8004822 <_printf_i+0x1a6>
 800478a:	4616      	mov	r6, r2
 800478c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004790:	fb03 5711 	mls	r7, r3, r1, r5
 8004794:	5dc7      	ldrb	r7, [r0, r7]
 8004796:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800479a:	462f      	mov	r7, r5
 800479c:	42bb      	cmp	r3, r7
 800479e:	460d      	mov	r5, r1
 80047a0:	d9f4      	bls.n	800478c <_printf_i+0x110>
 80047a2:	2b08      	cmp	r3, #8
 80047a4:	d10b      	bne.n	80047be <_printf_i+0x142>
 80047a6:	6823      	ldr	r3, [r4, #0]
 80047a8:	07df      	lsls	r7, r3, #31
 80047aa:	d508      	bpl.n	80047be <_printf_i+0x142>
 80047ac:	6923      	ldr	r3, [r4, #16]
 80047ae:	6861      	ldr	r1, [r4, #4]
 80047b0:	4299      	cmp	r1, r3
 80047b2:	bfde      	ittt	le
 80047b4:	2330      	movle	r3, #48	@ 0x30
 80047b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80047ba:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80047be:	1b92      	subs	r2, r2, r6
 80047c0:	6122      	str	r2, [r4, #16]
 80047c2:	f8cd a000 	str.w	sl, [sp]
 80047c6:	464b      	mov	r3, r9
 80047c8:	aa03      	add	r2, sp, #12
 80047ca:	4621      	mov	r1, r4
 80047cc:	4640      	mov	r0, r8
 80047ce:	f7ff fee7 	bl	80045a0 <_printf_common>
 80047d2:	3001      	adds	r0, #1
 80047d4:	d14a      	bne.n	800486c <_printf_i+0x1f0>
 80047d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80047da:	b004      	add	sp, #16
 80047dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047e0:	6823      	ldr	r3, [r4, #0]
 80047e2:	f043 0320 	orr.w	r3, r3, #32
 80047e6:	6023      	str	r3, [r4, #0]
 80047e8:	4832      	ldr	r0, [pc, #200]	@ (80048b4 <_printf_i+0x238>)
 80047ea:	2778      	movs	r7, #120	@ 0x78
 80047ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80047f0:	6823      	ldr	r3, [r4, #0]
 80047f2:	6831      	ldr	r1, [r6, #0]
 80047f4:	061f      	lsls	r7, r3, #24
 80047f6:	f851 5b04 	ldr.w	r5, [r1], #4
 80047fa:	d402      	bmi.n	8004802 <_printf_i+0x186>
 80047fc:	065f      	lsls	r7, r3, #25
 80047fe:	bf48      	it	mi
 8004800:	b2ad      	uxthmi	r5, r5
 8004802:	6031      	str	r1, [r6, #0]
 8004804:	07d9      	lsls	r1, r3, #31
 8004806:	bf44      	itt	mi
 8004808:	f043 0320 	orrmi.w	r3, r3, #32
 800480c:	6023      	strmi	r3, [r4, #0]
 800480e:	b11d      	cbz	r5, 8004818 <_printf_i+0x19c>
 8004810:	2310      	movs	r3, #16
 8004812:	e7ad      	b.n	8004770 <_printf_i+0xf4>
 8004814:	4826      	ldr	r0, [pc, #152]	@ (80048b0 <_printf_i+0x234>)
 8004816:	e7e9      	b.n	80047ec <_printf_i+0x170>
 8004818:	6823      	ldr	r3, [r4, #0]
 800481a:	f023 0320 	bic.w	r3, r3, #32
 800481e:	6023      	str	r3, [r4, #0]
 8004820:	e7f6      	b.n	8004810 <_printf_i+0x194>
 8004822:	4616      	mov	r6, r2
 8004824:	e7bd      	b.n	80047a2 <_printf_i+0x126>
 8004826:	6833      	ldr	r3, [r6, #0]
 8004828:	6825      	ldr	r5, [r4, #0]
 800482a:	6961      	ldr	r1, [r4, #20]
 800482c:	1d18      	adds	r0, r3, #4
 800482e:	6030      	str	r0, [r6, #0]
 8004830:	062e      	lsls	r6, r5, #24
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	d501      	bpl.n	800483a <_printf_i+0x1be>
 8004836:	6019      	str	r1, [r3, #0]
 8004838:	e002      	b.n	8004840 <_printf_i+0x1c4>
 800483a:	0668      	lsls	r0, r5, #25
 800483c:	d5fb      	bpl.n	8004836 <_printf_i+0x1ba>
 800483e:	8019      	strh	r1, [r3, #0]
 8004840:	2300      	movs	r3, #0
 8004842:	6123      	str	r3, [r4, #16]
 8004844:	4616      	mov	r6, r2
 8004846:	e7bc      	b.n	80047c2 <_printf_i+0x146>
 8004848:	6833      	ldr	r3, [r6, #0]
 800484a:	1d1a      	adds	r2, r3, #4
 800484c:	6032      	str	r2, [r6, #0]
 800484e:	681e      	ldr	r6, [r3, #0]
 8004850:	6862      	ldr	r2, [r4, #4]
 8004852:	2100      	movs	r1, #0
 8004854:	4630      	mov	r0, r6
 8004856:	f7fb fcc3 	bl	80001e0 <memchr>
 800485a:	b108      	cbz	r0, 8004860 <_printf_i+0x1e4>
 800485c:	1b80      	subs	r0, r0, r6
 800485e:	6060      	str	r0, [r4, #4]
 8004860:	6863      	ldr	r3, [r4, #4]
 8004862:	6123      	str	r3, [r4, #16]
 8004864:	2300      	movs	r3, #0
 8004866:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800486a:	e7aa      	b.n	80047c2 <_printf_i+0x146>
 800486c:	6923      	ldr	r3, [r4, #16]
 800486e:	4632      	mov	r2, r6
 8004870:	4649      	mov	r1, r9
 8004872:	4640      	mov	r0, r8
 8004874:	47d0      	blx	sl
 8004876:	3001      	adds	r0, #1
 8004878:	d0ad      	beq.n	80047d6 <_printf_i+0x15a>
 800487a:	6823      	ldr	r3, [r4, #0]
 800487c:	079b      	lsls	r3, r3, #30
 800487e:	d413      	bmi.n	80048a8 <_printf_i+0x22c>
 8004880:	68e0      	ldr	r0, [r4, #12]
 8004882:	9b03      	ldr	r3, [sp, #12]
 8004884:	4298      	cmp	r0, r3
 8004886:	bfb8      	it	lt
 8004888:	4618      	movlt	r0, r3
 800488a:	e7a6      	b.n	80047da <_printf_i+0x15e>
 800488c:	2301      	movs	r3, #1
 800488e:	4632      	mov	r2, r6
 8004890:	4649      	mov	r1, r9
 8004892:	4640      	mov	r0, r8
 8004894:	47d0      	blx	sl
 8004896:	3001      	adds	r0, #1
 8004898:	d09d      	beq.n	80047d6 <_printf_i+0x15a>
 800489a:	3501      	adds	r5, #1
 800489c:	68e3      	ldr	r3, [r4, #12]
 800489e:	9903      	ldr	r1, [sp, #12]
 80048a0:	1a5b      	subs	r3, r3, r1
 80048a2:	42ab      	cmp	r3, r5
 80048a4:	dcf2      	bgt.n	800488c <_printf_i+0x210>
 80048a6:	e7eb      	b.n	8004880 <_printf_i+0x204>
 80048a8:	2500      	movs	r5, #0
 80048aa:	f104 0619 	add.w	r6, r4, #25
 80048ae:	e7f5      	b.n	800489c <_printf_i+0x220>
 80048b0:	08004a21 	.word	0x08004a21
 80048b4:	08004a32 	.word	0x08004a32

080048b8 <memmove>:
 80048b8:	4288      	cmp	r0, r1
 80048ba:	b510      	push	{r4, lr}
 80048bc:	eb01 0402 	add.w	r4, r1, r2
 80048c0:	d902      	bls.n	80048c8 <memmove+0x10>
 80048c2:	4284      	cmp	r4, r0
 80048c4:	4623      	mov	r3, r4
 80048c6:	d807      	bhi.n	80048d8 <memmove+0x20>
 80048c8:	1e43      	subs	r3, r0, #1
 80048ca:	42a1      	cmp	r1, r4
 80048cc:	d008      	beq.n	80048e0 <memmove+0x28>
 80048ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80048d6:	e7f8      	b.n	80048ca <memmove+0x12>
 80048d8:	4402      	add	r2, r0
 80048da:	4601      	mov	r1, r0
 80048dc:	428a      	cmp	r2, r1
 80048de:	d100      	bne.n	80048e2 <memmove+0x2a>
 80048e0:	bd10      	pop	{r4, pc}
 80048e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80048e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80048ea:	e7f7      	b.n	80048dc <memmove+0x24>

080048ec <_sbrk_r>:
 80048ec:	b538      	push	{r3, r4, r5, lr}
 80048ee:	4d06      	ldr	r5, [pc, #24]	@ (8004908 <_sbrk_r+0x1c>)
 80048f0:	2300      	movs	r3, #0
 80048f2:	4604      	mov	r4, r0
 80048f4:	4608      	mov	r0, r1
 80048f6:	602b      	str	r3, [r5, #0]
 80048f8:	f7fc fa62 	bl	8000dc0 <_sbrk>
 80048fc:	1c43      	adds	r3, r0, #1
 80048fe:	d102      	bne.n	8004906 <_sbrk_r+0x1a>
 8004900:	682b      	ldr	r3, [r5, #0]
 8004902:	b103      	cbz	r3, 8004906 <_sbrk_r+0x1a>
 8004904:	6023      	str	r3, [r4, #0]
 8004906:	bd38      	pop	{r3, r4, r5, pc}
 8004908:	2000037c 	.word	0x2000037c

0800490c <memcpy>:
 800490c:	440a      	add	r2, r1
 800490e:	4291      	cmp	r1, r2
 8004910:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004914:	d100      	bne.n	8004918 <memcpy+0xc>
 8004916:	4770      	bx	lr
 8004918:	b510      	push	{r4, lr}
 800491a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800491e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004922:	4291      	cmp	r1, r2
 8004924:	d1f9      	bne.n	800491a <memcpy+0xe>
 8004926:	bd10      	pop	{r4, pc}

08004928 <_realloc_r>:
 8004928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800492c:	4607      	mov	r7, r0
 800492e:	4614      	mov	r4, r2
 8004930:	460d      	mov	r5, r1
 8004932:	b921      	cbnz	r1, 800493e <_realloc_r+0x16>
 8004934:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004938:	4611      	mov	r1, r2
 800493a:	f7ff bc4d 	b.w	80041d8 <_malloc_r>
 800493e:	b92a      	cbnz	r2, 800494c <_realloc_r+0x24>
 8004940:	f7ff fbde 	bl	8004100 <_free_r>
 8004944:	4625      	mov	r5, r4
 8004946:	4628      	mov	r0, r5
 8004948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800494c:	f000 f81a 	bl	8004984 <_malloc_usable_size_r>
 8004950:	4284      	cmp	r4, r0
 8004952:	4606      	mov	r6, r0
 8004954:	d802      	bhi.n	800495c <_realloc_r+0x34>
 8004956:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800495a:	d8f4      	bhi.n	8004946 <_realloc_r+0x1e>
 800495c:	4621      	mov	r1, r4
 800495e:	4638      	mov	r0, r7
 8004960:	f7ff fc3a 	bl	80041d8 <_malloc_r>
 8004964:	4680      	mov	r8, r0
 8004966:	b908      	cbnz	r0, 800496c <_realloc_r+0x44>
 8004968:	4645      	mov	r5, r8
 800496a:	e7ec      	b.n	8004946 <_realloc_r+0x1e>
 800496c:	42b4      	cmp	r4, r6
 800496e:	4622      	mov	r2, r4
 8004970:	4629      	mov	r1, r5
 8004972:	bf28      	it	cs
 8004974:	4632      	movcs	r2, r6
 8004976:	f7ff ffc9 	bl	800490c <memcpy>
 800497a:	4629      	mov	r1, r5
 800497c:	4638      	mov	r0, r7
 800497e:	f7ff fbbf 	bl	8004100 <_free_r>
 8004982:	e7f1      	b.n	8004968 <_realloc_r+0x40>

08004984 <_malloc_usable_size_r>:
 8004984:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004988:	1f18      	subs	r0, r3, #4
 800498a:	2b00      	cmp	r3, #0
 800498c:	bfbc      	itt	lt
 800498e:	580b      	ldrlt	r3, [r1, r0]
 8004990:	18c0      	addlt	r0, r0, r3
 8004992:	4770      	bx	lr

08004994 <_init>:
 8004994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004996:	bf00      	nop
 8004998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800499a:	bc08      	pop	{r3}
 800499c:	469e      	mov	lr, r3
 800499e:	4770      	bx	lr

080049a0 <_fini>:
 80049a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049a2:	bf00      	nop
 80049a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049a6:	bc08      	pop	{r3}
 80049a8:	469e      	mov	lr, r3
 80049aa:	4770      	bx	lr
