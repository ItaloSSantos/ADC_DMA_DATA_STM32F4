
ADC_DMA_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004384  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08004514  08004514  00005514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045a8  080045a8  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080045a8  080045a8  000055a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045b0  080045b0  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045b0  080045b0  000055b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080045b4  080045b4  000055b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080045b8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          00000344  2000005c  2000005c  0000605c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003a0  200003a0  0000605c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000abc2  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e9a  00000000  00000000  00010c4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008e0  00000000  00000000  00012ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006c5  00000000  00000000  000133c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021b39  00000000  00000000  00013a8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b07a  00000000  00000000  000355c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfaaa  00000000  00000000  00040640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001100ea  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002880  00000000  00000000  00110130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  001129b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080044fc 	.word	0x080044fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080044fc 	.word	0x080044fc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <HAL_UART_RxCpltCallback>:
/*-----------------Utilização da USART----------------------*/
// cria a instância de RingBuffer e já declara as posições iniciais.
RingBuffer rxBufferUart2 = { .head = 0, .tail = 0 };

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005cc:	b5b0      	push	{r4, r5, r7, lr}
 80005ce:	b092      	sub	sp, #72	@ 0x48
 80005d0:	af04      	add	r7, sp, #16
 80005d2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a40      	ldr	r2, [pc, #256]	@ (80006dc <HAL_UART_RxCpltCallback+0x110>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d179      	bne.n	80006d2 <HAL_UART_RxCpltCallback+0x106>
  {
    // Verifica se recebeu o comando
	  if(strcmp(rxData, comando_adc) == 0) {
 80005de:	4940      	ldr	r1, [pc, #256]	@ (80006e0 <HAL_UART_RxCpltCallback+0x114>)
 80005e0:	4840      	ldr	r0, [pc, #256]	@ (80006e4 <HAL_UART_RxCpltCallback+0x118>)
 80005e2:	f7ff fdf5 	bl	80001d0 <strcmp>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d15c      	bne.n	80006a6 <HAL_UART_RxCpltCallback+0xda>
	      uint32_t mV0 = ((uint32_t)adcBuffer[0] * 3300) / 4095;
 80005ec:	4b3e      	ldr	r3, [pc, #248]	@ (80006e8 <HAL_UART_RxCpltCallback+0x11c>)
 80005ee:	881b      	ldrh	r3, [r3, #0]
 80005f0:	461a      	mov	r2, r3
 80005f2:	f640 43e4 	movw	r3, #3300	@ 0xce4
 80005f6:	fb03 f202 	mul.w	r2, r3, r2
 80005fa:	4b3c      	ldr	r3, [pc, #240]	@ (80006ec <HAL_UART_RxCpltCallback+0x120>)
 80005fc:	fba3 1302 	umull	r1, r3, r3, r2
 8000600:	1ad2      	subs	r2, r2, r3
 8000602:	0852      	lsrs	r2, r2, #1
 8000604:	4413      	add	r3, r2
 8000606:	0adb      	lsrs	r3, r3, #11
 8000608:	633b      	str	r3, [r7, #48]	@ 0x30
	      uint32_t mV1 = ((uint32_t)adcBuffer[1] * 3300) / 4095;
 800060a:	4b37      	ldr	r3, [pc, #220]	@ (80006e8 <HAL_UART_RxCpltCallback+0x11c>)
 800060c:	885b      	ldrh	r3, [r3, #2]
 800060e:	461a      	mov	r2, r3
 8000610:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8000614:	fb03 f202 	mul.w	r2, r3, r2
 8000618:	4b34      	ldr	r3, [pc, #208]	@ (80006ec <HAL_UART_RxCpltCallback+0x120>)
 800061a:	fba3 1302 	umull	r1, r3, r3, r2
 800061e:	1ad2      	subs	r2, r2, r3
 8000620:	0852      	lsrs	r2, r2, #1
 8000622:	4413      	add	r3, r2
 8000624:	0adb      	lsrs	r3, r3, #11
 8000626:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      char response[32];
	      snprintf(response, sizeof(response), "ADC0:%lu.%02luV,ADC1:%lu.%02luV\r\n",
 8000628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800062a:	4a31      	ldr	r2, [pc, #196]	@ (80006f0 <HAL_UART_RxCpltCallback+0x124>)
 800062c:	fba2 2303 	umull	r2, r3, r2, r3
 8000630:	099d      	lsrs	r5, r3, #6
	               mV0 / 1000, (mV0 % 1000) / 10,
 8000632:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000634:	4b2e      	ldr	r3, [pc, #184]	@ (80006f0 <HAL_UART_RxCpltCallback+0x124>)
 8000636:	fba3 1302 	umull	r1, r3, r3, r2
 800063a:	099b      	lsrs	r3, r3, #6
 800063c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000640:	fb01 f303 	mul.w	r3, r1, r3
 8000644:	1ad3      	subs	r3, r2, r3
	      snprintf(response, sizeof(response), "ADC0:%lu.%02luV,ADC1:%lu.%02luV\r\n",
 8000646:	4a2b      	ldr	r2, [pc, #172]	@ (80006f4 <HAL_UART_RxCpltCallback+0x128>)
 8000648:	fba2 2303 	umull	r2, r3, r2, r3
 800064c:	08d9      	lsrs	r1, r3, #3
 800064e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000650:	4a27      	ldr	r2, [pc, #156]	@ (80006f0 <HAL_UART_RxCpltCallback+0x124>)
 8000652:	fba2 2303 	umull	r2, r3, r2, r3
 8000656:	0998      	lsrs	r0, r3, #6
	               mV1 / 1000, (mV1 % 1000) / 10);
 8000658:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800065a:	4b25      	ldr	r3, [pc, #148]	@ (80006f0 <HAL_UART_RxCpltCallback+0x124>)
 800065c:	fba3 4302 	umull	r4, r3, r3, r2
 8000660:	099b      	lsrs	r3, r3, #6
 8000662:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8000666:	fb04 f303 	mul.w	r3, r4, r3
 800066a:	1ad3      	subs	r3, r2, r3
	      snprintf(response, sizeof(response), "ADC0:%lu.%02luV,ADC1:%lu.%02luV\r\n",
 800066c:	4a21      	ldr	r2, [pc, #132]	@ (80006f4 <HAL_UART_RxCpltCallback+0x128>)
 800066e:	fba2 2303 	umull	r2, r3, r2, r3
 8000672:	08db      	lsrs	r3, r3, #3
 8000674:	f107 040c 	add.w	r4, r7, #12
 8000678:	9302      	str	r3, [sp, #8]
 800067a:	9001      	str	r0, [sp, #4]
 800067c:	9100      	str	r1, [sp, #0]
 800067e:	462b      	mov	r3, r5
 8000680:	4a1d      	ldr	r2, [pc, #116]	@ (80006f8 <HAL_UART_RxCpltCallback+0x12c>)
 8000682:	2120      	movs	r1, #32
 8000684:	4620      	mov	r0, r4
 8000686:	f003 fa85 	bl	8003b94 <sniprintf>
	      HAL_UART_Transmit_IT(&huart2, (uint8_t*)response, strlen(response));
 800068a:	f107 030c 	add.w	r3, r7, #12
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff fda8 	bl	80001e4 <strlen>
 8000694:	4603      	mov	r3, r0
 8000696:	b29a      	uxth	r2, r3
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	4619      	mov	r1, r3
 800069e:	4817      	ldr	r0, [pc, #92]	@ (80006fc <HAL_UART_RxCpltCallback+0x130>)
 80006a0:	f002 fb0a 	bl	8002cb8 <HAL_UART_Transmit_IT>
 80006a4:	e00b      	b.n	80006be <HAL_UART_RxCpltCallback+0xf2>
	  }
    else {
        // retorna erro
        const char *error = "Comando invalido\r\n";
 80006a6:	4b16      	ldr	r3, [pc, #88]	@ (8000700 <HAL_UART_RxCpltCallback+0x134>)
 80006a8:	637b      	str	r3, [r7, #52]	@ 0x34
        HAL_UART_Transmit_IT(&huart2, (uint8_t*)error, strlen(error));
 80006aa:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80006ac:	f7ff fd9a 	bl	80001e4 <strlen>
 80006b0:	4603      	mov	r3, r0
 80006b2:	b29b      	uxth	r3, r3
 80006b4:	461a      	mov	r2, r3
 80006b6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80006b8:	4810      	ldr	r0, [pc, #64]	@ (80006fc <HAL_UART_RxCpltCallback+0x130>)
 80006ba:	f002 fafd 	bl	8002cb8 <HAL_UART_Transmit_IT>
    }

    // Limpa buffer e reinicia recepção
    memset(rxData, 0, RX_SIZE);
 80006be:	2220      	movs	r2, #32
 80006c0:	2100      	movs	r1, #0
 80006c2:	4808      	ldr	r0, [pc, #32]	@ (80006e4 <HAL_UART_RxCpltCallback+0x118>)
 80006c4:	f003 fa9c 	bl	8003c00 <memset>
    HAL_UART_Receive_IT(&huart2, (uint8_t*)rxData, RX_SIZE - 1); // -1 para segurança
 80006c8:	221f      	movs	r2, #31
 80006ca:	4906      	ldr	r1, [pc, #24]	@ (80006e4 <HAL_UART_RxCpltCallback+0x118>)
 80006cc:	480b      	ldr	r0, [pc, #44]	@ (80006fc <HAL_UART_RxCpltCallback+0x130>)
 80006ce:	f002 fb29 	bl	8002d24 <HAL_UART_Receive_IT>
  }
}
 80006d2:	bf00      	nop
 80006d4:	3738      	adds	r7, #56	@ 0x38
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bdb0      	pop	{r4, r5, r7, pc}
 80006da:	bf00      	nop
 80006dc:	40004400 	.word	0x40004400
 80006e0:	0800454c 	.word	0x0800454c
 80006e4:	20000078 	.word	0x20000078
 80006e8:	20000248 	.word	0x20000248
 80006ec:	00100101 	.word	0x00100101
 80006f0:	10624dd3 	.word	0x10624dd3
 80006f4:	cccccccd 	.word	0xcccccccd
 80006f8:	08004514 	.word	0x08004514
 80006fc:	20000098 	.word	0x20000098
 8000700:	08004538 	.word	0x08004538

08000704 <MX_USART2_UART_Init>:
/*-----------------Configuração da USART----------------------*/

static void MX_USART2_UART_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000708:	4b11      	ldr	r3, [pc, #68]	@ (8000750 <MX_USART2_UART_Init+0x4c>)
 800070a:	4a12      	ldr	r2, [pc, #72]	@ (8000754 <MX_USART2_UART_Init+0x50>)
 800070c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800070e:	4b10      	ldr	r3, [pc, #64]	@ (8000750 <MX_USART2_UART_Init+0x4c>)
 8000710:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000714:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b0e      	ldr	r3, [pc, #56]	@ (8000750 <MX_USART2_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <MX_USART2_UART_Init+0x4c>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	@ (8000750 <MX_USART2_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <MX_USART2_UART_Init+0x4c>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b08      	ldr	r3, [pc, #32]	@ (8000750 <MX_USART2_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000734:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <MX_USART2_UART_Init+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&huart2) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	@ (8000750 <MX_USART2_UART_Init+0x4c>)
 800073c:	f002 fa6c 	bl	8002c18 <HAL_UART_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000746:	f000 f959 	bl	80009fc <Error_Handler>
  }
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000098 	.word	0x20000098
 8000754:	40004400 	.word	0x40004400

08000758 <Liga_Usart2>:


void Liga_Usart2(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  MX_USART2_UART_Init();
 800075c:	f7ff ffd2 	bl	8000704 <MX_USART2_UART_Init>
  // Recebe para a variável temporária rxData
  HAL_UART_Receive_IT(&huart2, (uint8_t*)rxData, RX_SIZE);
 8000760:	2220      	movs	r2, #32
 8000762:	4903      	ldr	r1, [pc, #12]	@ (8000770 <Liga_Usart2+0x18>)
 8000764:	4803      	ldr	r0, [pc, #12]	@ (8000774 <Liga_Usart2+0x1c>)
 8000766:	f002 fadd 	bl	8002d24 <HAL_UART_Receive_IT>
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000078 	.word	0x20000078
 8000774:	20000098 	.word	0x20000098

08000778 <main>:
static void MX_DMA_Init(void);
static void MX_ADC1_Init(void);


int main(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  HAL_Init();
 800077c:	f000 fb7e 	bl	8000e7c <HAL_Init>
  SystemClock_Config();
 8000780:	f000 f80a 	bl	8000798 <SystemClock_Config>
  MX_GPIO_Init();
 8000784:	f000 f912 	bl	80009ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000788:	f000 f8d2 	bl	8000930 <MX_DMA_Init>
  MX_ADC1_Init();
 800078c:	f000 f86e 	bl	800086c <MX_ADC1_Init>
  Liga_Usart2();
 8000790:	f7ff ffe2 	bl	8000758 <Liga_Usart2>

  while (1)
 8000794:	bf00      	nop
 8000796:	e7fd      	b.n	8000794 <main+0x1c>

08000798 <SystemClock_Config>:

}


void SystemClock_Config(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b094      	sub	sp, #80	@ 0x50
 800079c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079e:	f107 0320 	add.w	r3, r7, #32
 80007a2:	2230      	movs	r2, #48	@ 0x30
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f003 fa2a 	bl	8003c00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 80007bc:	2300      	movs	r3, #0
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	4b28      	ldr	r3, [pc, #160]	@ (8000864 <SystemClock_Config+0xcc>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c4:	4a27      	ldr	r2, [pc, #156]	@ (8000864 <SystemClock_Config+0xcc>)
 80007c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80007cc:	4b25      	ldr	r3, [pc, #148]	@ (8000864 <SystemClock_Config+0xcc>)
 80007ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d8:	2300      	movs	r3, #0
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	4b22      	ldr	r3, [pc, #136]	@ (8000868 <SystemClock_Config+0xd0>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a21      	ldr	r2, [pc, #132]	@ (8000868 <SystemClock_Config+0xd0>)
 80007e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007e6:	6013      	str	r3, [r2, #0]
 80007e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000868 <SystemClock_Config+0xd0>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	687b      	ldr	r3, [r7, #4]


  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007f4:	2301      	movs	r3, #1
 80007f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fe:	2302      	movs	r3, #2
 8000800:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000802:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000806:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000808:	2304      	movs	r3, #4
 800080a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800080c:	23a8      	movs	r3, #168	@ 0xa8
 800080e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000810:	2302      	movs	r3, #2
 8000812:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000814:	2304      	movs	r3, #4
 8000816:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000818:	f107 0320 	add.w	r3, r7, #32
 800081c:	4618      	mov	r0, r3
 800081e:	f001 fd63 	bl	80022e8 <HAL_RCC_OscConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000828:	f000 f8e8 	bl	80009fc <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082c:	230f      	movs	r3, #15
 800082e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000830:	2302      	movs	r3, #2
 8000832:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000838:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800083c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800083e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000842:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	2105      	movs	r1, #5
 800084a:	4618      	mov	r0, r3
 800084c:	f001 ffc4 	bl	80027d8 <HAL_RCC_ClockConfig>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000856:	f000 f8d1 	bl	80009fc <Error_Handler>
  }
}
 800085a:	bf00      	nop
 800085c:	3750      	adds	r7, #80	@ 0x50
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40023800 	.word	0x40023800
 8000868:	40007000 	.word	0x40007000

0800086c <MX_ADC1_Init>:

static void MX_ADC1_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000872:	463b      	mov	r3, r7
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
  hadc1.Instance = ADC1;
 800087e:	4b29      	ldr	r3, [pc, #164]	@ (8000924 <MX_ADC1_Init+0xb8>)
 8000880:	4a29      	ldr	r2, [pc, #164]	@ (8000928 <MX_ADC1_Init+0xbc>)
 8000882:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000884:	4b27      	ldr	r3, [pc, #156]	@ (8000924 <MX_ADC1_Init+0xb8>)
 8000886:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800088a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800088c:	4b25      	ldr	r3, [pc, #148]	@ (8000924 <MX_ADC1_Init+0xb8>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000892:	4b24      	ldr	r3, [pc, #144]	@ (8000924 <MX_ADC1_Init+0xb8>)
 8000894:	2201      	movs	r2, #1
 8000896:	611a      	str	r2, [r3, #16]
  //Com DISABLE: converte apenas quando recebe um start (software/hardware)
  //Com ENABLE: converte continuamente sem parar
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000898:	4b22      	ldr	r3, [pc, #136]	@ (8000924 <MX_ADC1_Init+0xb8>)
 800089a:	2200      	movs	r2, #0
 800089c:	761a      	strb	r2, [r3, #24]
  // desabilita a conversão de cada channel em sequência arbitrária
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800089e:	4b21      	ldr	r3, [pc, #132]	@ (8000924 <MX_ADC1_Init+0xb8>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000924 <MX_ADC1_Init+0xb8>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;//HAL_ADC_Start()
 80008ac:	4b1d      	ldr	r3, [pc, #116]	@ (8000924 <MX_ADC1_Init+0xb8>)
 80008ae:	4a1f      	ldr	r2, [pc, #124]	@ (800092c <MX_ADC1_Init+0xc0>)
 80008b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000924 <MX_ADC1_Init+0xb8>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2; //são dois canais - duas conversões
 80008b8:	4b1a      	ldr	r3, [pc, #104]	@ (8000924 <MX_ADC1_Init+0xb8>)
 80008ba:	2202      	movs	r2, #2
 80008bc:	61da      	str	r2, [r3, #28]
  //após cada conversão o DMA para
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008be:	4b19      	ldr	r3, [pc, #100]	@ (8000924 <MX_ADC1_Init+0xb8>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV; //Flag ativa após cada conversão
 80008c6:	4b17      	ldr	r3, [pc, #92]	@ (8000924 <MX_ADC1_Init+0xb8>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	615a      	str	r2, [r3, #20]

  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008cc:	4815      	ldr	r0, [pc, #84]	@ (8000924 <MX_ADC1_Init+0xb8>)
 80008ce:	f000 fb47 	bl	8000f60 <HAL_ADC_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80008d8:	f000 f890 	bl	80009fc <Error_Handler>
  }


  sConfig.Channel = ADC_CHANNEL_0;
 80008dc:	2300      	movs	r3, #0
 80008de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008e0:	2301      	movs	r3, #1
 80008e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80008e4:	2306      	movs	r3, #6
 80008e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008e8:	463b      	mov	r3, r7
 80008ea:	4619      	mov	r1, r3
 80008ec:	480d      	ldr	r0, [pc, #52]	@ (8000924 <MX_ADC1_Init+0xb8>)
 80008ee:	f000 fca9 	bl	8001244 <HAL_ADC_ConfigChannel>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_ADC1_Init+0x90>
  {
      Error_Handler();
 80008f8:	f000 f880 	bl	80009fc <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_1;
 80008fc:	2301      	movs	r3, #1
 80008fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000900:	2302      	movs	r3, #2
 8000902:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000904:	2306      	movs	r3, #6
 8000906:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000908:	463b      	mov	r3, r7
 800090a:	4619      	mov	r1, r3
 800090c:	4805      	ldr	r0, [pc, #20]	@ (8000924 <MX_ADC1_Init+0xb8>)
 800090e:	f000 fc99 	bl	8001244 <HAL_ADC_ConfigChannel>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_ADC1_Init+0xb0>
  {
      Error_Handler();
 8000918:	f000 f870 	bl	80009fc <Error_Handler>
  }


}
 800091c:	bf00      	nop
 800091e:	3710      	adds	r7, #16
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	200000e0 	.word	0x200000e0
 8000928:	40012000 	.word	0x40012000
 800092c:	0f000001 	.word	0x0f000001

08000930 <MX_DMA_Init>:


static void MX_DMA_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0

  __HAL_RCC_DMA2_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	4b1b      	ldr	r3, [pc, #108]	@ (80009a8 <MX_DMA_Init+0x78>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	4a1a      	ldr	r2, [pc, #104]	@ (80009a8 <MX_DMA_Init+0x78>)
 8000940:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000944:	6313      	str	r3, [r2, #48]	@ 0x30
 8000946:	4b18      	ldr	r3, [pc, #96]	@ (80009a8 <MX_DMA_Init+0x78>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	4b14      	ldr	r3, [pc, #80]	@ (80009a8 <MX_DMA_Init+0x78>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a13      	ldr	r2, [pc, #76]	@ (80009a8 <MX_DMA_Init+0x78>)
 800095c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
 8000962:	4b11      	ldr	r3, [pc, #68]	@ (80009a8 <MX_DMA_Init+0x78>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2100      	movs	r1, #0
 8000972:	2010      	movs	r0, #16
 8000974:	f000 ff69 	bl	800184a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000978:	2010      	movs	r0, #16
 800097a:	f000 ff82 	bl	8001882 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2100      	movs	r1, #0
 8000982:	2011      	movs	r0, #17
 8000984:	f000 ff61 	bl	800184a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000988:	2011      	movs	r0, #17
 800098a:	f000 ff7a 	bl	8001882 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2100      	movs	r1, #0
 8000992:	203c      	movs	r0, #60	@ 0x3c
 8000994:	f000 ff59 	bl	800184a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000998:	203c      	movs	r0, #60	@ 0x3c
 800099a:	f000 ff72 	bl	8001882 <HAL_NVIC_EnableIRQ>

}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800

080009ac <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0

  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	4b10      	ldr	r3, [pc, #64]	@ (80009f8 <MX_GPIO_Init+0x4c>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	4a0f      	ldr	r2, [pc, #60]	@ (80009f8 <MX_GPIO_Init+0x4c>)
 80009bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c2:	4b0d      	ldr	r3, [pc, #52]	@ (80009f8 <MX_GPIO_Init+0x4c>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	603b      	str	r3, [r7, #0]
 80009d2:	4b09      	ldr	r3, [pc, #36]	@ (80009f8 <MX_GPIO_Init+0x4c>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	4a08      	ldr	r2, [pc, #32]	@ (80009f8 <MX_GPIO_Init+0x4c>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009de:	4b06      	ldr	r3, [pc, #24]	@ (80009f8 <MX_GPIO_Init+0x4c>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]

}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800

080009fc <Error_Handler>:

void Error_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a00:	b672      	cpsid	i
}
 8000a02:	bf00      	nop

  __disable_irq();
  while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <Error_Handler+0x8>

08000a08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	4b10      	ldr	r3, [pc, #64]	@ (8000a54 <HAL_MspInit+0x4c>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a16:	4a0f      	ldr	r2, [pc, #60]	@ (8000a54 <HAL_MspInit+0x4c>)
 8000a18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a54 <HAL_MspInit+0x4c>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	603b      	str	r3, [r7, #0]
 8000a2e:	4b09      	ldr	r3, [pc, #36]	@ (8000a54 <HAL_MspInit+0x4c>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a32:	4a08      	ldr	r2, [pc, #32]	@ (8000a54 <HAL_MspInit+0x4c>)
 8000a34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a3a:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <HAL_MspInit+0x4c>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	40023800 	.word	0x40023800

08000a58 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08a      	sub	sp, #40	@ 0x28
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a33      	ldr	r2, [pc, #204]	@ (8000b44 <HAL_ADC_MspInit+0xec>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d15f      	bne.n	8000b3a <HAL_ADC_MspInit+0xe2>
  {
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	613b      	str	r3, [r7, #16]
 8000a7e:	4b32      	ldr	r3, [pc, #200]	@ (8000b48 <HAL_ADC_MspInit+0xf0>)
 8000a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a82:	4a31      	ldr	r2, [pc, #196]	@ (8000b48 <HAL_ADC_MspInit+0xf0>)
 8000a84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a88:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a8a:	4b2f      	ldr	r3, [pc, #188]	@ (8000b48 <HAL_ADC_MspInit+0xf0>)
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	4b2b      	ldr	r3, [pc, #172]	@ (8000b48 <HAL_ADC_MspInit+0xf0>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	4a2a      	ldr	r2, [pc, #168]	@ (8000b48 <HAL_ADC_MspInit+0xf0>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa6:	4b28      	ldr	r3, [pc, #160]	@ (8000b48 <HAL_ADC_MspInit+0xf0>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abe:	f107 0314 	add.w	r3, r7, #20
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4821      	ldr	r0, [pc, #132]	@ (8000b4c <HAL_ADC_MspInit+0xf4>)
 8000ac6:	f001 fa73 	bl	8001fb0 <HAL_GPIO_Init>

    hdma_adc1.Instance = DMA2_Stream4;
 8000aca:	4b21      	ldr	r3, [pc, #132]	@ (8000b50 <HAL_ADC_MspInit+0xf8>)
 8000acc:	4a21      	ldr	r2, [pc, #132]	@ (8000b54 <HAL_ADC_MspInit+0xfc>)
 8000ace:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ad0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b50 <HAL_ADC_MspInit+0xf8>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ad6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b50 <HAL_ADC_MspInit+0xf8>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000adc:	4b1c      	ldr	r3, [pc, #112]	@ (8000b50 <HAL_ADC_MspInit+0xf8>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ae2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b50 <HAL_ADC_MspInit+0xf8>)
 8000ae4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ae8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000aea:	4b19      	ldr	r3, [pc, #100]	@ (8000b50 <HAL_ADC_MspInit+0xf8>)
 8000aec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000af0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000af2:	4b17      	ldr	r3, [pc, #92]	@ (8000b50 <HAL_ADC_MspInit+0xf8>)
 8000af4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000af8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000afa:	4b15      	ldr	r3, [pc, #84]	@ (8000b50 <HAL_ADC_MspInit+0xf8>)
 8000afc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b00:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b02:	4b13      	ldr	r3, [pc, #76]	@ (8000b50 <HAL_ADC_MspInit+0xf8>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b08:	4b11      	ldr	r3, [pc, #68]	@ (8000b50 <HAL_ADC_MspInit+0xf8>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b0e:	4810      	ldr	r0, [pc, #64]	@ (8000b50 <HAL_ADC_MspInit+0xf8>)
 8000b10:	f000 fed2 	bl	80018b8 <HAL_DMA_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000b1a:	f7ff ff6f 	bl	80009fc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4a0b      	ldr	r2, [pc, #44]	@ (8000b50 <HAL_ADC_MspInit+0xf8>)
 8000b22:	639a      	str	r2, [r3, #56]	@ 0x38
 8000b24:	4a0a      	ldr	r2, [pc, #40]	@ (8000b50 <HAL_ADC_MspInit+0xf8>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DMA2 Stream4 interrupt Init */
    HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	203c      	movs	r0, #60	@ 0x3c
 8000b30:	f000 fe8b 	bl	800184a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000b34:	203c      	movs	r0, #60	@ 0x3c
 8000b36:	f000 fea4 	bl	8001882 <HAL_NVIC_EnableIRQ>


  }

}
 8000b3a:	bf00      	nop
 8000b3c:	3728      	adds	r7, #40	@ 0x28
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40012000 	.word	0x40012000
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40020000 	.word	0x40020000
 8000b50:	20000128 	.word	0x20000128
 8000b54:	40026470 	.word	0x40026470

08000b58 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	@ 0x28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a4c      	ldr	r2, [pc, #304]	@ (8000ca8 <HAL_UART_MspInit+0x150>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	f040 8091 	bne.w	8000c9e <HAL_UART_MspInit+0x146>
  {

    __HAL_RCC_USART2_CLK_ENABLE();
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	4b4a      	ldr	r3, [pc, #296]	@ (8000cac <HAL_UART_MspInit+0x154>)
 8000b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b84:	4a49      	ldr	r2, [pc, #292]	@ (8000cac <HAL_UART_MspInit+0x154>)
 8000b86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b8c:	4b47      	ldr	r3, [pc, #284]	@ (8000cac <HAL_UART_MspInit+0x154>)
 8000b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	4b43      	ldr	r3, [pc, #268]	@ (8000cac <HAL_UART_MspInit+0x154>)
 8000b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba0:	4a42      	ldr	r2, [pc, #264]	@ (8000cac <HAL_UART_MspInit+0x154>)
 8000ba2:	f043 0301 	orr.w	r3, r3, #1
 8000ba6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba8:	4b40      	ldr	r3, [pc, #256]	@ (8000cac <HAL_UART_MspInit+0x154>)
 8000baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bac:	f003 0301 	and.w	r3, r3, #1
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bb4:	230c      	movs	r3, #12
 8000bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bc4:	2307      	movs	r3, #7
 8000bc6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4838      	ldr	r0, [pc, #224]	@ (8000cb0 <HAL_UART_MspInit+0x158>)
 8000bd0:	f001 f9ee 	bl	8001fb0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000bd4:	4b37      	ldr	r3, [pc, #220]	@ (8000cb4 <HAL_UART_MspInit+0x15c>)
 8000bd6:	4a38      	ldr	r2, [pc, #224]	@ (8000cb8 <HAL_UART_MspInit+0x160>)
 8000bd8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000bda:	4b36      	ldr	r3, [pc, #216]	@ (8000cb4 <HAL_UART_MspInit+0x15c>)
 8000bdc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000be0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000be2:	4b34      	ldr	r3, [pc, #208]	@ (8000cb4 <HAL_UART_MspInit+0x15c>)
 8000be4:	2240      	movs	r2, #64	@ 0x40
 8000be6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000be8:	4b32      	ldr	r3, [pc, #200]	@ (8000cb4 <HAL_UART_MspInit+0x15c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000bee:	4b31      	ldr	r3, [pc, #196]	@ (8000cb4 <HAL_UART_MspInit+0x15c>)
 8000bf0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bf4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bf6:	4b2f      	ldr	r3, [pc, #188]	@ (8000cb4 <HAL_UART_MspInit+0x15c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bfc:	4b2d      	ldr	r3, [pc, #180]	@ (8000cb4 <HAL_UART_MspInit+0x15c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000c02:	4b2c      	ldr	r3, [pc, #176]	@ (8000cb4 <HAL_UART_MspInit+0x15c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c08:	4b2a      	ldr	r3, [pc, #168]	@ (8000cb4 <HAL_UART_MspInit+0x15c>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c0e:	4b29      	ldr	r3, [pc, #164]	@ (8000cb4 <HAL_UART_MspInit+0x15c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000c14:	4827      	ldr	r0, [pc, #156]	@ (8000cb4 <HAL_UART_MspInit+0x15c>)
 8000c16:	f000 fe4f 	bl	80018b8 <HAL_DMA_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000c20:	f7ff feec 	bl	80009fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a23      	ldr	r2, [pc, #140]	@ (8000cb4 <HAL_UART_MspInit+0x15c>)
 8000c28:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c2a:	4a22      	ldr	r2, [pc, #136]	@ (8000cb4 <HAL_UART_MspInit+0x15c>)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000c30:	4b22      	ldr	r3, [pc, #136]	@ (8000cbc <HAL_UART_MspInit+0x164>)
 8000c32:	4a23      	ldr	r2, [pc, #140]	@ (8000cc0 <HAL_UART_MspInit+0x168>)
 8000c34:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000c36:	4b21      	ldr	r3, [pc, #132]	@ (8000cbc <HAL_UART_MspInit+0x164>)
 8000c38:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000c3c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000cbc <HAL_UART_MspInit+0x164>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c44:	4b1d      	ldr	r3, [pc, #116]	@ (8000cbc <HAL_UART_MspInit+0x164>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cbc <HAL_UART_MspInit+0x164>)
 8000c4c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c50:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c52:	4b1a      	ldr	r3, [pc, #104]	@ (8000cbc <HAL_UART_MspInit+0x164>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c58:	4b18      	ldr	r3, [pc, #96]	@ (8000cbc <HAL_UART_MspInit+0x164>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000c5e:	4b17      	ldr	r3, [pc, #92]	@ (8000cbc <HAL_UART_MspInit+0x164>)
 8000c60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c64:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c66:	4b15      	ldr	r3, [pc, #84]	@ (8000cbc <HAL_UART_MspInit+0x164>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c6c:	4b13      	ldr	r3, [pc, #76]	@ (8000cbc <HAL_UART_MspInit+0x164>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000c72:	4812      	ldr	r0, [pc, #72]	@ (8000cbc <HAL_UART_MspInit+0x164>)
 8000c74:	f000 fe20 	bl	80018b8 <HAL_DMA_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000c7e:	f7ff febd 	bl	80009fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a0d      	ldr	r2, [pc, #52]	@ (8000cbc <HAL_UART_MspInit+0x164>)
 8000c86:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c88:	4a0c      	ldr	r2, [pc, #48]	@ (8000cbc <HAL_UART_MspInit+0x164>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2100      	movs	r1, #0
 8000c92:	2026      	movs	r0, #38	@ 0x26
 8000c94:	f000 fdd9 	bl	800184a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c98:	2026      	movs	r0, #38	@ 0x26
 8000c9a:	f000 fdf2 	bl	8001882 <HAL_NVIC_EnableIRQ>


  }

}
 8000c9e:	bf00      	nop
 8000ca0:	3728      	adds	r7, #40	@ 0x28
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40004400 	.word	0x40004400
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40020000 	.word	0x40020000
 8000cb4:	20000188 	.word	0x20000188
 8000cb8:	400260a0 	.word	0x400260a0
 8000cbc:	200001e8 	.word	0x200001e8
 8000cc0:	40026088 	.word	0x40026088

08000cc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <NMI_Handler+0x4>

08000ccc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <HardFault_Handler+0x4>

08000cd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <MemManage_Handler+0x4>

08000cdc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <BusFault_Handler+0x4>

08000ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <UsageFault_Handler+0x4>

08000cec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
	...

08000d18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  milisegundo++;
 8000d1c:	4b04      	ldr	r3, [pc, #16]	@ (8000d30 <SysTick_Handler+0x18>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	3301      	adds	r3, #1
 8000d22:	4a03      	ldr	r2, [pc, #12]	@ (8000d30 <SysTick_Handler+0x18>)
 8000d24:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d26:	f000 f8fb 	bl	8000f20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	2000024c 	.word	0x2000024c

08000d34 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000d38:	4802      	ldr	r0, [pc, #8]	@ (8000d44 <DMA1_Stream5_IRQHandler+0x10>)
 8000d3a:	f000 fefd 	bl	8001b38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200001e8 	.word	0x200001e8

08000d48 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000d4c:	4802      	ldr	r0, [pc, #8]	@ (8000d58 <DMA1_Stream6_IRQHandler+0x10>)
 8000d4e:	f000 fef3 	bl	8001b38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000188 	.word	0x20000188

08000d5c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000d60:	4802      	ldr	r0, [pc, #8]	@ (8000d6c <ADC_IRQHandler+0x10>)
 8000d62:	f000 f940 	bl	8000fe6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200000e0 	.word	0x200000e0

08000d70 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d74:	4802      	ldr	r0, [pc, #8]	@ (8000d80 <USART2_IRQHandler+0x10>)
 8000d76:	f001 fffb 	bl	8002d70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000098 	.word	0x20000098

08000d84 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d88:	4802      	ldr	r0, [pc, #8]	@ (8000d94 <DMA2_Stream4_IRQHandler+0x10>)
 8000d8a:	f000 fed5 	bl	8001b38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000128 	.word	0x20000128

08000d98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da0:	4a14      	ldr	r2, [pc, #80]	@ (8000df4 <_sbrk+0x5c>)
 8000da2:	4b15      	ldr	r3, [pc, #84]	@ (8000df8 <_sbrk+0x60>)
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dac:	4b13      	ldr	r3, [pc, #76]	@ (8000dfc <_sbrk+0x64>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d102      	bne.n	8000dba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db4:	4b11      	ldr	r3, [pc, #68]	@ (8000dfc <_sbrk+0x64>)
 8000db6:	4a12      	ldr	r2, [pc, #72]	@ (8000e00 <_sbrk+0x68>)
 8000db8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dba:	4b10      	ldr	r3, [pc, #64]	@ (8000dfc <_sbrk+0x64>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d207      	bcs.n	8000dd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dc8:	f002 ff22 	bl	8003c10 <__errno>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	220c      	movs	r2, #12
 8000dd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dd6:	e009      	b.n	8000dec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd8:	4b08      	ldr	r3, [pc, #32]	@ (8000dfc <_sbrk+0x64>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dde:	4b07      	ldr	r3, [pc, #28]	@ (8000dfc <_sbrk+0x64>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4413      	add	r3, r2
 8000de6:	4a05      	ldr	r2, [pc, #20]	@ (8000dfc <_sbrk+0x64>)
 8000de8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dea:	68fb      	ldr	r3, [r7, #12]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3718      	adds	r7, #24
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20020000 	.word	0x20020000
 8000df8:	00000400 	.word	0x00000400
 8000dfc:	20000250 	.word	0x20000250
 8000e00:	200003a0 	.word	0x200003a0

08000e04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e08:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <SystemInit+0x20>)
 8000e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e0e:	4a05      	ldr	r2, [pc, #20]	@ (8000e24 <SystemInit+0x20>)
 8000e10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e60 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e2c:	f7ff ffea 	bl	8000e04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e30:	480c      	ldr	r0, [pc, #48]	@ (8000e64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e32:	490d      	ldr	r1, [pc, #52]	@ (8000e68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e34:	4a0d      	ldr	r2, [pc, #52]	@ (8000e6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e38:	e002      	b.n	8000e40 <LoopCopyDataInit>

08000e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3e:	3304      	adds	r3, #4

08000e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e44:	d3f9      	bcc.n	8000e3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e46:	4a0a      	ldr	r2, [pc, #40]	@ (8000e70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e48:	4c0a      	ldr	r4, [pc, #40]	@ (8000e74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e4c:	e001      	b.n	8000e52 <LoopFillZerobss>

08000e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e50:	3204      	adds	r2, #4

08000e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e54:	d3fb      	bcc.n	8000e4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e56:	f002 fee1 	bl	8003c1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e5a:	f7ff fc8d 	bl	8000778 <main>
  bx  lr    
 8000e5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e68:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e6c:	080045b8 	.word	0x080045b8
  ldr r2, =_sbss
 8000e70:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e74:	200003a0 	.word	0x200003a0

08000e78 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e78:	e7fe      	b.n	8000e78 <CAN1_RX0_IRQHandler>
	...

08000e7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e80:	4b0e      	ldr	r3, [pc, #56]	@ (8000ebc <HAL_Init+0x40>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a0d      	ldr	r2, [pc, #52]	@ (8000ebc <HAL_Init+0x40>)
 8000e86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ebc <HAL_Init+0x40>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a0a      	ldr	r2, [pc, #40]	@ (8000ebc <HAL_Init+0x40>)
 8000e92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e98:	4b08      	ldr	r3, [pc, #32]	@ (8000ebc <HAL_Init+0x40>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a07      	ldr	r2, [pc, #28]	@ (8000ebc <HAL_Init+0x40>)
 8000e9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ea2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea4:	2003      	movs	r0, #3
 8000ea6:	f000 fcc5 	bl	8001834 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eaa:	200f      	movs	r0, #15
 8000eac:	f000 f808 	bl	8000ec0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb0:	f7ff fdaa 	bl	8000a08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40023c00 	.word	0x40023c00

08000ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec8:	4b12      	ldr	r3, [pc, #72]	@ (8000f14 <HAL_InitTick+0x54>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	4b12      	ldr	r3, [pc, #72]	@ (8000f18 <HAL_InitTick+0x58>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ed6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 fcdd 	bl	800189e <HAL_SYSTICK_Config>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e00e      	b.n	8000f0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2b0f      	cmp	r3, #15
 8000ef2:	d80a      	bhi.n	8000f0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	6879      	ldr	r1, [r7, #4]
 8000ef8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000efc:	f000 fca5 	bl	800184a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f00:	4a06      	ldr	r2, [pc, #24]	@ (8000f1c <HAL_InitTick+0x5c>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f06:	2300      	movs	r3, #0
 8000f08:	e000      	b.n	8000f0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000000 	.word	0x20000000
 8000f18:	20000008 	.word	0x20000008
 8000f1c:	20000004 	.word	0x20000004

08000f20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f24:	4b06      	ldr	r3, [pc, #24]	@ (8000f40 <HAL_IncTick+0x20>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <HAL_IncTick+0x24>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4413      	add	r3, r2
 8000f30:	4a04      	ldr	r2, [pc, #16]	@ (8000f44 <HAL_IncTick+0x24>)
 8000f32:	6013      	str	r3, [r2, #0]
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	20000008 	.word	0x20000008
 8000f44:	20000254 	.word	0x20000254

08000f48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f4c:	4b03      	ldr	r3, [pc, #12]	@ (8000f5c <HAL_GetTick+0x14>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	20000254 	.word	0x20000254

08000f60 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d101      	bne.n	8000f76 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e033      	b.n	8000fde <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d109      	bne.n	8000f92 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f7ff fd6a 	bl	8000a58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2200      	movs	r2, #0
 8000f88:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f96:	f003 0310 	and.w	r3, r3, #16
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d118      	bne.n	8000fd0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000fa6:	f023 0302 	bic.w	r3, r3, #2
 8000faa:	f043 0202 	orr.w	r2, r3, #2
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f000 fa68 	bl	8001488 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc2:	f023 0303 	bic.w	r3, r3, #3
 8000fc6:	f043 0201 	orr.w	r2, r3, #1
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	641a      	str	r2, [r3, #64]	@ 0x40
 8000fce:	e001      	b.n	8000fd4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b086      	sub	sp, #24
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	f003 0302 	and.w	r3, r3, #2
 800100c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	f003 0320 	and.w	r3, r3, #32
 8001014:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d049      	beq.n	80010b0 <HAL_ADC_IRQHandler+0xca>
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d046      	beq.n	80010b0 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001026:	f003 0310 	and.w	r3, r3, #16
 800102a:	2b00      	cmp	r3, #0
 800102c:	d105      	bne.n	800103a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001032:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d12b      	bne.n	80010a0 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800104c:	2b00      	cmp	r3, #0
 800104e:	d127      	bne.n	80010a0 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001056:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800105a:	2b00      	cmp	r3, #0
 800105c:	d006      	beq.n	800106c <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001068:	2b00      	cmp	r3, #0
 800106a:	d119      	bne.n	80010a0 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	685a      	ldr	r2, [r3, #4]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f022 0220 	bic.w	r2, r2, #32
 800107a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001080:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d105      	bne.n	80010a0 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001098:	f043 0201 	orr.w	r2, r3, #1
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f000 f8b0 	bl	8001206 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f06f 0212 	mvn.w	r2, #18
 80010ae:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f003 0304 	and.w	r3, r3, #4
 80010b6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010be:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d057      	beq.n	8001176 <HAL_ADC_IRQHandler+0x190>
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d054      	beq.n	8001176 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d0:	f003 0310 	and.w	r3, r3, #16
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d105      	bne.n	80010e4 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010dc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d139      	bne.n	8001166 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010f8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d006      	beq.n	800110e <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800110a:	2b00      	cmp	r3, #0
 800110c:	d12b      	bne.n	8001166 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001118:	2b00      	cmp	r3, #0
 800111a:	d124      	bne.n	8001166 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001126:	2b00      	cmp	r3, #0
 8001128:	d11d      	bne.n	8001166 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800112e:	2b00      	cmp	r3, #0
 8001130:	d119      	bne.n	8001166 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	685a      	ldr	r2, [r3, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001140:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001146:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001152:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001156:	2b00      	cmp	r3, #0
 8001158:	d105      	bne.n	8001166 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115e:	f043 0201 	orr.w	r2, r3, #1
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f000 fa8a 	bl	8001680 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f06f 020c 	mvn.w	r2, #12
 8001174:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001184:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d017      	beq.n	80011bc <HAL_ADC_IRQHandler+0x1d6>
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d014      	beq.n	80011bc <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	2b01      	cmp	r3, #1
 800119e:	d10d      	bne.n	80011bc <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f000 f834 	bl	800121a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f06f 0201 	mvn.w	r2, #1
 80011ba:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f003 0320 	and.w	r3, r3, #32
 80011c2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80011ca:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d015      	beq.n	80011fe <HAL_ADC_IRQHandler+0x218>
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d012      	beq.n	80011fe <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011dc:	f043 0202 	orr.w	r2, r3, #2
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f06f 0220 	mvn.w	r2, #32
 80011ec:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f000 f81d 	bl	800122e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f06f 0220 	mvn.w	r2, #32
 80011fc:	601a      	str	r2, [r3, #0]
  }
}
 80011fe:	bf00      	nop
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800121a:	b480      	push	{r7}
 800121c:	b083      	sub	sp, #12
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
	...

08001244 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800124e:	2300      	movs	r3, #0
 8001250:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001258:	2b01      	cmp	r3, #1
 800125a:	d101      	bne.n	8001260 <HAL_ADC_ConfigChannel+0x1c>
 800125c:	2302      	movs	r3, #2
 800125e:	e105      	b.n	800146c <HAL_ADC_ConfigChannel+0x228>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2201      	movs	r2, #1
 8001264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b09      	cmp	r3, #9
 800126e:	d925      	bls.n	80012bc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	68d9      	ldr	r1, [r3, #12]
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	b29b      	uxth	r3, r3
 800127c:	461a      	mov	r2, r3
 800127e:	4613      	mov	r3, r2
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	4413      	add	r3, r2
 8001284:	3b1e      	subs	r3, #30
 8001286:	2207      	movs	r2, #7
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43da      	mvns	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	400a      	ands	r2, r1
 8001294:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	68d9      	ldr	r1, [r3, #12]
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	689a      	ldr	r2, [r3, #8]
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	4618      	mov	r0, r3
 80012a8:	4603      	mov	r3, r0
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	4403      	add	r3, r0
 80012ae:	3b1e      	subs	r3, #30
 80012b0:	409a      	lsls	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	430a      	orrs	r2, r1
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	e022      	b.n	8001302 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	6919      	ldr	r1, [r3, #16]
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	461a      	mov	r2, r3
 80012ca:	4613      	mov	r3, r2
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	4413      	add	r3, r2
 80012d0:	2207      	movs	r2, #7
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43da      	mvns	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	400a      	ands	r2, r1
 80012de:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6919      	ldr	r1, [r3, #16]
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	689a      	ldr	r2, [r3, #8]
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	4618      	mov	r0, r3
 80012f2:	4603      	mov	r3, r0
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	4403      	add	r3, r0
 80012f8:	409a      	lsls	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	430a      	orrs	r2, r1
 8001300:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2b06      	cmp	r3, #6
 8001308:	d824      	bhi.n	8001354 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685a      	ldr	r2, [r3, #4]
 8001314:	4613      	mov	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	4413      	add	r3, r2
 800131a:	3b05      	subs	r3, #5
 800131c:	221f      	movs	r2, #31
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43da      	mvns	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	400a      	ands	r2, r1
 800132a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	b29b      	uxth	r3, r3
 8001338:	4618      	mov	r0, r3
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685a      	ldr	r2, [r3, #4]
 800133e:	4613      	mov	r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	3b05      	subs	r3, #5
 8001346:	fa00 f203 	lsl.w	r2, r0, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	430a      	orrs	r2, r1
 8001350:	635a      	str	r2, [r3, #52]	@ 0x34
 8001352:	e04c      	b.n	80013ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	2b0c      	cmp	r3, #12
 800135a:	d824      	bhi.n	80013a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685a      	ldr	r2, [r3, #4]
 8001366:	4613      	mov	r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4413      	add	r3, r2
 800136c:	3b23      	subs	r3, #35	@ 0x23
 800136e:	221f      	movs	r2, #31
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	43da      	mvns	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	400a      	ands	r2, r1
 800137c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	b29b      	uxth	r3, r3
 800138a:	4618      	mov	r0, r3
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685a      	ldr	r2, [r3, #4]
 8001390:	4613      	mov	r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	4413      	add	r3, r2
 8001396:	3b23      	subs	r3, #35	@ 0x23
 8001398:	fa00 f203 	lsl.w	r2, r0, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	430a      	orrs	r2, r1
 80013a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80013a4:	e023      	b.n	80013ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685a      	ldr	r2, [r3, #4]
 80013b0:	4613      	mov	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	4413      	add	r3, r2
 80013b6:	3b41      	subs	r3, #65	@ 0x41
 80013b8:	221f      	movs	r2, #31
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43da      	mvns	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	400a      	ands	r2, r1
 80013c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	4618      	mov	r0, r3
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685a      	ldr	r2, [r3, #4]
 80013da:	4613      	mov	r3, r2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	4413      	add	r3, r2
 80013e0:	3b41      	subs	r3, #65	@ 0x41
 80013e2:	fa00 f203 	lsl.w	r2, r0, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	430a      	orrs	r2, r1
 80013ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013ee:	4b22      	ldr	r3, [pc, #136]	@ (8001478 <HAL_ADC_ConfigChannel+0x234>)
 80013f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a21      	ldr	r2, [pc, #132]	@ (800147c <HAL_ADC_ConfigChannel+0x238>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d109      	bne.n	8001410 <HAL_ADC_ConfigChannel+0x1cc>
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b12      	cmp	r3, #18
 8001402:	d105      	bne.n	8001410 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a19      	ldr	r2, [pc, #100]	@ (800147c <HAL_ADC_ConfigChannel+0x238>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d123      	bne.n	8001462 <HAL_ADC_ConfigChannel+0x21e>
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2b10      	cmp	r3, #16
 8001420:	d003      	beq.n	800142a <HAL_ADC_ConfigChannel+0x1e6>
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2b11      	cmp	r3, #17
 8001428:	d11b      	bne.n	8001462 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2b10      	cmp	r3, #16
 800143c:	d111      	bne.n	8001462 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800143e:	4b10      	ldr	r3, [pc, #64]	@ (8001480 <HAL_ADC_ConfigChannel+0x23c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a10      	ldr	r2, [pc, #64]	@ (8001484 <HAL_ADC_ConfigChannel+0x240>)
 8001444:	fba2 2303 	umull	r2, r3, r2, r3
 8001448:	0c9a      	lsrs	r2, r3, #18
 800144a:	4613      	mov	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	4413      	add	r3, r2
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001454:	e002      	b.n	800145c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	3b01      	subs	r3, #1
 800145a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1f9      	bne.n	8001456 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	3714      	adds	r7, #20
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	40012300 	.word	0x40012300
 800147c:	40012000 	.word	0x40012000
 8001480:	20000000 	.word	0x20000000
 8001484:	431bde83 	.word	0x431bde83

08001488 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001490:	4b79      	ldr	r3, [pc, #484]	@ (8001678 <ADC_Init+0x1f0>)
 8001492:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	431a      	orrs	r2, r3
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	685a      	ldr	r2, [r3, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80014bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6859      	ldr	r1, [r3, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	691b      	ldr	r3, [r3, #16]
 80014c8:	021a      	lsls	r2, r3, #8
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	430a      	orrs	r2, r1
 80014d0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80014e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	6859      	ldr	r1, [r3, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	430a      	orrs	r2, r1
 80014f2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001502:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6899      	ldr	r1, [r3, #8]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	68da      	ldr	r2, [r3, #12]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	430a      	orrs	r2, r1
 8001514:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800151a:	4a58      	ldr	r2, [pc, #352]	@ (800167c <ADC_Init+0x1f4>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d022      	beq.n	8001566 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	689a      	ldr	r2, [r3, #8]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800152e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6899      	ldr	r1, [r3, #8]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	430a      	orrs	r2, r1
 8001540:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001550:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6899      	ldr	r1, [r3, #8]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	430a      	orrs	r2, r1
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	e00f      	b.n	8001586 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001574:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	689a      	ldr	r2, [r3, #8]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001584:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 0202 	bic.w	r2, r2, #2
 8001594:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6899      	ldr	r1, [r3, #8]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	7e1b      	ldrb	r3, [r3, #24]
 80015a0:	005a      	lsls	r2, r3, #1
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d01b      	beq.n	80015ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80015c2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80015d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6859      	ldr	r1, [r3, #4]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015de:	3b01      	subs	r3, #1
 80015e0:	035a      	lsls	r2, r3, #13
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	430a      	orrs	r2, r1
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	e007      	b.n	80015fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015fa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800160a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	3b01      	subs	r3, #1
 8001618:	051a      	lsls	r2, r3, #20
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	430a      	orrs	r2, r1
 8001620:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	689a      	ldr	r2, [r3, #8]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001630:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6899      	ldr	r1, [r3, #8]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800163e:	025a      	lsls	r2, r3, #9
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001656:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6899      	ldr	r1, [r3, #8]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	029a      	lsls	r2, r3, #10
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	430a      	orrs	r2, r1
 800166a:	609a      	str	r2, [r3, #8]
}
 800166c:	bf00      	nop
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	40012300 	.word	0x40012300
 800167c:	0f000001 	.word	0x0f000001

08001680 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016a4:	4b0c      	ldr	r3, [pc, #48]	@ (80016d8 <__NVIC_SetPriorityGrouping+0x44>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016aa:	68ba      	ldr	r2, [r7, #8]
 80016ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016b0:	4013      	ands	r3, r2
 80016b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016c6:	4a04      	ldr	r2, [pc, #16]	@ (80016d8 <__NVIC_SetPriorityGrouping+0x44>)
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	60d3      	str	r3, [r2, #12]
}
 80016cc:	bf00      	nop
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016e0:	4b04      	ldr	r3, [pc, #16]	@ (80016f4 <__NVIC_GetPriorityGrouping+0x18>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	0a1b      	lsrs	r3, r3, #8
 80016e6:	f003 0307 	and.w	r3, r3, #7
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	2b00      	cmp	r3, #0
 8001708:	db0b      	blt.n	8001722 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	f003 021f 	and.w	r2, r3, #31
 8001710:	4907      	ldr	r1, [pc, #28]	@ (8001730 <__NVIC_EnableIRQ+0x38>)
 8001712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001716:	095b      	lsrs	r3, r3, #5
 8001718:	2001      	movs	r0, #1
 800171a:	fa00 f202 	lsl.w	r2, r0, r2
 800171e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	e000e100 	.word	0xe000e100

08001734 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	6039      	str	r1, [r7, #0]
 800173e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001744:	2b00      	cmp	r3, #0
 8001746:	db0a      	blt.n	800175e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	b2da      	uxtb	r2, r3
 800174c:	490c      	ldr	r1, [pc, #48]	@ (8001780 <__NVIC_SetPriority+0x4c>)
 800174e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001752:	0112      	lsls	r2, r2, #4
 8001754:	b2d2      	uxtb	r2, r2
 8001756:	440b      	add	r3, r1
 8001758:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800175c:	e00a      	b.n	8001774 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	b2da      	uxtb	r2, r3
 8001762:	4908      	ldr	r1, [pc, #32]	@ (8001784 <__NVIC_SetPriority+0x50>)
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	f003 030f 	and.w	r3, r3, #15
 800176a:	3b04      	subs	r3, #4
 800176c:	0112      	lsls	r2, r2, #4
 800176e:	b2d2      	uxtb	r2, r2
 8001770:	440b      	add	r3, r1
 8001772:	761a      	strb	r2, [r3, #24]
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	e000e100 	.word	0xe000e100
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001788:	b480      	push	{r7}
 800178a:	b089      	sub	sp, #36	@ 0x24
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	f1c3 0307 	rsb	r3, r3, #7
 80017a2:	2b04      	cmp	r3, #4
 80017a4:	bf28      	it	cs
 80017a6:	2304      	movcs	r3, #4
 80017a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3304      	adds	r3, #4
 80017ae:	2b06      	cmp	r3, #6
 80017b0:	d902      	bls.n	80017b8 <NVIC_EncodePriority+0x30>
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	3b03      	subs	r3, #3
 80017b6:	e000      	b.n	80017ba <NVIC_EncodePriority+0x32>
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43da      	mvns	r2, r3
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	401a      	ands	r2, r3
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	fa01 f303 	lsl.w	r3, r1, r3
 80017da:	43d9      	mvns	r1, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e0:	4313      	orrs	r3, r2
         );
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3724      	adds	r7, #36	@ 0x24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
	...

080017f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3b01      	subs	r3, #1
 80017fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001800:	d301      	bcc.n	8001806 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001802:	2301      	movs	r3, #1
 8001804:	e00f      	b.n	8001826 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001806:	4a0a      	ldr	r2, [pc, #40]	@ (8001830 <SysTick_Config+0x40>)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3b01      	subs	r3, #1
 800180c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800180e:	210f      	movs	r1, #15
 8001810:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001814:	f7ff ff8e 	bl	8001734 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001818:	4b05      	ldr	r3, [pc, #20]	@ (8001830 <SysTick_Config+0x40>)
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800181e:	4b04      	ldr	r3, [pc, #16]	@ (8001830 <SysTick_Config+0x40>)
 8001820:	2207      	movs	r2, #7
 8001822:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	e000e010 	.word	0xe000e010

08001834 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff ff29 	bl	8001694 <__NVIC_SetPriorityGrouping>
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800184a:	b580      	push	{r7, lr}
 800184c:	b086      	sub	sp, #24
 800184e:	af00      	add	r7, sp, #0
 8001850:	4603      	mov	r3, r0
 8001852:	60b9      	str	r1, [r7, #8]
 8001854:	607a      	str	r2, [r7, #4]
 8001856:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800185c:	f7ff ff3e 	bl	80016dc <__NVIC_GetPriorityGrouping>
 8001860:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	68b9      	ldr	r1, [r7, #8]
 8001866:	6978      	ldr	r0, [r7, #20]
 8001868:	f7ff ff8e 	bl	8001788 <NVIC_EncodePriority>
 800186c:	4602      	mov	r2, r0
 800186e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001872:	4611      	mov	r1, r2
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ff5d 	bl	8001734 <__NVIC_SetPriority>
}
 800187a:	bf00      	nop
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
 8001888:	4603      	mov	r3, r0
 800188a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800188c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff ff31 	bl	80016f8 <__NVIC_EnableIRQ>
}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b082      	sub	sp, #8
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7ff ffa2 	bl	80017f0 <SysTick_Config>
 80018ac:	4603      	mov	r3, r0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
	...

080018b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018c4:	f7ff fb40 	bl	8000f48 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d101      	bne.n	80018d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e099      	b.n	8001a08 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2202      	movs	r2, #2
 80018d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f022 0201 	bic.w	r2, r2, #1
 80018f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018f4:	e00f      	b.n	8001916 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018f6:	f7ff fb27 	bl	8000f48 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b05      	cmp	r3, #5
 8001902:	d908      	bls.n	8001916 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2220      	movs	r2, #32
 8001908:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2203      	movs	r2, #3
 800190e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e078      	b.n	8001a08 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1e8      	bne.n	80018f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800192c:	697a      	ldr	r2, [r7, #20]
 800192e:	4b38      	ldr	r3, [pc, #224]	@ (8001a10 <HAL_DMA_Init+0x158>)
 8001930:	4013      	ands	r3, r2
 8001932:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685a      	ldr	r2, [r3, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001942:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800194e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800195a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	4313      	orrs	r3, r2
 8001966:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196c:	2b04      	cmp	r3, #4
 800196e:	d107      	bne.n	8001980 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001978:	4313      	orrs	r3, r2
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	4313      	orrs	r3, r2
 800197e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	697a      	ldr	r2, [r7, #20]
 8001986:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	f023 0307 	bic.w	r3, r3, #7
 8001996:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800199c:	697a      	ldr	r2, [r7, #20]
 800199e:	4313      	orrs	r3, r2
 80019a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	d117      	bne.n	80019da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d00e      	beq.n	80019da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f000 fa7b 	bl	8001eb8 <DMA_CheckFifoParam>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d008      	beq.n	80019da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2240      	movs	r2, #64	@ 0x40
 80019cc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2201      	movs	r2, #1
 80019d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80019d6:	2301      	movs	r3, #1
 80019d8:	e016      	b.n	8001a08 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 fa32 	bl	8001e4c <DMA_CalcBaseAndBitshift>
 80019e8:	4603      	mov	r3, r0
 80019ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019f0:	223f      	movs	r2, #63	@ 0x3f
 80019f2:	409a      	lsls	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2201      	movs	r2, #1
 8001a02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	f010803f 	.word	0xf010803f

08001a14 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a20:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a22:	f7ff fa91 	bl	8000f48 <HAL_GetTick>
 8001a26:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d008      	beq.n	8001a46 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2280      	movs	r2, #128	@ 0x80
 8001a38:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e052      	b.n	8001aec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f022 0216 	bic.w	r2, r2, #22
 8001a54:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	695a      	ldr	r2, [r3, #20]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a64:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d103      	bne.n	8001a76 <HAL_DMA_Abort+0x62>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d007      	beq.n	8001a86 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f022 0208 	bic.w	r2, r2, #8
 8001a84:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f022 0201 	bic.w	r2, r2, #1
 8001a94:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a96:	e013      	b.n	8001ac0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a98:	f7ff fa56 	bl	8000f48 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b05      	cmp	r3, #5
 8001aa4:	d90c      	bls.n	8001ac0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2220      	movs	r2, #32
 8001aaa:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2203      	movs	r2, #3
 8001ab0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e015      	b.n	8001aec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1e4      	bne.n	8001a98 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ad2:	223f      	movs	r2, #63	@ 0x3f
 8001ad4:	409a      	lsls	r2, r3
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d004      	beq.n	8001b12 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2280      	movs	r2, #128	@ 0x80
 8001b0c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e00c      	b.n	8001b2c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2205      	movs	r2, #5
 8001b16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f022 0201 	bic.w	r2, r2, #1
 8001b28:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b44:	4b8e      	ldr	r3, [pc, #568]	@ (8001d80 <HAL_DMA_IRQHandler+0x248>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a8e      	ldr	r2, [pc, #568]	@ (8001d84 <HAL_DMA_IRQHandler+0x24c>)
 8001b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4e:	0a9b      	lsrs	r3, r3, #10
 8001b50:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b56:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b62:	2208      	movs	r2, #8
 8001b64:	409a      	lsls	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d01a      	beq.n	8001ba4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d013      	beq.n	8001ba4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 0204 	bic.w	r2, r2, #4
 8001b8a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b90:	2208      	movs	r2, #8
 8001b92:	409a      	lsls	r2, r3
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b9c:	f043 0201 	orr.w	r2, r3, #1
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ba8:	2201      	movs	r2, #1
 8001baa:	409a      	lsls	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d012      	beq.n	8001bda <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d00b      	beq.n	8001bda <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	409a      	lsls	r2, r3
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bd2:	f043 0202 	orr.w	r2, r3, #2
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bde:	2204      	movs	r2, #4
 8001be0:	409a      	lsls	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	4013      	ands	r3, r2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d012      	beq.n	8001c10 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00b      	beq.n	8001c10 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bfc:	2204      	movs	r2, #4
 8001bfe:	409a      	lsls	r2, r3
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c08:	f043 0204 	orr.w	r2, r3, #4
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c14:	2210      	movs	r2, #16
 8001c16:	409a      	lsls	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d043      	beq.n	8001ca8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d03c      	beq.n	8001ca8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c32:	2210      	movs	r2, #16
 8001c34:	409a      	lsls	r2, r3
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d018      	beq.n	8001c7a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d108      	bne.n	8001c68 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d024      	beq.n	8001ca8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	4798      	blx	r3
 8001c66:	e01f      	b.n	8001ca8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d01b      	beq.n	8001ca8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	4798      	blx	r3
 8001c78:	e016      	b.n	8001ca8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d107      	bne.n	8001c98 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 0208 	bic.w	r2, r2, #8
 8001c96:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d003      	beq.n	8001ca8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cac:	2220      	movs	r2, #32
 8001cae:	409a      	lsls	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f000 808f 	beq.w	8001dd8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0310 	and.w	r3, r3, #16
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f000 8087 	beq.w	8001dd8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cce:	2220      	movs	r2, #32
 8001cd0:	409a      	lsls	r2, r3
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b05      	cmp	r3, #5
 8001ce0:	d136      	bne.n	8001d50 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 0216 	bic.w	r2, r2, #22
 8001cf0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	695a      	ldr	r2, [r3, #20]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d00:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d103      	bne.n	8001d12 <HAL_DMA_IRQHandler+0x1da>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d007      	beq.n	8001d22 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f022 0208 	bic.w	r2, r2, #8
 8001d20:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d26:	223f      	movs	r2, #63	@ 0x3f
 8001d28:	409a      	lsls	r2, r3
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d07e      	beq.n	8001e44 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	4798      	blx	r3
        }
        return;
 8001d4e:	e079      	b.n	8001e44 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d01d      	beq.n	8001d9a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d10d      	bne.n	8001d88 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d031      	beq.n	8001dd8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	4798      	blx	r3
 8001d7c:	e02c      	b.n	8001dd8 <HAL_DMA_IRQHandler+0x2a0>
 8001d7e:	bf00      	nop
 8001d80:	20000000 	.word	0x20000000
 8001d84:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d023      	beq.n	8001dd8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	4798      	blx	r3
 8001d98:	e01e      	b.n	8001dd8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d10f      	bne.n	8001dc8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 0210 	bic.w	r2, r2, #16
 8001db6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d032      	beq.n	8001e46 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d022      	beq.n	8001e32 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2205      	movs	r2, #5
 8001df0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0201 	bic.w	r2, r2, #1
 8001e02:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	3301      	adds	r3, #1
 8001e08:	60bb      	str	r3, [r7, #8]
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d307      	bcc.n	8001e20 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f2      	bne.n	8001e04 <HAL_DMA_IRQHandler+0x2cc>
 8001e1e:	e000      	b.n	8001e22 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e20:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d005      	beq.n	8001e46 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	4798      	blx	r3
 8001e42:	e000      	b.n	8001e46 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e44:	bf00      	nop
    }
  }
}
 8001e46:	3718      	adds	r7, #24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	3b10      	subs	r3, #16
 8001e5c:	4a14      	ldr	r2, [pc, #80]	@ (8001eb0 <DMA_CalcBaseAndBitshift+0x64>)
 8001e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e62:	091b      	lsrs	r3, r3, #4
 8001e64:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e66:	4a13      	ldr	r2, [pc, #76]	@ (8001eb4 <DMA_CalcBaseAndBitshift+0x68>)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2b03      	cmp	r3, #3
 8001e78:	d909      	bls.n	8001e8e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001e82:	f023 0303 	bic.w	r3, r3, #3
 8001e86:	1d1a      	adds	r2, r3, #4
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	659a      	str	r2, [r3, #88]	@ 0x58
 8001e8c:	e007      	b.n	8001e9e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001e96:	f023 0303 	bic.w	r3, r3, #3
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	aaaaaaab 	.word	0xaaaaaaab
 8001eb4:	0800456c 	.word	0x0800456c

08001eb8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d11f      	bne.n	8001f12 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	2b03      	cmp	r3, #3
 8001ed6:	d856      	bhi.n	8001f86 <DMA_CheckFifoParam+0xce>
 8001ed8:	a201      	add	r2, pc, #4	@ (adr r2, 8001ee0 <DMA_CheckFifoParam+0x28>)
 8001eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ede:	bf00      	nop
 8001ee0:	08001ef1 	.word	0x08001ef1
 8001ee4:	08001f03 	.word	0x08001f03
 8001ee8:	08001ef1 	.word	0x08001ef1
 8001eec:	08001f87 	.word	0x08001f87
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d046      	beq.n	8001f8a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f00:	e043      	b.n	8001f8a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f06:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001f0a:	d140      	bne.n	8001f8e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f10:	e03d      	b.n	8001f8e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f1a:	d121      	bne.n	8001f60 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	2b03      	cmp	r3, #3
 8001f20:	d837      	bhi.n	8001f92 <DMA_CheckFifoParam+0xda>
 8001f22:	a201      	add	r2, pc, #4	@ (adr r2, 8001f28 <DMA_CheckFifoParam+0x70>)
 8001f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f28:	08001f39 	.word	0x08001f39
 8001f2c:	08001f3f 	.word	0x08001f3f
 8001f30:	08001f39 	.word	0x08001f39
 8001f34:	08001f51 	.word	0x08001f51
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	73fb      	strb	r3, [r7, #15]
      break;
 8001f3c:	e030      	b.n	8001fa0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f42:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d025      	beq.n	8001f96 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f4e:	e022      	b.n	8001f96 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f54:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001f58:	d11f      	bne.n	8001f9a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f5e:	e01c      	b.n	8001f9a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d903      	bls.n	8001f6e <DMA_CheckFifoParam+0xb6>
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	2b03      	cmp	r3, #3
 8001f6a:	d003      	beq.n	8001f74 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f6c:	e018      	b.n	8001fa0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	73fb      	strb	r3, [r7, #15]
      break;
 8001f72:	e015      	b.n	8001fa0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d00e      	beq.n	8001f9e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	73fb      	strb	r3, [r7, #15]
      break;
 8001f84:	e00b      	b.n	8001f9e <DMA_CheckFifoParam+0xe6>
      break;
 8001f86:	bf00      	nop
 8001f88:	e00a      	b.n	8001fa0 <DMA_CheckFifoParam+0xe8>
      break;
 8001f8a:	bf00      	nop
 8001f8c:	e008      	b.n	8001fa0 <DMA_CheckFifoParam+0xe8>
      break;
 8001f8e:	bf00      	nop
 8001f90:	e006      	b.n	8001fa0 <DMA_CheckFifoParam+0xe8>
      break;
 8001f92:	bf00      	nop
 8001f94:	e004      	b.n	8001fa0 <DMA_CheckFifoParam+0xe8>
      break;
 8001f96:	bf00      	nop
 8001f98:	e002      	b.n	8001fa0 <DMA_CheckFifoParam+0xe8>
      break;   
 8001f9a:	bf00      	nop
 8001f9c:	e000      	b.n	8001fa0 <DMA_CheckFifoParam+0xe8>
      break;
 8001f9e:	bf00      	nop
    }
  } 
  
  return status; 
 8001fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3714      	adds	r7, #20
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop

08001fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b089      	sub	sp, #36	@ 0x24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
 8001fca:	e16b      	b.n	80022a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fcc:	2201      	movs	r2, #1
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	f040 815a 	bne.w	800229e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d005      	beq.n	8002002 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d130      	bne.n	8002064 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	2203      	movs	r2, #3
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43db      	mvns	r3, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4013      	ands	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	68da      	ldr	r2, [r3, #12]
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4313      	orrs	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002038:	2201      	movs	r2, #1
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4013      	ands	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	091b      	lsrs	r3, r3, #4
 800204e:	f003 0201 	and.w	r2, r3, #1
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4313      	orrs	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 0303 	and.w	r3, r3, #3
 800206c:	2b03      	cmp	r3, #3
 800206e:	d017      	beq.n	80020a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	2203      	movs	r2, #3
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4013      	ands	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4313      	orrs	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 0303 	and.w	r3, r3, #3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d123      	bne.n	80020f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	08da      	lsrs	r2, r3, #3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3208      	adds	r2, #8
 80020b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	220f      	movs	r2, #15
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	691a      	ldr	r2, [r3, #16]
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	08da      	lsrs	r2, r3, #3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	3208      	adds	r2, #8
 80020ee:	69b9      	ldr	r1, [r7, #24]
 80020f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	2203      	movs	r2, #3
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 0203 	and.w	r2, r3, #3
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002130:	2b00      	cmp	r3, #0
 8002132:	f000 80b4 	beq.w	800229e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	4b60      	ldr	r3, [pc, #384]	@ (80022bc <HAL_GPIO_Init+0x30c>)
 800213c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800213e:	4a5f      	ldr	r2, [pc, #380]	@ (80022bc <HAL_GPIO_Init+0x30c>)
 8002140:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002144:	6453      	str	r3, [r2, #68]	@ 0x44
 8002146:	4b5d      	ldr	r3, [pc, #372]	@ (80022bc <HAL_GPIO_Init+0x30c>)
 8002148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800214a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002152:	4a5b      	ldr	r2, [pc, #364]	@ (80022c0 <HAL_GPIO_Init+0x310>)
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	089b      	lsrs	r3, r3, #2
 8002158:	3302      	adds	r3, #2
 800215a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800215e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	f003 0303 	and.w	r3, r3, #3
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	220f      	movs	r2, #15
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43db      	mvns	r3, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4013      	ands	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a52      	ldr	r2, [pc, #328]	@ (80022c4 <HAL_GPIO_Init+0x314>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d02b      	beq.n	80021d6 <HAL_GPIO_Init+0x226>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a51      	ldr	r2, [pc, #324]	@ (80022c8 <HAL_GPIO_Init+0x318>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d025      	beq.n	80021d2 <HAL_GPIO_Init+0x222>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a50      	ldr	r2, [pc, #320]	@ (80022cc <HAL_GPIO_Init+0x31c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d01f      	beq.n	80021ce <HAL_GPIO_Init+0x21e>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a4f      	ldr	r2, [pc, #316]	@ (80022d0 <HAL_GPIO_Init+0x320>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d019      	beq.n	80021ca <HAL_GPIO_Init+0x21a>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a4e      	ldr	r2, [pc, #312]	@ (80022d4 <HAL_GPIO_Init+0x324>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d013      	beq.n	80021c6 <HAL_GPIO_Init+0x216>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a4d      	ldr	r2, [pc, #308]	@ (80022d8 <HAL_GPIO_Init+0x328>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d00d      	beq.n	80021c2 <HAL_GPIO_Init+0x212>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a4c      	ldr	r2, [pc, #304]	@ (80022dc <HAL_GPIO_Init+0x32c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d007      	beq.n	80021be <HAL_GPIO_Init+0x20e>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a4b      	ldr	r2, [pc, #300]	@ (80022e0 <HAL_GPIO_Init+0x330>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d101      	bne.n	80021ba <HAL_GPIO_Init+0x20a>
 80021b6:	2307      	movs	r3, #7
 80021b8:	e00e      	b.n	80021d8 <HAL_GPIO_Init+0x228>
 80021ba:	2308      	movs	r3, #8
 80021bc:	e00c      	b.n	80021d8 <HAL_GPIO_Init+0x228>
 80021be:	2306      	movs	r3, #6
 80021c0:	e00a      	b.n	80021d8 <HAL_GPIO_Init+0x228>
 80021c2:	2305      	movs	r3, #5
 80021c4:	e008      	b.n	80021d8 <HAL_GPIO_Init+0x228>
 80021c6:	2304      	movs	r3, #4
 80021c8:	e006      	b.n	80021d8 <HAL_GPIO_Init+0x228>
 80021ca:	2303      	movs	r3, #3
 80021cc:	e004      	b.n	80021d8 <HAL_GPIO_Init+0x228>
 80021ce:	2302      	movs	r3, #2
 80021d0:	e002      	b.n	80021d8 <HAL_GPIO_Init+0x228>
 80021d2:	2301      	movs	r3, #1
 80021d4:	e000      	b.n	80021d8 <HAL_GPIO_Init+0x228>
 80021d6:	2300      	movs	r3, #0
 80021d8:	69fa      	ldr	r2, [r7, #28]
 80021da:	f002 0203 	and.w	r2, r2, #3
 80021de:	0092      	lsls	r2, r2, #2
 80021e0:	4093      	lsls	r3, r2
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021e8:	4935      	ldr	r1, [pc, #212]	@ (80022c0 <HAL_GPIO_Init+0x310>)
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	089b      	lsrs	r3, r3, #2
 80021ee:	3302      	adds	r3, #2
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021f6:	4b3b      	ldr	r3, [pc, #236]	@ (80022e4 <HAL_GPIO_Init+0x334>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	43db      	mvns	r3, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4013      	ands	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	4313      	orrs	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800221a:	4a32      	ldr	r2, [pc, #200]	@ (80022e4 <HAL_GPIO_Init+0x334>)
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002220:	4b30      	ldr	r3, [pc, #192]	@ (80022e4 <HAL_GPIO_Init+0x334>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	43db      	mvns	r3, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d003      	beq.n	8002244 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	4313      	orrs	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002244:	4a27      	ldr	r2, [pc, #156]	@ (80022e4 <HAL_GPIO_Init+0x334>)
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800224a:	4b26      	ldr	r3, [pc, #152]	@ (80022e4 <HAL_GPIO_Init+0x334>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	43db      	mvns	r3, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4013      	ands	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	4313      	orrs	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800226e:	4a1d      	ldr	r2, [pc, #116]	@ (80022e4 <HAL_GPIO_Init+0x334>)
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002274:	4b1b      	ldr	r3, [pc, #108]	@ (80022e4 <HAL_GPIO_Init+0x334>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	43db      	mvns	r3, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d003      	beq.n	8002298 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	4313      	orrs	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002298:	4a12      	ldr	r2, [pc, #72]	@ (80022e4 <HAL_GPIO_Init+0x334>)
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	3301      	adds	r3, #1
 80022a2:	61fb      	str	r3, [r7, #28]
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	2b0f      	cmp	r3, #15
 80022a8:	f67f ae90 	bls.w	8001fcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022ac:	bf00      	nop
 80022ae:	bf00      	nop
 80022b0:	3724      	adds	r7, #36	@ 0x24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	40023800 	.word	0x40023800
 80022c0:	40013800 	.word	0x40013800
 80022c4:	40020000 	.word	0x40020000
 80022c8:	40020400 	.word	0x40020400
 80022cc:	40020800 	.word	0x40020800
 80022d0:	40020c00 	.word	0x40020c00
 80022d4:	40021000 	.word	0x40021000
 80022d8:	40021400 	.word	0x40021400
 80022dc:	40021800 	.word	0x40021800
 80022e0:	40021c00 	.word	0x40021c00
 80022e4:	40013c00 	.word	0x40013c00

080022e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e267      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	d075      	beq.n	80023f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002306:	4b88      	ldr	r3, [pc, #544]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 030c 	and.w	r3, r3, #12
 800230e:	2b04      	cmp	r3, #4
 8002310:	d00c      	beq.n	800232c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002312:	4b85      	ldr	r3, [pc, #532]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800231a:	2b08      	cmp	r3, #8
 800231c:	d112      	bne.n	8002344 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800231e:	4b82      	ldr	r3, [pc, #520]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002326:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800232a:	d10b      	bne.n	8002344 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800232c:	4b7e      	ldr	r3, [pc, #504]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d05b      	beq.n	80023f0 <HAL_RCC_OscConfig+0x108>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d157      	bne.n	80023f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e242      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800234c:	d106      	bne.n	800235c <HAL_RCC_OscConfig+0x74>
 800234e:	4b76      	ldr	r3, [pc, #472]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a75      	ldr	r2, [pc, #468]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 8002354:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	e01d      	b.n	8002398 <HAL_RCC_OscConfig+0xb0>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002364:	d10c      	bne.n	8002380 <HAL_RCC_OscConfig+0x98>
 8002366:	4b70      	ldr	r3, [pc, #448]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a6f      	ldr	r2, [pc, #444]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 800236c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	4b6d      	ldr	r3, [pc, #436]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a6c      	ldr	r2, [pc, #432]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 8002378:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	e00b      	b.n	8002398 <HAL_RCC_OscConfig+0xb0>
 8002380:	4b69      	ldr	r3, [pc, #420]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a68      	ldr	r2, [pc, #416]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 8002386:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800238a:	6013      	str	r3, [r2, #0]
 800238c:	4b66      	ldr	r3, [pc, #408]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a65      	ldr	r2, [pc, #404]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 8002392:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002396:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d013      	beq.n	80023c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a0:	f7fe fdd2 	bl	8000f48 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023a8:	f7fe fdce 	bl	8000f48 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b64      	cmp	r3, #100	@ 0x64
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e207      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ba:	4b5b      	ldr	r3, [pc, #364]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCC_OscConfig+0xc0>
 80023c6:	e014      	b.n	80023f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c8:	f7fe fdbe 	bl	8000f48 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023d0:	f7fe fdba 	bl	8000f48 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b64      	cmp	r3, #100	@ 0x64
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e1f3      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e2:	4b51      	ldr	r3, [pc, #324]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f0      	bne.n	80023d0 <HAL_RCC_OscConfig+0xe8>
 80023ee:	e000      	b.n	80023f2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d063      	beq.n	80024c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80023fe:	4b4a      	ldr	r3, [pc, #296]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 030c 	and.w	r3, r3, #12
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00b      	beq.n	8002422 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800240a:	4b47      	ldr	r3, [pc, #284]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002412:	2b08      	cmp	r3, #8
 8002414:	d11c      	bne.n	8002450 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002416:	4b44      	ldr	r3, [pc, #272]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d116      	bne.n	8002450 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002422:	4b41      	ldr	r3, [pc, #260]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d005      	beq.n	800243a <HAL_RCC_OscConfig+0x152>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d001      	beq.n	800243a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e1c7      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800243a:	4b3b      	ldr	r3, [pc, #236]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	4937      	ldr	r1, [pc, #220]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 800244a:	4313      	orrs	r3, r2
 800244c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800244e:	e03a      	b.n	80024c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d020      	beq.n	800249a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002458:	4b34      	ldr	r3, [pc, #208]	@ (800252c <HAL_RCC_OscConfig+0x244>)
 800245a:	2201      	movs	r2, #1
 800245c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245e:	f7fe fd73 	bl	8000f48 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002466:	f7fe fd6f 	bl	8000f48 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e1a8      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002478:	4b2b      	ldr	r3, [pc, #172]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0f0      	beq.n	8002466 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002484:	4b28      	ldr	r3, [pc, #160]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	4925      	ldr	r1, [pc, #148]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 8002494:	4313      	orrs	r3, r2
 8002496:	600b      	str	r3, [r1, #0]
 8002498:	e015      	b.n	80024c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800249a:	4b24      	ldr	r3, [pc, #144]	@ (800252c <HAL_RCC_OscConfig+0x244>)
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a0:	f7fe fd52 	bl	8000f48 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024a8:	f7fe fd4e 	bl	8000f48 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e187      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f0      	bne.n	80024a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d036      	beq.n	8002540 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d016      	beq.n	8002508 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024da:	4b15      	ldr	r3, [pc, #84]	@ (8002530 <HAL_RCC_OscConfig+0x248>)
 80024dc:	2201      	movs	r2, #1
 80024de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e0:	f7fe fd32 	bl	8000f48 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024e8:	f7fe fd2e 	bl	8000f48 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e167      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002528 <HAL_RCC_OscConfig+0x240>)
 80024fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0f0      	beq.n	80024e8 <HAL_RCC_OscConfig+0x200>
 8002506:	e01b      	b.n	8002540 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002508:	4b09      	ldr	r3, [pc, #36]	@ (8002530 <HAL_RCC_OscConfig+0x248>)
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800250e:	f7fe fd1b 	bl	8000f48 <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002514:	e00e      	b.n	8002534 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002516:	f7fe fd17 	bl	8000f48 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d907      	bls.n	8002534 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e150      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
 8002528:	40023800 	.word	0x40023800
 800252c:	42470000 	.word	0x42470000
 8002530:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002534:	4b88      	ldr	r3, [pc, #544]	@ (8002758 <HAL_RCC_OscConfig+0x470>)
 8002536:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1ea      	bne.n	8002516 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b00      	cmp	r3, #0
 800254a:	f000 8097 	beq.w	800267c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800254e:	2300      	movs	r3, #0
 8002550:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002552:	4b81      	ldr	r3, [pc, #516]	@ (8002758 <HAL_RCC_OscConfig+0x470>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10f      	bne.n	800257e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	60bb      	str	r3, [r7, #8]
 8002562:	4b7d      	ldr	r3, [pc, #500]	@ (8002758 <HAL_RCC_OscConfig+0x470>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002566:	4a7c      	ldr	r2, [pc, #496]	@ (8002758 <HAL_RCC_OscConfig+0x470>)
 8002568:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800256c:	6413      	str	r3, [r2, #64]	@ 0x40
 800256e:	4b7a      	ldr	r3, [pc, #488]	@ (8002758 <HAL_RCC_OscConfig+0x470>)
 8002570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002572:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002576:	60bb      	str	r3, [r7, #8]
 8002578:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800257a:	2301      	movs	r3, #1
 800257c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800257e:	4b77      	ldr	r3, [pc, #476]	@ (800275c <HAL_RCC_OscConfig+0x474>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002586:	2b00      	cmp	r3, #0
 8002588:	d118      	bne.n	80025bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800258a:	4b74      	ldr	r3, [pc, #464]	@ (800275c <HAL_RCC_OscConfig+0x474>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a73      	ldr	r2, [pc, #460]	@ (800275c <HAL_RCC_OscConfig+0x474>)
 8002590:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002594:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002596:	f7fe fcd7 	bl	8000f48 <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800259e:	f7fe fcd3 	bl	8000f48 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e10c      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b0:	4b6a      	ldr	r3, [pc, #424]	@ (800275c <HAL_RCC_OscConfig+0x474>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0f0      	beq.n	800259e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d106      	bne.n	80025d2 <HAL_RCC_OscConfig+0x2ea>
 80025c4:	4b64      	ldr	r3, [pc, #400]	@ (8002758 <HAL_RCC_OscConfig+0x470>)
 80025c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025c8:	4a63      	ldr	r2, [pc, #396]	@ (8002758 <HAL_RCC_OscConfig+0x470>)
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80025d0:	e01c      	b.n	800260c <HAL_RCC_OscConfig+0x324>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	2b05      	cmp	r3, #5
 80025d8:	d10c      	bne.n	80025f4 <HAL_RCC_OscConfig+0x30c>
 80025da:	4b5f      	ldr	r3, [pc, #380]	@ (8002758 <HAL_RCC_OscConfig+0x470>)
 80025dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025de:	4a5e      	ldr	r2, [pc, #376]	@ (8002758 <HAL_RCC_OscConfig+0x470>)
 80025e0:	f043 0304 	orr.w	r3, r3, #4
 80025e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80025e6:	4b5c      	ldr	r3, [pc, #368]	@ (8002758 <HAL_RCC_OscConfig+0x470>)
 80025e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ea:	4a5b      	ldr	r2, [pc, #364]	@ (8002758 <HAL_RCC_OscConfig+0x470>)
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80025f2:	e00b      	b.n	800260c <HAL_RCC_OscConfig+0x324>
 80025f4:	4b58      	ldr	r3, [pc, #352]	@ (8002758 <HAL_RCC_OscConfig+0x470>)
 80025f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025f8:	4a57      	ldr	r2, [pc, #348]	@ (8002758 <HAL_RCC_OscConfig+0x470>)
 80025fa:	f023 0301 	bic.w	r3, r3, #1
 80025fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002600:	4b55      	ldr	r3, [pc, #340]	@ (8002758 <HAL_RCC_OscConfig+0x470>)
 8002602:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002604:	4a54      	ldr	r2, [pc, #336]	@ (8002758 <HAL_RCC_OscConfig+0x470>)
 8002606:	f023 0304 	bic.w	r3, r3, #4
 800260a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d015      	beq.n	8002640 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002614:	f7fe fc98 	bl	8000f48 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800261a:	e00a      	b.n	8002632 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800261c:	f7fe fc94 	bl	8000f48 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800262a:	4293      	cmp	r3, r2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e0cb      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002632:	4b49      	ldr	r3, [pc, #292]	@ (8002758 <HAL_RCC_OscConfig+0x470>)
 8002634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0ee      	beq.n	800261c <HAL_RCC_OscConfig+0x334>
 800263e:	e014      	b.n	800266a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002640:	f7fe fc82 	bl	8000f48 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002646:	e00a      	b.n	800265e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002648:	f7fe fc7e 	bl	8000f48 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002656:	4293      	cmp	r3, r2
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e0b5      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800265e:	4b3e      	ldr	r3, [pc, #248]	@ (8002758 <HAL_RCC_OscConfig+0x470>)
 8002660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1ee      	bne.n	8002648 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800266a:	7dfb      	ldrb	r3, [r7, #23]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d105      	bne.n	800267c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002670:	4b39      	ldr	r3, [pc, #228]	@ (8002758 <HAL_RCC_OscConfig+0x470>)
 8002672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002674:	4a38      	ldr	r2, [pc, #224]	@ (8002758 <HAL_RCC_OscConfig+0x470>)
 8002676:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800267a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 80a1 	beq.w	80027c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002686:	4b34      	ldr	r3, [pc, #208]	@ (8002758 <HAL_RCC_OscConfig+0x470>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 030c 	and.w	r3, r3, #12
 800268e:	2b08      	cmp	r3, #8
 8002690:	d05c      	beq.n	800274c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	2b02      	cmp	r3, #2
 8002698:	d141      	bne.n	800271e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800269a:	4b31      	ldr	r3, [pc, #196]	@ (8002760 <HAL_RCC_OscConfig+0x478>)
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a0:	f7fe fc52 	bl	8000f48 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a8:	f7fe fc4e 	bl	8000f48 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e087      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ba:	4b27      	ldr	r3, [pc, #156]	@ (8002758 <HAL_RCC_OscConfig+0x470>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1f0      	bne.n	80026a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69da      	ldr	r2, [r3, #28]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d4:	019b      	lsls	r3, r3, #6
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026dc:	085b      	lsrs	r3, r3, #1
 80026de:	3b01      	subs	r3, #1
 80026e0:	041b      	lsls	r3, r3, #16
 80026e2:	431a      	orrs	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026e8:	061b      	lsls	r3, r3, #24
 80026ea:	491b      	ldr	r1, [pc, #108]	@ (8002758 <HAL_RCC_OscConfig+0x470>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002760 <HAL_RCC_OscConfig+0x478>)
 80026f2:	2201      	movs	r2, #1
 80026f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f6:	f7fe fc27 	bl	8000f48 <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026fe:	f7fe fc23 	bl	8000f48 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e05c      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002710:	4b11      	ldr	r3, [pc, #68]	@ (8002758 <HAL_RCC_OscConfig+0x470>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0f0      	beq.n	80026fe <HAL_RCC_OscConfig+0x416>
 800271c:	e054      	b.n	80027c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800271e:	4b10      	ldr	r3, [pc, #64]	@ (8002760 <HAL_RCC_OscConfig+0x478>)
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002724:	f7fe fc10 	bl	8000f48 <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800272c:	f7fe fc0c 	bl	8000f48 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e045      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800273e:	4b06      	ldr	r3, [pc, #24]	@ (8002758 <HAL_RCC_OscConfig+0x470>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1f0      	bne.n	800272c <HAL_RCC_OscConfig+0x444>
 800274a:	e03d      	b.n	80027c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d107      	bne.n	8002764 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e038      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
 8002758:	40023800 	.word	0x40023800
 800275c:	40007000 	.word	0x40007000
 8002760:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002764:	4b1b      	ldr	r3, [pc, #108]	@ (80027d4 <HAL_RCC_OscConfig+0x4ec>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d028      	beq.n	80027c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800277c:	429a      	cmp	r2, r3
 800277e:	d121      	bne.n	80027c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800278a:	429a      	cmp	r2, r3
 800278c:	d11a      	bne.n	80027c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002794:	4013      	ands	r3, r2
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800279a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800279c:	4293      	cmp	r3, r2
 800279e:	d111      	bne.n	80027c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027aa:	085b      	lsrs	r3, r3, #1
 80027ac:	3b01      	subs	r3, #1
 80027ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d107      	bne.n	80027c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d001      	beq.n	80027c8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e000      	b.n	80027ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3718      	adds	r7, #24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40023800 	.word	0x40023800

080027d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d101      	bne.n	80027ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e0cc      	b.n	8002986 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027ec:	4b68      	ldr	r3, [pc, #416]	@ (8002990 <HAL_RCC_ClockConfig+0x1b8>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d90c      	bls.n	8002814 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027fa:	4b65      	ldr	r3, [pc, #404]	@ (8002990 <HAL_RCC_ClockConfig+0x1b8>)
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002802:	4b63      	ldr	r3, [pc, #396]	@ (8002990 <HAL_RCC_ClockConfig+0x1b8>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	683a      	ldr	r2, [r7, #0]
 800280c:	429a      	cmp	r2, r3
 800280e:	d001      	beq.n	8002814 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e0b8      	b.n	8002986 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d020      	beq.n	8002862 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b00      	cmp	r3, #0
 800282a:	d005      	beq.n	8002838 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800282c:	4b59      	ldr	r3, [pc, #356]	@ (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	4a58      	ldr	r2, [pc, #352]	@ (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 8002832:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002836:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0308 	and.w	r3, r3, #8
 8002840:	2b00      	cmp	r3, #0
 8002842:	d005      	beq.n	8002850 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002844:	4b53      	ldr	r3, [pc, #332]	@ (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	4a52      	ldr	r2, [pc, #328]	@ (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 800284a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800284e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002850:	4b50      	ldr	r3, [pc, #320]	@ (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	494d      	ldr	r1, [pc, #308]	@ (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 800285e:	4313      	orrs	r3, r2
 8002860:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b00      	cmp	r3, #0
 800286c:	d044      	beq.n	80028f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d107      	bne.n	8002886 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002876:	4b47      	ldr	r3, [pc, #284]	@ (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d119      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e07f      	b.n	8002986 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	2b02      	cmp	r3, #2
 800288c:	d003      	beq.n	8002896 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002892:	2b03      	cmp	r3, #3
 8002894:	d107      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002896:	4b3f      	ldr	r3, [pc, #252]	@ (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d109      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e06f      	b.n	8002986 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a6:	4b3b      	ldr	r3, [pc, #236]	@ (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e067      	b.n	8002986 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028b6:	4b37      	ldr	r3, [pc, #220]	@ (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f023 0203 	bic.w	r2, r3, #3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	4934      	ldr	r1, [pc, #208]	@ (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028c8:	f7fe fb3e 	bl	8000f48 <HAL_GetTick>
 80028cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ce:	e00a      	b.n	80028e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d0:	f7fe fb3a 	bl	8000f48 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028de:	4293      	cmp	r3, r2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e04f      	b.n	8002986 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e6:	4b2b      	ldr	r3, [pc, #172]	@ (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 020c 	and.w	r2, r3, #12
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d1eb      	bne.n	80028d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028f8:	4b25      	ldr	r3, [pc, #148]	@ (8002990 <HAL_RCC_ClockConfig+0x1b8>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d20c      	bcs.n	8002920 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002906:	4b22      	ldr	r3, [pc, #136]	@ (8002990 <HAL_RCC_ClockConfig+0x1b8>)
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800290e:	4b20      	ldr	r3, [pc, #128]	@ (8002990 <HAL_RCC_ClockConfig+0x1b8>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	429a      	cmp	r2, r3
 800291a:	d001      	beq.n	8002920 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e032      	b.n	8002986 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0304 	and.w	r3, r3, #4
 8002928:	2b00      	cmp	r3, #0
 800292a:	d008      	beq.n	800293e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800292c:	4b19      	ldr	r3, [pc, #100]	@ (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	4916      	ldr	r1, [pc, #88]	@ (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	4313      	orrs	r3, r2
 800293c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	2b00      	cmp	r3, #0
 8002948:	d009      	beq.n	800295e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800294a:	4b12      	ldr	r3, [pc, #72]	@ (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	490e      	ldr	r1, [pc, #56]	@ (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 800295a:	4313      	orrs	r3, r2
 800295c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800295e:	f000 f821 	bl	80029a4 <HAL_RCC_GetSysClockFreq>
 8002962:	4602      	mov	r2, r0
 8002964:	4b0b      	ldr	r3, [pc, #44]	@ (8002994 <HAL_RCC_ClockConfig+0x1bc>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	091b      	lsrs	r3, r3, #4
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	490a      	ldr	r1, [pc, #40]	@ (8002998 <HAL_RCC_ClockConfig+0x1c0>)
 8002970:	5ccb      	ldrb	r3, [r1, r3]
 8002972:	fa22 f303 	lsr.w	r3, r2, r3
 8002976:	4a09      	ldr	r2, [pc, #36]	@ (800299c <HAL_RCC_ClockConfig+0x1c4>)
 8002978:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800297a:	4b09      	ldr	r3, [pc, #36]	@ (80029a0 <HAL_RCC_ClockConfig+0x1c8>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f7fe fa9e 	bl	8000ec0 <HAL_InitTick>

  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	40023c00 	.word	0x40023c00
 8002994:	40023800 	.word	0x40023800
 8002998:	08004554 	.word	0x08004554
 800299c:	20000000 	.word	0x20000000
 80029a0:	20000004 	.word	0x20000004

080029a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029a8:	b094      	sub	sp, #80	@ 0x50
 80029aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80029ac:	2300      	movs	r3, #0
 80029ae:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029bc:	4b79      	ldr	r3, [pc, #484]	@ (8002ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f003 030c 	and.w	r3, r3, #12
 80029c4:	2b08      	cmp	r3, #8
 80029c6:	d00d      	beq.n	80029e4 <HAL_RCC_GetSysClockFreq+0x40>
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	f200 80e1 	bhi.w	8002b90 <HAL_RCC_GetSysClockFreq+0x1ec>
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d002      	beq.n	80029d8 <HAL_RCC_GetSysClockFreq+0x34>
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d003      	beq.n	80029de <HAL_RCC_GetSysClockFreq+0x3a>
 80029d6:	e0db      	b.n	8002b90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029d8:	4b73      	ldr	r3, [pc, #460]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x204>)
 80029da:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029dc:	e0db      	b.n	8002b96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029de:	4b73      	ldr	r3, [pc, #460]	@ (8002bac <HAL_RCC_GetSysClockFreq+0x208>)
 80029e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029e2:	e0d8      	b.n	8002b96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029e4:	4b6f      	ldr	r3, [pc, #444]	@ (8002ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029ec:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029ee:	4b6d      	ldr	r3, [pc, #436]	@ (8002ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d063      	beq.n	8002ac2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029fa:	4b6a      	ldr	r3, [pc, #424]	@ (8002ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	099b      	lsrs	r3, r3, #6
 8002a00:	2200      	movs	r2, #0
 8002a02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a04:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a0e:	2300      	movs	r3, #0
 8002a10:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a12:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002a16:	4622      	mov	r2, r4
 8002a18:	462b      	mov	r3, r5
 8002a1a:	f04f 0000 	mov.w	r0, #0
 8002a1e:	f04f 0100 	mov.w	r1, #0
 8002a22:	0159      	lsls	r1, r3, #5
 8002a24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a28:	0150      	lsls	r0, r2, #5
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	4621      	mov	r1, r4
 8002a30:	1a51      	subs	r1, r2, r1
 8002a32:	6139      	str	r1, [r7, #16]
 8002a34:	4629      	mov	r1, r5
 8002a36:	eb63 0301 	sbc.w	r3, r3, r1
 8002a3a:	617b      	str	r3, [r7, #20]
 8002a3c:	f04f 0200 	mov.w	r2, #0
 8002a40:	f04f 0300 	mov.w	r3, #0
 8002a44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a48:	4659      	mov	r1, fp
 8002a4a:	018b      	lsls	r3, r1, #6
 8002a4c:	4651      	mov	r1, sl
 8002a4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a52:	4651      	mov	r1, sl
 8002a54:	018a      	lsls	r2, r1, #6
 8002a56:	4651      	mov	r1, sl
 8002a58:	ebb2 0801 	subs.w	r8, r2, r1
 8002a5c:	4659      	mov	r1, fp
 8002a5e:	eb63 0901 	sbc.w	r9, r3, r1
 8002a62:	f04f 0200 	mov.w	r2, #0
 8002a66:	f04f 0300 	mov.w	r3, #0
 8002a6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a76:	4690      	mov	r8, r2
 8002a78:	4699      	mov	r9, r3
 8002a7a:	4623      	mov	r3, r4
 8002a7c:	eb18 0303 	adds.w	r3, r8, r3
 8002a80:	60bb      	str	r3, [r7, #8]
 8002a82:	462b      	mov	r3, r5
 8002a84:	eb49 0303 	adc.w	r3, r9, r3
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	f04f 0200 	mov.w	r2, #0
 8002a8e:	f04f 0300 	mov.w	r3, #0
 8002a92:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a96:	4629      	mov	r1, r5
 8002a98:	024b      	lsls	r3, r1, #9
 8002a9a:	4621      	mov	r1, r4
 8002a9c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002aa0:	4621      	mov	r1, r4
 8002aa2:	024a      	lsls	r2, r1, #9
 8002aa4:	4610      	mov	r0, r2
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002aaa:	2200      	movs	r2, #0
 8002aac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002aae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ab0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ab4:	f7fd fbf4 	bl	80002a0 <__aeabi_uldivmod>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	460b      	mov	r3, r1
 8002abc:	4613      	mov	r3, r2
 8002abe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ac0:	e058      	b.n	8002b74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ac2:	4b38      	ldr	r3, [pc, #224]	@ (8002ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	099b      	lsrs	r3, r3, #6
 8002ac8:	2200      	movs	r2, #0
 8002aca:	4618      	mov	r0, r3
 8002acc:	4611      	mov	r1, r2
 8002ace:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ad2:	623b      	str	r3, [r7, #32]
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ad8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002adc:	4642      	mov	r2, r8
 8002ade:	464b      	mov	r3, r9
 8002ae0:	f04f 0000 	mov.w	r0, #0
 8002ae4:	f04f 0100 	mov.w	r1, #0
 8002ae8:	0159      	lsls	r1, r3, #5
 8002aea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002aee:	0150      	lsls	r0, r2, #5
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	4641      	mov	r1, r8
 8002af6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002afa:	4649      	mov	r1, r9
 8002afc:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b00:	f04f 0200 	mov.w	r2, #0
 8002b04:	f04f 0300 	mov.w	r3, #0
 8002b08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b14:	ebb2 040a 	subs.w	r4, r2, sl
 8002b18:	eb63 050b 	sbc.w	r5, r3, fp
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	00eb      	lsls	r3, r5, #3
 8002b26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b2a:	00e2      	lsls	r2, r4, #3
 8002b2c:	4614      	mov	r4, r2
 8002b2e:	461d      	mov	r5, r3
 8002b30:	4643      	mov	r3, r8
 8002b32:	18e3      	adds	r3, r4, r3
 8002b34:	603b      	str	r3, [r7, #0]
 8002b36:	464b      	mov	r3, r9
 8002b38:	eb45 0303 	adc.w	r3, r5, r3
 8002b3c:	607b      	str	r3, [r7, #4]
 8002b3e:	f04f 0200 	mov.w	r2, #0
 8002b42:	f04f 0300 	mov.w	r3, #0
 8002b46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b4a:	4629      	mov	r1, r5
 8002b4c:	028b      	lsls	r3, r1, #10
 8002b4e:	4621      	mov	r1, r4
 8002b50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b54:	4621      	mov	r1, r4
 8002b56:	028a      	lsls	r2, r1, #10
 8002b58:	4610      	mov	r0, r2
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b5e:	2200      	movs	r2, #0
 8002b60:	61bb      	str	r3, [r7, #24]
 8002b62:	61fa      	str	r2, [r7, #28]
 8002b64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b68:	f7fd fb9a 	bl	80002a0 <__aeabi_uldivmod>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	460b      	mov	r3, r1
 8002b70:	4613      	mov	r3, r2
 8002b72:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002b74:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	0c1b      	lsrs	r3, r3, #16
 8002b7a:	f003 0303 	and.w	r3, r3, #3
 8002b7e:	3301      	adds	r3, #1
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002b84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b8e:	e002      	b.n	8002b96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b90:	4b05      	ldr	r3, [pc, #20]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b92:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3750      	adds	r7, #80	@ 0x50
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	00f42400 	.word	0x00f42400
 8002bac:	007a1200 	.word	0x007a1200

08002bb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bb4:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	20000000 	.word	0x20000000

08002bc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bcc:	f7ff fff0 	bl	8002bb0 <HAL_RCC_GetHCLKFreq>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	4b05      	ldr	r3, [pc, #20]	@ (8002be8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	0a9b      	lsrs	r3, r3, #10
 8002bd8:	f003 0307 	and.w	r3, r3, #7
 8002bdc:	4903      	ldr	r1, [pc, #12]	@ (8002bec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bde:	5ccb      	ldrb	r3, [r1, r3]
 8002be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40023800 	.word	0x40023800
 8002bec:	08004564 	.word	0x08004564

08002bf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bf4:	f7ff ffdc 	bl	8002bb0 <HAL_RCC_GetHCLKFreq>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	4b05      	ldr	r3, [pc, #20]	@ (8002c10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	0b5b      	lsrs	r3, r3, #13
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	4903      	ldr	r1, [pc, #12]	@ (8002c14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c06:	5ccb      	ldrb	r3, [r1, r3]
 8002c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40023800 	.word	0x40023800
 8002c14:	08004564 	.word	0x08004564

08002c18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e042      	b.n	8002cb0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d106      	bne.n	8002c44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7fd ff8a 	bl	8000b58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2224      	movs	r2, #36	@ 0x24
 8002c48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68da      	ldr	r2, [r3, #12]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 fd25 	bl	80036ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	691a      	ldr	r2, [r3, #16]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	695a      	ldr	r2, [r3, #20]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68da      	ldr	r2, [r3, #12]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b20      	cmp	r3, #32
 8002cd0:	d121      	bne.n	8002d16 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d002      	beq.n	8002cde <HAL_UART_Transmit_IT+0x26>
 8002cd8:	88fb      	ldrh	r3, [r7, #6]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e01a      	b.n	8002d18 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	68ba      	ldr	r2, [r7, #8]
 8002ce6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	88fa      	ldrh	r2, [r7, #6]
 8002cec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	88fa      	ldrh	r2, [r7, #6]
 8002cf2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2221      	movs	r2, #33	@ 0x21
 8002cfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68da      	ldr	r2, [r3, #12]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002d10:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002d12:	2300      	movs	r3, #0
 8002d14:	e000      	b.n	8002d18 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8002d16:	2302      	movs	r3, #2
  }
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3714      	adds	r7, #20
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b20      	cmp	r3, #32
 8002d3c:	d112      	bne.n	8002d64 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d002      	beq.n	8002d4a <HAL_UART_Receive_IT+0x26>
 8002d44:	88fb      	ldrh	r3, [r7, #6]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e00b      	b.n	8002d66 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002d54:	88fb      	ldrh	r3, [r7, #6]
 8002d56:	461a      	mov	r2, r3
 8002d58:	68b9      	ldr	r1, [r7, #8]
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 fad2 	bl	8003304 <UART_Start_Receive_IT>
 8002d60:	4603      	mov	r3, r0
 8002d62:	e000      	b.n	8002d66 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002d64:	2302      	movs	r3, #2
  }
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
	...

08002d70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b0ba      	sub	sp, #232	@ 0xe8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002d96:	2300      	movs	r3, #0
 8002d98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002dae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10f      	bne.n	8002dd6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dba:	f003 0320 	and.w	r3, r3, #32
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d009      	beq.n	8002dd6 <HAL_UART_IRQHandler+0x66>
 8002dc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002dc6:	f003 0320 	and.w	r3, r3, #32
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 fbae 	bl	8003530 <UART_Receive_IT>
      return;
 8002dd4:	e273      	b.n	80032be <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002dd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f000 80de 	beq.w	8002f9c <HAL_UART_IRQHandler+0x22c>
 8002de0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d106      	bne.n	8002dfa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002df0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 80d1 	beq.w	8002f9c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00b      	beq.n	8002e1e <HAL_UART_IRQHandler+0xae>
 8002e06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d005      	beq.n	8002e1e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e16:	f043 0201 	orr.w	r2, r3, #1
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e22:	f003 0304 	and.w	r3, r3, #4
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00b      	beq.n	8002e42 <HAL_UART_IRQHandler+0xd2>
 8002e2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d005      	beq.n	8002e42 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e3a:	f043 0202 	orr.w	r2, r3, #2
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00b      	beq.n	8002e66 <HAL_UART_IRQHandler+0xf6>
 8002e4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d005      	beq.n	8002e66 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e5e:	f043 0204 	orr.w	r2, r3, #4
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e6a:	f003 0308 	and.w	r3, r3, #8
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d011      	beq.n	8002e96 <HAL_UART_IRQHandler+0x126>
 8002e72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e76:	f003 0320 	and.w	r3, r3, #32
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d105      	bne.n	8002e8a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d005      	beq.n	8002e96 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e8e:	f043 0208 	orr.w	r2, r3, #8
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f000 820a 	beq.w	80032b4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ea4:	f003 0320 	and.w	r3, r3, #32
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d008      	beq.n	8002ebe <HAL_UART_IRQHandler+0x14e>
 8002eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002eb0:	f003 0320 	and.w	r3, r3, #32
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d002      	beq.n	8002ebe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 fb39 	bl	8003530 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ec8:	2b40      	cmp	r3, #64	@ 0x40
 8002eca:	bf0c      	ite	eq
 8002ecc:	2301      	moveq	r3, #1
 8002ece:	2300      	movne	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eda:	f003 0308 	and.w	r3, r3, #8
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d103      	bne.n	8002eea <HAL_UART_IRQHandler+0x17a>
 8002ee2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d04f      	beq.n	8002f8a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fa44 	bl	8003378 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002efa:	2b40      	cmp	r3, #64	@ 0x40
 8002efc:	d141      	bne.n	8002f82 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	3314      	adds	r3, #20
 8002f04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f08:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f0c:	e853 3f00 	ldrex	r3, [r3]
 8002f10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002f14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	3314      	adds	r3, #20
 8002f26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002f2a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002f2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002f36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002f3a:	e841 2300 	strex	r3, r2, [r1]
 8002f3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002f42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1d9      	bne.n	8002efe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d013      	beq.n	8002f7a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f56:	4a8a      	ldr	r2, [pc, #552]	@ (8003180 <HAL_UART_IRQHandler+0x410>)
 8002f58:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fe fdc8 	bl	8001af4 <HAL_DMA_Abort_IT>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d016      	beq.n	8002f98 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002f74:	4610      	mov	r0, r2
 8002f76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f78:	e00e      	b.n	8002f98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f9ac 	bl	80032d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f80:	e00a      	b.n	8002f98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f9a8 	bl	80032d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f88:	e006      	b.n	8002f98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f9a4 	bl	80032d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002f96:	e18d      	b.n	80032b4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f98:	bf00      	nop
    return;
 8002f9a:	e18b      	b.n	80032b4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	f040 8167 	bne.w	8003274 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002faa:	f003 0310 	and.w	r3, r3, #16
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 8160 	beq.w	8003274 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8002fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fb8:	f003 0310 	and.w	r3, r3, #16
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 8159 	beq.w	8003274 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	60bb      	str	r3, [r7, #8]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	60bb      	str	r3, [r7, #8]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fe2:	2b40      	cmp	r3, #64	@ 0x40
 8002fe4:	f040 80ce 	bne.w	8003184 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ff4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 80a9 	beq.w	8003150 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003002:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003006:	429a      	cmp	r2, r3
 8003008:	f080 80a2 	bcs.w	8003150 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003012:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800301e:	f000 8088 	beq.w	8003132 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	330c      	adds	r3, #12
 8003028:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800302c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003030:	e853 3f00 	ldrex	r3, [r3]
 8003034:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003038:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800303c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003040:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	330c      	adds	r3, #12
 800304a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800304e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003052:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003056:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800305a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800305e:	e841 2300 	strex	r3, r2, [r1]
 8003062:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003066:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1d9      	bne.n	8003022 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	3314      	adds	r3, #20
 8003074:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003076:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003078:	e853 3f00 	ldrex	r3, [r3]
 800307c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800307e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003080:	f023 0301 	bic.w	r3, r3, #1
 8003084:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	3314      	adds	r3, #20
 800308e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003092:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003096:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003098:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800309a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800309e:	e841 2300 	strex	r3, r2, [r1]
 80030a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80030a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1e1      	bne.n	800306e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	3314      	adds	r3, #20
 80030b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80030b4:	e853 3f00 	ldrex	r3, [r3]
 80030b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80030ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	3314      	adds	r3, #20
 80030ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80030ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80030d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80030d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80030d6:	e841 2300 	strex	r3, r2, [r1]
 80030da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80030dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1e3      	bne.n	80030aa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2220      	movs	r2, #32
 80030e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	330c      	adds	r3, #12
 80030f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030fa:	e853 3f00 	ldrex	r3, [r3]
 80030fe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003100:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003102:	f023 0310 	bic.w	r3, r3, #16
 8003106:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	330c      	adds	r3, #12
 8003110:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003114:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003116:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003118:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800311a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800311c:	e841 2300 	strex	r3, r2, [r1]
 8003120:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003122:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1e3      	bne.n	80030f0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800312c:	4618      	mov	r0, r3
 800312e:	f7fe fc71 	bl	8001a14 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2202      	movs	r2, #2
 8003136:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003140:	b29b      	uxth	r3, r3
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	b29b      	uxth	r3, r3
 8003146:	4619      	mov	r1, r3
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 f8cf 	bl	80032ec <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800314e:	e0b3      	b.n	80032b8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003154:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003158:	429a      	cmp	r2, r3
 800315a:	f040 80ad 	bne.w	80032b8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003162:	69db      	ldr	r3, [r3, #28]
 8003164:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003168:	f040 80a6 	bne.w	80032b8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2202      	movs	r2, #2
 8003170:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003176:	4619      	mov	r1, r3
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 f8b7 	bl	80032ec <HAL_UARTEx_RxEventCallback>
      return;
 800317e:	e09b      	b.n	80032b8 <HAL_UART_IRQHandler+0x548>
 8003180:	0800343f 	.word	0x0800343f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800318c:	b29b      	uxth	r3, r3
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003198:	b29b      	uxth	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	f000 808e 	beq.w	80032bc <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80031a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 8089 	beq.w	80032bc <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	330c      	adds	r3, #12
 80031b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031b4:	e853 3f00 	ldrex	r3, [r3]
 80031b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80031ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	330c      	adds	r3, #12
 80031ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80031ce:	647a      	str	r2, [r7, #68]	@ 0x44
 80031d0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80031d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80031d6:	e841 2300 	strex	r3, r2, [r1]
 80031da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80031dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1e3      	bne.n	80031aa <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	3314      	adds	r3, #20
 80031e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ec:	e853 3f00 	ldrex	r3, [r3]
 80031f0:	623b      	str	r3, [r7, #32]
   return(result);
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	f023 0301 	bic.w	r3, r3, #1
 80031f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	3314      	adds	r3, #20
 8003202:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003206:	633a      	str	r2, [r7, #48]	@ 0x30
 8003208:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800320a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800320c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800320e:	e841 2300 	strex	r3, r2, [r1]
 8003212:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1e3      	bne.n	80031e2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2220      	movs	r2, #32
 800321e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	330c      	adds	r3, #12
 800322e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	e853 3f00 	ldrex	r3, [r3]
 8003236:	60fb      	str	r3, [r7, #12]
   return(result);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f023 0310 	bic.w	r3, r3, #16
 800323e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	330c      	adds	r3, #12
 8003248:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800324c:	61fa      	str	r2, [r7, #28]
 800324e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003250:	69b9      	ldr	r1, [r7, #24]
 8003252:	69fa      	ldr	r2, [r7, #28]
 8003254:	e841 2300 	strex	r3, r2, [r1]
 8003258:	617b      	str	r3, [r7, #20]
   return(result);
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1e3      	bne.n	8003228 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2202      	movs	r2, #2
 8003264:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003266:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800326a:	4619      	mov	r1, r3
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 f83d 	bl	80032ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003272:	e023      	b.n	80032bc <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003278:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800327c:	2b00      	cmp	r3, #0
 800327e:	d009      	beq.n	8003294 <HAL_UART_IRQHandler+0x524>
 8003280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003284:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 f8e7 	bl	8003460 <UART_Transmit_IT>
    return;
 8003292:	e014      	b.n	80032be <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00e      	beq.n	80032be <HAL_UART_IRQHandler+0x54e>
 80032a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d008      	beq.n	80032be <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 f927 	bl	8003500 <UART_EndTransmit_IT>
    return;
 80032b2:	e004      	b.n	80032be <HAL_UART_IRQHandler+0x54e>
    return;
 80032b4:	bf00      	nop
 80032b6:	e002      	b.n	80032be <HAL_UART_IRQHandler+0x54e>
      return;
 80032b8:	bf00      	nop
 80032ba:	e000      	b.n	80032be <HAL_UART_IRQHandler+0x54e>
      return;
 80032bc:	bf00      	nop
  }
}
 80032be:	37e8      	adds	r7, #232	@ 0xe8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	460b      	mov	r3, r1
 80032f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	4613      	mov	r3, r2
 8003310:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	68ba      	ldr	r2, [r7, #8]
 8003316:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	88fa      	ldrh	r2, [r7, #6]
 800331c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	88fa      	ldrh	r2, [r7, #6]
 8003322:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2222      	movs	r2, #34	@ 0x22
 800332e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d007      	beq.n	800334a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68da      	ldr	r2, [r3, #12]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003348:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	695a      	ldr	r2, [r3, #20]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f042 0201 	orr.w	r2, r2, #1
 8003358:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68da      	ldr	r2, [r3, #12]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f042 0220 	orr.w	r2, r2, #32
 8003368:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3714      	adds	r7, #20
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003378:	b480      	push	{r7}
 800337a:	b095      	sub	sp, #84	@ 0x54
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	330c      	adds	r3, #12
 8003386:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800338a:	e853 3f00 	ldrex	r3, [r3]
 800338e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003392:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003396:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	330c      	adds	r3, #12
 800339e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80033a0:	643a      	str	r2, [r7, #64]	@ 0x40
 80033a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80033a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80033a8:	e841 2300 	strex	r3, r2, [r1]
 80033ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80033ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1e5      	bne.n	8003380 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	3314      	adds	r3, #20
 80033ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033bc:	6a3b      	ldr	r3, [r7, #32]
 80033be:	e853 3f00 	ldrex	r3, [r3]
 80033c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	f023 0301 	bic.w	r3, r3, #1
 80033ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	3314      	adds	r3, #20
 80033d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033dc:	e841 2300 	strex	r3, r2, [r1]
 80033e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80033e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1e5      	bne.n	80033b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d119      	bne.n	8003424 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	330c      	adds	r3, #12
 80033f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	e853 3f00 	ldrex	r3, [r3]
 80033fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	f023 0310 	bic.w	r3, r3, #16
 8003406:	647b      	str	r3, [r7, #68]	@ 0x44
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	330c      	adds	r3, #12
 800340e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003410:	61ba      	str	r2, [r7, #24]
 8003412:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003414:	6979      	ldr	r1, [r7, #20]
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	e841 2300 	strex	r3, r2, [r1]
 800341c:	613b      	str	r3, [r7, #16]
   return(result);
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1e5      	bne.n	80033f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2220      	movs	r2, #32
 8003428:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003432:	bf00      	nop
 8003434:	3754      	adds	r7, #84	@ 0x54
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b084      	sub	sp, #16
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800344a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f7ff ff40 	bl	80032d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003458:	bf00      	nop
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2b21      	cmp	r3, #33	@ 0x21
 8003472:	d13e      	bne.n	80034f2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800347c:	d114      	bne.n	80034a8 <UART_Transmit_IT+0x48>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d110      	bne.n	80034a8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	881b      	ldrh	r3, [r3, #0]
 8003490:	461a      	mov	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800349a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	1c9a      	adds	r2, r3, #2
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	621a      	str	r2, [r3, #32]
 80034a6:	e008      	b.n	80034ba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	1c59      	adds	r1, r3, #1
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6211      	str	r1, [r2, #32]
 80034b2:	781a      	ldrb	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034be:	b29b      	uxth	r3, r3
 80034c0:	3b01      	subs	r3, #1
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	4619      	mov	r1, r3
 80034c8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10f      	bne.n	80034ee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68da      	ldr	r2, [r3, #12]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034dc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68da      	ldr	r2, [r3, #12]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034ec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80034ee:	2300      	movs	r3, #0
 80034f0:	e000      	b.n	80034f4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80034f2:	2302      	movs	r3, #2
  }
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3714      	adds	r7, #20
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68da      	ldr	r2, [r3, #12]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003516:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2220      	movs	r2, #32
 800351c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f7ff fecf 	bl	80032c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b08c      	sub	sp, #48	@ 0x30
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8003538:	2300      	movs	r3, #0
 800353a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800353c:	2300      	movs	r3, #0
 800353e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b22      	cmp	r3, #34	@ 0x22
 800354a:	f040 80aa 	bne.w	80036a2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003556:	d115      	bne.n	8003584 <UART_Receive_IT+0x54>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d111      	bne.n	8003584 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003564:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	b29b      	uxth	r3, r3
 800356e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003572:	b29a      	uxth	r2, r3
 8003574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003576:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800357c:	1c9a      	adds	r2, r3, #2
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	629a      	str	r2, [r3, #40]	@ 0x28
 8003582:	e024      	b.n	80035ce <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003588:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003592:	d007      	beq.n	80035a4 <UART_Receive_IT+0x74>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d10a      	bne.n	80035b2 <UART_Receive_IT+0x82>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d106      	bne.n	80035b2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	b2da      	uxtb	r2, r3
 80035ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035ae:	701a      	strb	r2, [r3, #0]
 80035b0:	e008      	b.n	80035c4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035be:	b2da      	uxtb	r2, r3
 80035c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035c2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c8:	1c5a      	adds	r2, r3, #1
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	3b01      	subs	r3, #1
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	4619      	mov	r1, r3
 80035dc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d15d      	bne.n	800369e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68da      	ldr	r2, [r3, #12]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 0220 	bic.w	r2, r2, #32
 80035f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68da      	ldr	r2, [r3, #12]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003600:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	695a      	ldr	r2, [r3, #20]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 0201 	bic.w	r2, r2, #1
 8003610:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2220      	movs	r2, #32
 8003616:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003624:	2b01      	cmp	r3, #1
 8003626:	d135      	bne.n	8003694 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	330c      	adds	r3, #12
 8003634:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	e853 3f00 	ldrex	r3, [r3]
 800363c:	613b      	str	r3, [r7, #16]
   return(result);
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	f023 0310 	bic.w	r3, r3, #16
 8003644:	627b      	str	r3, [r7, #36]	@ 0x24
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	330c      	adds	r3, #12
 800364c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800364e:	623a      	str	r2, [r7, #32]
 8003650:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003652:	69f9      	ldr	r1, [r7, #28]
 8003654:	6a3a      	ldr	r2, [r7, #32]
 8003656:	e841 2300 	strex	r3, r2, [r1]
 800365a:	61bb      	str	r3, [r7, #24]
   return(result);
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1e5      	bne.n	800362e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0310 	and.w	r3, r3, #16
 800366c:	2b10      	cmp	r3, #16
 800366e:	d10a      	bne.n	8003686 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003670:	2300      	movs	r3, #0
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	60fb      	str	r3, [r7, #12]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	60fb      	str	r3, [r7, #12]
 8003684:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800368a:	4619      	mov	r1, r3
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f7ff fe2d 	bl	80032ec <HAL_UARTEx_RxEventCallback>
 8003692:	e002      	b.n	800369a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f7fc ff99 	bl	80005cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800369a:	2300      	movs	r3, #0
 800369c:	e002      	b.n	80036a4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800369e:	2300      	movs	r3, #0
 80036a0:	e000      	b.n	80036a4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80036a2:	2302      	movs	r3, #2
  }
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3730      	adds	r7, #48	@ 0x30
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036b0:	b0c0      	sub	sp, #256	@ 0x100
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80036c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036c8:	68d9      	ldr	r1, [r3, #12]
 80036ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	ea40 0301 	orr.w	r3, r0, r1
 80036d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	431a      	orrs	r2, r3
 80036e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	431a      	orrs	r2, r3
 80036ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80036f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003704:	f021 010c 	bic.w	r1, r1, #12
 8003708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003712:	430b      	orrs	r3, r1
 8003714:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003726:	6999      	ldr	r1, [r3, #24]
 8003728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	ea40 0301 	orr.w	r3, r0, r1
 8003732:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	4b8f      	ldr	r3, [pc, #572]	@ (8003978 <UART_SetConfig+0x2cc>)
 800373c:	429a      	cmp	r2, r3
 800373e:	d005      	beq.n	800374c <UART_SetConfig+0xa0>
 8003740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	4b8d      	ldr	r3, [pc, #564]	@ (800397c <UART_SetConfig+0x2d0>)
 8003748:	429a      	cmp	r2, r3
 800374a:	d104      	bne.n	8003756 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800374c:	f7ff fa50 	bl	8002bf0 <HAL_RCC_GetPCLK2Freq>
 8003750:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003754:	e003      	b.n	800375e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003756:	f7ff fa37 	bl	8002bc8 <HAL_RCC_GetPCLK1Freq>
 800375a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800375e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003762:	69db      	ldr	r3, [r3, #28]
 8003764:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003768:	f040 810c 	bne.w	8003984 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800376c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003770:	2200      	movs	r2, #0
 8003772:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003776:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800377a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800377e:	4622      	mov	r2, r4
 8003780:	462b      	mov	r3, r5
 8003782:	1891      	adds	r1, r2, r2
 8003784:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003786:	415b      	adcs	r3, r3
 8003788:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800378a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800378e:	4621      	mov	r1, r4
 8003790:	eb12 0801 	adds.w	r8, r2, r1
 8003794:	4629      	mov	r1, r5
 8003796:	eb43 0901 	adc.w	r9, r3, r1
 800379a:	f04f 0200 	mov.w	r2, #0
 800379e:	f04f 0300 	mov.w	r3, #0
 80037a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037ae:	4690      	mov	r8, r2
 80037b0:	4699      	mov	r9, r3
 80037b2:	4623      	mov	r3, r4
 80037b4:	eb18 0303 	adds.w	r3, r8, r3
 80037b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80037bc:	462b      	mov	r3, r5
 80037be:	eb49 0303 	adc.w	r3, r9, r3
 80037c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80037c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80037d2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80037d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80037da:	460b      	mov	r3, r1
 80037dc:	18db      	adds	r3, r3, r3
 80037de:	653b      	str	r3, [r7, #80]	@ 0x50
 80037e0:	4613      	mov	r3, r2
 80037e2:	eb42 0303 	adc.w	r3, r2, r3
 80037e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80037e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80037ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80037f0:	f7fc fd56 	bl	80002a0 <__aeabi_uldivmod>
 80037f4:	4602      	mov	r2, r0
 80037f6:	460b      	mov	r3, r1
 80037f8:	4b61      	ldr	r3, [pc, #388]	@ (8003980 <UART_SetConfig+0x2d4>)
 80037fa:	fba3 2302 	umull	r2, r3, r3, r2
 80037fe:	095b      	lsrs	r3, r3, #5
 8003800:	011c      	lsls	r4, r3, #4
 8003802:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003806:	2200      	movs	r2, #0
 8003808:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800380c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003810:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003814:	4642      	mov	r2, r8
 8003816:	464b      	mov	r3, r9
 8003818:	1891      	adds	r1, r2, r2
 800381a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800381c:	415b      	adcs	r3, r3
 800381e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003820:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003824:	4641      	mov	r1, r8
 8003826:	eb12 0a01 	adds.w	sl, r2, r1
 800382a:	4649      	mov	r1, r9
 800382c:	eb43 0b01 	adc.w	fp, r3, r1
 8003830:	f04f 0200 	mov.w	r2, #0
 8003834:	f04f 0300 	mov.w	r3, #0
 8003838:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800383c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003840:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003844:	4692      	mov	sl, r2
 8003846:	469b      	mov	fp, r3
 8003848:	4643      	mov	r3, r8
 800384a:	eb1a 0303 	adds.w	r3, sl, r3
 800384e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003852:	464b      	mov	r3, r9
 8003854:	eb4b 0303 	adc.w	r3, fp, r3
 8003858:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800385c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003868:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800386c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003870:	460b      	mov	r3, r1
 8003872:	18db      	adds	r3, r3, r3
 8003874:	643b      	str	r3, [r7, #64]	@ 0x40
 8003876:	4613      	mov	r3, r2
 8003878:	eb42 0303 	adc.w	r3, r2, r3
 800387c:	647b      	str	r3, [r7, #68]	@ 0x44
 800387e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003882:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003886:	f7fc fd0b 	bl	80002a0 <__aeabi_uldivmod>
 800388a:	4602      	mov	r2, r0
 800388c:	460b      	mov	r3, r1
 800388e:	4611      	mov	r1, r2
 8003890:	4b3b      	ldr	r3, [pc, #236]	@ (8003980 <UART_SetConfig+0x2d4>)
 8003892:	fba3 2301 	umull	r2, r3, r3, r1
 8003896:	095b      	lsrs	r3, r3, #5
 8003898:	2264      	movs	r2, #100	@ 0x64
 800389a:	fb02 f303 	mul.w	r3, r2, r3
 800389e:	1acb      	subs	r3, r1, r3
 80038a0:	00db      	lsls	r3, r3, #3
 80038a2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80038a6:	4b36      	ldr	r3, [pc, #216]	@ (8003980 <UART_SetConfig+0x2d4>)
 80038a8:	fba3 2302 	umull	r2, r3, r3, r2
 80038ac:	095b      	lsrs	r3, r3, #5
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80038b4:	441c      	add	r4, r3
 80038b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038ba:	2200      	movs	r2, #0
 80038bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038c0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80038c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80038c8:	4642      	mov	r2, r8
 80038ca:	464b      	mov	r3, r9
 80038cc:	1891      	adds	r1, r2, r2
 80038ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80038d0:	415b      	adcs	r3, r3
 80038d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80038d8:	4641      	mov	r1, r8
 80038da:	1851      	adds	r1, r2, r1
 80038dc:	6339      	str	r1, [r7, #48]	@ 0x30
 80038de:	4649      	mov	r1, r9
 80038e0:	414b      	adcs	r3, r1
 80038e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80038e4:	f04f 0200 	mov.w	r2, #0
 80038e8:	f04f 0300 	mov.w	r3, #0
 80038ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80038f0:	4659      	mov	r1, fp
 80038f2:	00cb      	lsls	r3, r1, #3
 80038f4:	4651      	mov	r1, sl
 80038f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038fa:	4651      	mov	r1, sl
 80038fc:	00ca      	lsls	r2, r1, #3
 80038fe:	4610      	mov	r0, r2
 8003900:	4619      	mov	r1, r3
 8003902:	4603      	mov	r3, r0
 8003904:	4642      	mov	r2, r8
 8003906:	189b      	adds	r3, r3, r2
 8003908:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800390c:	464b      	mov	r3, r9
 800390e:	460a      	mov	r2, r1
 8003910:	eb42 0303 	adc.w	r3, r2, r3
 8003914:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003924:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003928:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800392c:	460b      	mov	r3, r1
 800392e:	18db      	adds	r3, r3, r3
 8003930:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003932:	4613      	mov	r3, r2
 8003934:	eb42 0303 	adc.w	r3, r2, r3
 8003938:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800393a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800393e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003942:	f7fc fcad 	bl	80002a0 <__aeabi_uldivmod>
 8003946:	4602      	mov	r2, r0
 8003948:	460b      	mov	r3, r1
 800394a:	4b0d      	ldr	r3, [pc, #52]	@ (8003980 <UART_SetConfig+0x2d4>)
 800394c:	fba3 1302 	umull	r1, r3, r3, r2
 8003950:	095b      	lsrs	r3, r3, #5
 8003952:	2164      	movs	r1, #100	@ 0x64
 8003954:	fb01 f303 	mul.w	r3, r1, r3
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	3332      	adds	r3, #50	@ 0x32
 800395e:	4a08      	ldr	r2, [pc, #32]	@ (8003980 <UART_SetConfig+0x2d4>)
 8003960:	fba2 2303 	umull	r2, r3, r2, r3
 8003964:	095b      	lsrs	r3, r3, #5
 8003966:	f003 0207 	and.w	r2, r3, #7
 800396a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4422      	add	r2, r4
 8003972:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003974:	e106      	b.n	8003b84 <UART_SetConfig+0x4d8>
 8003976:	bf00      	nop
 8003978:	40011000 	.word	0x40011000
 800397c:	40011400 	.word	0x40011400
 8003980:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003984:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003988:	2200      	movs	r2, #0
 800398a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800398e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003992:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003996:	4642      	mov	r2, r8
 8003998:	464b      	mov	r3, r9
 800399a:	1891      	adds	r1, r2, r2
 800399c:	6239      	str	r1, [r7, #32]
 800399e:	415b      	adcs	r3, r3
 80039a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80039a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80039a6:	4641      	mov	r1, r8
 80039a8:	1854      	adds	r4, r2, r1
 80039aa:	4649      	mov	r1, r9
 80039ac:	eb43 0501 	adc.w	r5, r3, r1
 80039b0:	f04f 0200 	mov.w	r2, #0
 80039b4:	f04f 0300 	mov.w	r3, #0
 80039b8:	00eb      	lsls	r3, r5, #3
 80039ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039be:	00e2      	lsls	r2, r4, #3
 80039c0:	4614      	mov	r4, r2
 80039c2:	461d      	mov	r5, r3
 80039c4:	4643      	mov	r3, r8
 80039c6:	18e3      	adds	r3, r4, r3
 80039c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80039cc:	464b      	mov	r3, r9
 80039ce:	eb45 0303 	adc.w	r3, r5, r3
 80039d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80039d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80039e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80039e6:	f04f 0200 	mov.w	r2, #0
 80039ea:	f04f 0300 	mov.w	r3, #0
 80039ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80039f2:	4629      	mov	r1, r5
 80039f4:	008b      	lsls	r3, r1, #2
 80039f6:	4621      	mov	r1, r4
 80039f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039fc:	4621      	mov	r1, r4
 80039fe:	008a      	lsls	r2, r1, #2
 8003a00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003a04:	f7fc fc4c 	bl	80002a0 <__aeabi_uldivmod>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	4b60      	ldr	r3, [pc, #384]	@ (8003b90 <UART_SetConfig+0x4e4>)
 8003a0e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a12:	095b      	lsrs	r3, r3, #5
 8003a14:	011c      	lsls	r4, r3, #4
 8003a16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a20:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003a24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003a28:	4642      	mov	r2, r8
 8003a2a:	464b      	mov	r3, r9
 8003a2c:	1891      	adds	r1, r2, r2
 8003a2e:	61b9      	str	r1, [r7, #24]
 8003a30:	415b      	adcs	r3, r3
 8003a32:	61fb      	str	r3, [r7, #28]
 8003a34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a38:	4641      	mov	r1, r8
 8003a3a:	1851      	adds	r1, r2, r1
 8003a3c:	6139      	str	r1, [r7, #16]
 8003a3e:	4649      	mov	r1, r9
 8003a40:	414b      	adcs	r3, r1
 8003a42:	617b      	str	r3, [r7, #20]
 8003a44:	f04f 0200 	mov.w	r2, #0
 8003a48:	f04f 0300 	mov.w	r3, #0
 8003a4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a50:	4659      	mov	r1, fp
 8003a52:	00cb      	lsls	r3, r1, #3
 8003a54:	4651      	mov	r1, sl
 8003a56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a5a:	4651      	mov	r1, sl
 8003a5c:	00ca      	lsls	r2, r1, #3
 8003a5e:	4610      	mov	r0, r2
 8003a60:	4619      	mov	r1, r3
 8003a62:	4603      	mov	r3, r0
 8003a64:	4642      	mov	r2, r8
 8003a66:	189b      	adds	r3, r3, r2
 8003a68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a6c:	464b      	mov	r3, r9
 8003a6e:	460a      	mov	r2, r1
 8003a70:	eb42 0303 	adc.w	r3, r2, r3
 8003a74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a82:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003a84:	f04f 0200 	mov.w	r2, #0
 8003a88:	f04f 0300 	mov.w	r3, #0
 8003a8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003a90:	4649      	mov	r1, r9
 8003a92:	008b      	lsls	r3, r1, #2
 8003a94:	4641      	mov	r1, r8
 8003a96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a9a:	4641      	mov	r1, r8
 8003a9c:	008a      	lsls	r2, r1, #2
 8003a9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003aa2:	f7fc fbfd 	bl	80002a0 <__aeabi_uldivmod>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	4611      	mov	r1, r2
 8003aac:	4b38      	ldr	r3, [pc, #224]	@ (8003b90 <UART_SetConfig+0x4e4>)
 8003aae:	fba3 2301 	umull	r2, r3, r3, r1
 8003ab2:	095b      	lsrs	r3, r3, #5
 8003ab4:	2264      	movs	r2, #100	@ 0x64
 8003ab6:	fb02 f303 	mul.w	r3, r2, r3
 8003aba:	1acb      	subs	r3, r1, r3
 8003abc:	011b      	lsls	r3, r3, #4
 8003abe:	3332      	adds	r3, #50	@ 0x32
 8003ac0:	4a33      	ldr	r2, [pc, #204]	@ (8003b90 <UART_SetConfig+0x4e4>)
 8003ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac6:	095b      	lsrs	r3, r3, #5
 8003ac8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003acc:	441c      	add	r4, r3
 8003ace:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ad6:	677a      	str	r2, [r7, #116]	@ 0x74
 8003ad8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003adc:	4642      	mov	r2, r8
 8003ade:	464b      	mov	r3, r9
 8003ae0:	1891      	adds	r1, r2, r2
 8003ae2:	60b9      	str	r1, [r7, #8]
 8003ae4:	415b      	adcs	r3, r3
 8003ae6:	60fb      	str	r3, [r7, #12]
 8003ae8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003aec:	4641      	mov	r1, r8
 8003aee:	1851      	adds	r1, r2, r1
 8003af0:	6039      	str	r1, [r7, #0]
 8003af2:	4649      	mov	r1, r9
 8003af4:	414b      	adcs	r3, r1
 8003af6:	607b      	str	r3, [r7, #4]
 8003af8:	f04f 0200 	mov.w	r2, #0
 8003afc:	f04f 0300 	mov.w	r3, #0
 8003b00:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b04:	4659      	mov	r1, fp
 8003b06:	00cb      	lsls	r3, r1, #3
 8003b08:	4651      	mov	r1, sl
 8003b0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b0e:	4651      	mov	r1, sl
 8003b10:	00ca      	lsls	r2, r1, #3
 8003b12:	4610      	mov	r0, r2
 8003b14:	4619      	mov	r1, r3
 8003b16:	4603      	mov	r3, r0
 8003b18:	4642      	mov	r2, r8
 8003b1a:	189b      	adds	r3, r3, r2
 8003b1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b1e:	464b      	mov	r3, r9
 8003b20:	460a      	mov	r2, r1
 8003b22:	eb42 0303 	adc.w	r3, r2, r3
 8003b26:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b32:	667a      	str	r2, [r7, #100]	@ 0x64
 8003b34:	f04f 0200 	mov.w	r2, #0
 8003b38:	f04f 0300 	mov.w	r3, #0
 8003b3c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003b40:	4649      	mov	r1, r9
 8003b42:	008b      	lsls	r3, r1, #2
 8003b44:	4641      	mov	r1, r8
 8003b46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b4a:	4641      	mov	r1, r8
 8003b4c:	008a      	lsls	r2, r1, #2
 8003b4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003b52:	f7fc fba5 	bl	80002a0 <__aeabi_uldivmod>
 8003b56:	4602      	mov	r2, r0
 8003b58:	460b      	mov	r3, r1
 8003b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b90 <UART_SetConfig+0x4e4>)
 8003b5c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b60:	095b      	lsrs	r3, r3, #5
 8003b62:	2164      	movs	r1, #100	@ 0x64
 8003b64:	fb01 f303 	mul.w	r3, r1, r3
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	011b      	lsls	r3, r3, #4
 8003b6c:	3332      	adds	r3, #50	@ 0x32
 8003b6e:	4a08      	ldr	r2, [pc, #32]	@ (8003b90 <UART_SetConfig+0x4e4>)
 8003b70:	fba2 2303 	umull	r2, r3, r2, r3
 8003b74:	095b      	lsrs	r3, r3, #5
 8003b76:	f003 020f 	and.w	r2, r3, #15
 8003b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4422      	add	r2, r4
 8003b82:	609a      	str	r2, [r3, #8]
}
 8003b84:	bf00      	nop
 8003b86:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b90:	51eb851f 	.word	0x51eb851f

08003b94 <sniprintf>:
 8003b94:	b40c      	push	{r2, r3}
 8003b96:	b530      	push	{r4, r5, lr}
 8003b98:	4b18      	ldr	r3, [pc, #96]	@ (8003bfc <sniprintf+0x68>)
 8003b9a:	1e0c      	subs	r4, r1, #0
 8003b9c:	681d      	ldr	r5, [r3, #0]
 8003b9e:	b09d      	sub	sp, #116	@ 0x74
 8003ba0:	da08      	bge.n	8003bb4 <sniprintf+0x20>
 8003ba2:	238b      	movs	r3, #139	@ 0x8b
 8003ba4:	602b      	str	r3, [r5, #0]
 8003ba6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003baa:	b01d      	add	sp, #116	@ 0x74
 8003bac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003bb0:	b002      	add	sp, #8
 8003bb2:	4770      	bx	lr
 8003bb4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003bb8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003bbc:	f04f 0300 	mov.w	r3, #0
 8003bc0:	931b      	str	r3, [sp, #108]	@ 0x6c
 8003bc2:	bf14      	ite	ne
 8003bc4:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8003bc8:	4623      	moveq	r3, r4
 8003bca:	9304      	str	r3, [sp, #16]
 8003bcc:	9307      	str	r3, [sp, #28]
 8003bce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003bd2:	9002      	str	r0, [sp, #8]
 8003bd4:	9006      	str	r0, [sp, #24]
 8003bd6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003bda:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003bdc:	ab21      	add	r3, sp, #132	@ 0x84
 8003bde:	a902      	add	r1, sp, #8
 8003be0:	4628      	mov	r0, r5
 8003be2:	9301      	str	r3, [sp, #4]
 8003be4:	f000 f994 	bl	8003f10 <_svfiprintf_r>
 8003be8:	1c43      	adds	r3, r0, #1
 8003bea:	bfbc      	itt	lt
 8003bec:	238b      	movlt	r3, #139	@ 0x8b
 8003bee:	602b      	strlt	r3, [r5, #0]
 8003bf0:	2c00      	cmp	r4, #0
 8003bf2:	d0da      	beq.n	8003baa <sniprintf+0x16>
 8003bf4:	9b02      	ldr	r3, [sp, #8]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	701a      	strb	r2, [r3, #0]
 8003bfa:	e7d6      	b.n	8003baa <sniprintf+0x16>
 8003bfc:	2000000c 	.word	0x2000000c

08003c00 <memset>:
 8003c00:	4402      	add	r2, r0
 8003c02:	4603      	mov	r3, r0
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d100      	bne.n	8003c0a <memset+0xa>
 8003c08:	4770      	bx	lr
 8003c0a:	f803 1b01 	strb.w	r1, [r3], #1
 8003c0e:	e7f9      	b.n	8003c04 <memset+0x4>

08003c10 <__errno>:
 8003c10:	4b01      	ldr	r3, [pc, #4]	@ (8003c18 <__errno+0x8>)
 8003c12:	6818      	ldr	r0, [r3, #0]
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	2000000c 	.word	0x2000000c

08003c1c <__libc_init_array>:
 8003c1c:	b570      	push	{r4, r5, r6, lr}
 8003c1e:	4d0d      	ldr	r5, [pc, #52]	@ (8003c54 <__libc_init_array+0x38>)
 8003c20:	4c0d      	ldr	r4, [pc, #52]	@ (8003c58 <__libc_init_array+0x3c>)
 8003c22:	1b64      	subs	r4, r4, r5
 8003c24:	10a4      	asrs	r4, r4, #2
 8003c26:	2600      	movs	r6, #0
 8003c28:	42a6      	cmp	r6, r4
 8003c2a:	d109      	bne.n	8003c40 <__libc_init_array+0x24>
 8003c2c:	4d0b      	ldr	r5, [pc, #44]	@ (8003c5c <__libc_init_array+0x40>)
 8003c2e:	4c0c      	ldr	r4, [pc, #48]	@ (8003c60 <__libc_init_array+0x44>)
 8003c30:	f000 fc64 	bl	80044fc <_init>
 8003c34:	1b64      	subs	r4, r4, r5
 8003c36:	10a4      	asrs	r4, r4, #2
 8003c38:	2600      	movs	r6, #0
 8003c3a:	42a6      	cmp	r6, r4
 8003c3c:	d105      	bne.n	8003c4a <__libc_init_array+0x2e>
 8003c3e:	bd70      	pop	{r4, r5, r6, pc}
 8003c40:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c44:	4798      	blx	r3
 8003c46:	3601      	adds	r6, #1
 8003c48:	e7ee      	b.n	8003c28 <__libc_init_array+0xc>
 8003c4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c4e:	4798      	blx	r3
 8003c50:	3601      	adds	r6, #1
 8003c52:	e7f2      	b.n	8003c3a <__libc_init_array+0x1e>
 8003c54:	080045b0 	.word	0x080045b0
 8003c58:	080045b0 	.word	0x080045b0
 8003c5c:	080045b0 	.word	0x080045b0
 8003c60:	080045b4 	.word	0x080045b4

08003c64 <__retarget_lock_acquire_recursive>:
 8003c64:	4770      	bx	lr

08003c66 <__retarget_lock_release_recursive>:
 8003c66:	4770      	bx	lr

08003c68 <_free_r>:
 8003c68:	b538      	push	{r3, r4, r5, lr}
 8003c6a:	4605      	mov	r5, r0
 8003c6c:	2900      	cmp	r1, #0
 8003c6e:	d041      	beq.n	8003cf4 <_free_r+0x8c>
 8003c70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c74:	1f0c      	subs	r4, r1, #4
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	bfb8      	it	lt
 8003c7a:	18e4      	addlt	r4, r4, r3
 8003c7c:	f000 f8e0 	bl	8003e40 <__malloc_lock>
 8003c80:	4a1d      	ldr	r2, [pc, #116]	@ (8003cf8 <_free_r+0x90>)
 8003c82:	6813      	ldr	r3, [r2, #0]
 8003c84:	b933      	cbnz	r3, 8003c94 <_free_r+0x2c>
 8003c86:	6063      	str	r3, [r4, #4]
 8003c88:	6014      	str	r4, [r2, #0]
 8003c8a:	4628      	mov	r0, r5
 8003c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c90:	f000 b8dc 	b.w	8003e4c <__malloc_unlock>
 8003c94:	42a3      	cmp	r3, r4
 8003c96:	d908      	bls.n	8003caa <_free_r+0x42>
 8003c98:	6820      	ldr	r0, [r4, #0]
 8003c9a:	1821      	adds	r1, r4, r0
 8003c9c:	428b      	cmp	r3, r1
 8003c9e:	bf01      	itttt	eq
 8003ca0:	6819      	ldreq	r1, [r3, #0]
 8003ca2:	685b      	ldreq	r3, [r3, #4]
 8003ca4:	1809      	addeq	r1, r1, r0
 8003ca6:	6021      	streq	r1, [r4, #0]
 8003ca8:	e7ed      	b.n	8003c86 <_free_r+0x1e>
 8003caa:	461a      	mov	r2, r3
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	b10b      	cbz	r3, 8003cb4 <_free_r+0x4c>
 8003cb0:	42a3      	cmp	r3, r4
 8003cb2:	d9fa      	bls.n	8003caa <_free_r+0x42>
 8003cb4:	6811      	ldr	r1, [r2, #0]
 8003cb6:	1850      	adds	r0, r2, r1
 8003cb8:	42a0      	cmp	r0, r4
 8003cba:	d10b      	bne.n	8003cd4 <_free_r+0x6c>
 8003cbc:	6820      	ldr	r0, [r4, #0]
 8003cbe:	4401      	add	r1, r0
 8003cc0:	1850      	adds	r0, r2, r1
 8003cc2:	4283      	cmp	r3, r0
 8003cc4:	6011      	str	r1, [r2, #0]
 8003cc6:	d1e0      	bne.n	8003c8a <_free_r+0x22>
 8003cc8:	6818      	ldr	r0, [r3, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	6053      	str	r3, [r2, #4]
 8003cce:	4408      	add	r0, r1
 8003cd0:	6010      	str	r0, [r2, #0]
 8003cd2:	e7da      	b.n	8003c8a <_free_r+0x22>
 8003cd4:	d902      	bls.n	8003cdc <_free_r+0x74>
 8003cd6:	230c      	movs	r3, #12
 8003cd8:	602b      	str	r3, [r5, #0]
 8003cda:	e7d6      	b.n	8003c8a <_free_r+0x22>
 8003cdc:	6820      	ldr	r0, [r4, #0]
 8003cde:	1821      	adds	r1, r4, r0
 8003ce0:	428b      	cmp	r3, r1
 8003ce2:	bf04      	itt	eq
 8003ce4:	6819      	ldreq	r1, [r3, #0]
 8003ce6:	685b      	ldreq	r3, [r3, #4]
 8003ce8:	6063      	str	r3, [r4, #4]
 8003cea:	bf04      	itt	eq
 8003cec:	1809      	addeq	r1, r1, r0
 8003cee:	6021      	streq	r1, [r4, #0]
 8003cf0:	6054      	str	r4, [r2, #4]
 8003cf2:	e7ca      	b.n	8003c8a <_free_r+0x22>
 8003cf4:	bd38      	pop	{r3, r4, r5, pc}
 8003cf6:	bf00      	nop
 8003cf8:	2000039c 	.word	0x2000039c

08003cfc <sbrk_aligned>:
 8003cfc:	b570      	push	{r4, r5, r6, lr}
 8003cfe:	4e0f      	ldr	r6, [pc, #60]	@ (8003d3c <sbrk_aligned+0x40>)
 8003d00:	460c      	mov	r4, r1
 8003d02:	6831      	ldr	r1, [r6, #0]
 8003d04:	4605      	mov	r5, r0
 8003d06:	b911      	cbnz	r1, 8003d0e <sbrk_aligned+0x12>
 8003d08:	f000 fba4 	bl	8004454 <_sbrk_r>
 8003d0c:	6030      	str	r0, [r6, #0]
 8003d0e:	4621      	mov	r1, r4
 8003d10:	4628      	mov	r0, r5
 8003d12:	f000 fb9f 	bl	8004454 <_sbrk_r>
 8003d16:	1c43      	adds	r3, r0, #1
 8003d18:	d103      	bne.n	8003d22 <sbrk_aligned+0x26>
 8003d1a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003d1e:	4620      	mov	r0, r4
 8003d20:	bd70      	pop	{r4, r5, r6, pc}
 8003d22:	1cc4      	adds	r4, r0, #3
 8003d24:	f024 0403 	bic.w	r4, r4, #3
 8003d28:	42a0      	cmp	r0, r4
 8003d2a:	d0f8      	beq.n	8003d1e <sbrk_aligned+0x22>
 8003d2c:	1a21      	subs	r1, r4, r0
 8003d2e:	4628      	mov	r0, r5
 8003d30:	f000 fb90 	bl	8004454 <_sbrk_r>
 8003d34:	3001      	adds	r0, #1
 8003d36:	d1f2      	bne.n	8003d1e <sbrk_aligned+0x22>
 8003d38:	e7ef      	b.n	8003d1a <sbrk_aligned+0x1e>
 8003d3a:	bf00      	nop
 8003d3c:	20000398 	.word	0x20000398

08003d40 <_malloc_r>:
 8003d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d44:	1ccd      	adds	r5, r1, #3
 8003d46:	f025 0503 	bic.w	r5, r5, #3
 8003d4a:	3508      	adds	r5, #8
 8003d4c:	2d0c      	cmp	r5, #12
 8003d4e:	bf38      	it	cc
 8003d50:	250c      	movcc	r5, #12
 8003d52:	2d00      	cmp	r5, #0
 8003d54:	4606      	mov	r6, r0
 8003d56:	db01      	blt.n	8003d5c <_malloc_r+0x1c>
 8003d58:	42a9      	cmp	r1, r5
 8003d5a:	d904      	bls.n	8003d66 <_malloc_r+0x26>
 8003d5c:	230c      	movs	r3, #12
 8003d5e:	6033      	str	r3, [r6, #0]
 8003d60:	2000      	movs	r0, #0
 8003d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003e3c <_malloc_r+0xfc>
 8003d6a:	f000 f869 	bl	8003e40 <__malloc_lock>
 8003d6e:	f8d8 3000 	ldr.w	r3, [r8]
 8003d72:	461c      	mov	r4, r3
 8003d74:	bb44      	cbnz	r4, 8003dc8 <_malloc_r+0x88>
 8003d76:	4629      	mov	r1, r5
 8003d78:	4630      	mov	r0, r6
 8003d7a:	f7ff ffbf 	bl	8003cfc <sbrk_aligned>
 8003d7e:	1c43      	adds	r3, r0, #1
 8003d80:	4604      	mov	r4, r0
 8003d82:	d158      	bne.n	8003e36 <_malloc_r+0xf6>
 8003d84:	f8d8 4000 	ldr.w	r4, [r8]
 8003d88:	4627      	mov	r7, r4
 8003d8a:	2f00      	cmp	r7, #0
 8003d8c:	d143      	bne.n	8003e16 <_malloc_r+0xd6>
 8003d8e:	2c00      	cmp	r4, #0
 8003d90:	d04b      	beq.n	8003e2a <_malloc_r+0xea>
 8003d92:	6823      	ldr	r3, [r4, #0]
 8003d94:	4639      	mov	r1, r7
 8003d96:	4630      	mov	r0, r6
 8003d98:	eb04 0903 	add.w	r9, r4, r3
 8003d9c:	f000 fb5a 	bl	8004454 <_sbrk_r>
 8003da0:	4581      	cmp	r9, r0
 8003da2:	d142      	bne.n	8003e2a <_malloc_r+0xea>
 8003da4:	6821      	ldr	r1, [r4, #0]
 8003da6:	1a6d      	subs	r5, r5, r1
 8003da8:	4629      	mov	r1, r5
 8003daa:	4630      	mov	r0, r6
 8003dac:	f7ff ffa6 	bl	8003cfc <sbrk_aligned>
 8003db0:	3001      	adds	r0, #1
 8003db2:	d03a      	beq.n	8003e2a <_malloc_r+0xea>
 8003db4:	6823      	ldr	r3, [r4, #0]
 8003db6:	442b      	add	r3, r5
 8003db8:	6023      	str	r3, [r4, #0]
 8003dba:	f8d8 3000 	ldr.w	r3, [r8]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	bb62      	cbnz	r2, 8003e1c <_malloc_r+0xdc>
 8003dc2:	f8c8 7000 	str.w	r7, [r8]
 8003dc6:	e00f      	b.n	8003de8 <_malloc_r+0xa8>
 8003dc8:	6822      	ldr	r2, [r4, #0]
 8003dca:	1b52      	subs	r2, r2, r5
 8003dcc:	d420      	bmi.n	8003e10 <_malloc_r+0xd0>
 8003dce:	2a0b      	cmp	r2, #11
 8003dd0:	d917      	bls.n	8003e02 <_malloc_r+0xc2>
 8003dd2:	1961      	adds	r1, r4, r5
 8003dd4:	42a3      	cmp	r3, r4
 8003dd6:	6025      	str	r5, [r4, #0]
 8003dd8:	bf18      	it	ne
 8003dda:	6059      	strne	r1, [r3, #4]
 8003ddc:	6863      	ldr	r3, [r4, #4]
 8003dde:	bf08      	it	eq
 8003de0:	f8c8 1000 	streq.w	r1, [r8]
 8003de4:	5162      	str	r2, [r4, r5]
 8003de6:	604b      	str	r3, [r1, #4]
 8003de8:	4630      	mov	r0, r6
 8003dea:	f000 f82f 	bl	8003e4c <__malloc_unlock>
 8003dee:	f104 000b 	add.w	r0, r4, #11
 8003df2:	1d23      	adds	r3, r4, #4
 8003df4:	f020 0007 	bic.w	r0, r0, #7
 8003df8:	1ac2      	subs	r2, r0, r3
 8003dfa:	bf1c      	itt	ne
 8003dfc:	1a1b      	subne	r3, r3, r0
 8003dfe:	50a3      	strne	r3, [r4, r2]
 8003e00:	e7af      	b.n	8003d62 <_malloc_r+0x22>
 8003e02:	6862      	ldr	r2, [r4, #4]
 8003e04:	42a3      	cmp	r3, r4
 8003e06:	bf0c      	ite	eq
 8003e08:	f8c8 2000 	streq.w	r2, [r8]
 8003e0c:	605a      	strne	r2, [r3, #4]
 8003e0e:	e7eb      	b.n	8003de8 <_malloc_r+0xa8>
 8003e10:	4623      	mov	r3, r4
 8003e12:	6864      	ldr	r4, [r4, #4]
 8003e14:	e7ae      	b.n	8003d74 <_malloc_r+0x34>
 8003e16:	463c      	mov	r4, r7
 8003e18:	687f      	ldr	r7, [r7, #4]
 8003e1a:	e7b6      	b.n	8003d8a <_malloc_r+0x4a>
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	42a3      	cmp	r3, r4
 8003e22:	d1fb      	bne.n	8003e1c <_malloc_r+0xdc>
 8003e24:	2300      	movs	r3, #0
 8003e26:	6053      	str	r3, [r2, #4]
 8003e28:	e7de      	b.n	8003de8 <_malloc_r+0xa8>
 8003e2a:	230c      	movs	r3, #12
 8003e2c:	6033      	str	r3, [r6, #0]
 8003e2e:	4630      	mov	r0, r6
 8003e30:	f000 f80c 	bl	8003e4c <__malloc_unlock>
 8003e34:	e794      	b.n	8003d60 <_malloc_r+0x20>
 8003e36:	6005      	str	r5, [r0, #0]
 8003e38:	e7d6      	b.n	8003de8 <_malloc_r+0xa8>
 8003e3a:	bf00      	nop
 8003e3c:	2000039c 	.word	0x2000039c

08003e40 <__malloc_lock>:
 8003e40:	4801      	ldr	r0, [pc, #4]	@ (8003e48 <__malloc_lock+0x8>)
 8003e42:	f7ff bf0f 	b.w	8003c64 <__retarget_lock_acquire_recursive>
 8003e46:	bf00      	nop
 8003e48:	20000394 	.word	0x20000394

08003e4c <__malloc_unlock>:
 8003e4c:	4801      	ldr	r0, [pc, #4]	@ (8003e54 <__malloc_unlock+0x8>)
 8003e4e:	f7ff bf0a 	b.w	8003c66 <__retarget_lock_release_recursive>
 8003e52:	bf00      	nop
 8003e54:	20000394 	.word	0x20000394

08003e58 <__ssputs_r>:
 8003e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e5c:	688e      	ldr	r6, [r1, #8]
 8003e5e:	461f      	mov	r7, r3
 8003e60:	42be      	cmp	r6, r7
 8003e62:	680b      	ldr	r3, [r1, #0]
 8003e64:	4682      	mov	sl, r0
 8003e66:	460c      	mov	r4, r1
 8003e68:	4690      	mov	r8, r2
 8003e6a:	d82d      	bhi.n	8003ec8 <__ssputs_r+0x70>
 8003e6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003e70:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003e74:	d026      	beq.n	8003ec4 <__ssputs_r+0x6c>
 8003e76:	6965      	ldr	r5, [r4, #20]
 8003e78:	6909      	ldr	r1, [r1, #16]
 8003e7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e7e:	eba3 0901 	sub.w	r9, r3, r1
 8003e82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e86:	1c7b      	adds	r3, r7, #1
 8003e88:	444b      	add	r3, r9
 8003e8a:	106d      	asrs	r5, r5, #1
 8003e8c:	429d      	cmp	r5, r3
 8003e8e:	bf38      	it	cc
 8003e90:	461d      	movcc	r5, r3
 8003e92:	0553      	lsls	r3, r2, #21
 8003e94:	d527      	bpl.n	8003ee6 <__ssputs_r+0x8e>
 8003e96:	4629      	mov	r1, r5
 8003e98:	f7ff ff52 	bl	8003d40 <_malloc_r>
 8003e9c:	4606      	mov	r6, r0
 8003e9e:	b360      	cbz	r0, 8003efa <__ssputs_r+0xa2>
 8003ea0:	6921      	ldr	r1, [r4, #16]
 8003ea2:	464a      	mov	r2, r9
 8003ea4:	f000 fae6 	bl	8004474 <memcpy>
 8003ea8:	89a3      	ldrh	r3, [r4, #12]
 8003eaa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003eae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003eb2:	81a3      	strh	r3, [r4, #12]
 8003eb4:	6126      	str	r6, [r4, #16]
 8003eb6:	6165      	str	r5, [r4, #20]
 8003eb8:	444e      	add	r6, r9
 8003eba:	eba5 0509 	sub.w	r5, r5, r9
 8003ebe:	6026      	str	r6, [r4, #0]
 8003ec0:	60a5      	str	r5, [r4, #8]
 8003ec2:	463e      	mov	r6, r7
 8003ec4:	42be      	cmp	r6, r7
 8003ec6:	d900      	bls.n	8003eca <__ssputs_r+0x72>
 8003ec8:	463e      	mov	r6, r7
 8003eca:	6820      	ldr	r0, [r4, #0]
 8003ecc:	4632      	mov	r2, r6
 8003ece:	4641      	mov	r1, r8
 8003ed0:	f000 faa6 	bl	8004420 <memmove>
 8003ed4:	68a3      	ldr	r3, [r4, #8]
 8003ed6:	1b9b      	subs	r3, r3, r6
 8003ed8:	60a3      	str	r3, [r4, #8]
 8003eda:	6823      	ldr	r3, [r4, #0]
 8003edc:	4433      	add	r3, r6
 8003ede:	6023      	str	r3, [r4, #0]
 8003ee0:	2000      	movs	r0, #0
 8003ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ee6:	462a      	mov	r2, r5
 8003ee8:	f000 fad2 	bl	8004490 <_realloc_r>
 8003eec:	4606      	mov	r6, r0
 8003eee:	2800      	cmp	r0, #0
 8003ef0:	d1e0      	bne.n	8003eb4 <__ssputs_r+0x5c>
 8003ef2:	6921      	ldr	r1, [r4, #16]
 8003ef4:	4650      	mov	r0, sl
 8003ef6:	f7ff feb7 	bl	8003c68 <_free_r>
 8003efa:	230c      	movs	r3, #12
 8003efc:	f8ca 3000 	str.w	r3, [sl]
 8003f00:	89a3      	ldrh	r3, [r4, #12]
 8003f02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f06:	81a3      	strh	r3, [r4, #12]
 8003f08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003f0c:	e7e9      	b.n	8003ee2 <__ssputs_r+0x8a>
	...

08003f10 <_svfiprintf_r>:
 8003f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f14:	4698      	mov	r8, r3
 8003f16:	898b      	ldrh	r3, [r1, #12]
 8003f18:	061b      	lsls	r3, r3, #24
 8003f1a:	b09d      	sub	sp, #116	@ 0x74
 8003f1c:	4607      	mov	r7, r0
 8003f1e:	460d      	mov	r5, r1
 8003f20:	4614      	mov	r4, r2
 8003f22:	d510      	bpl.n	8003f46 <_svfiprintf_r+0x36>
 8003f24:	690b      	ldr	r3, [r1, #16]
 8003f26:	b973      	cbnz	r3, 8003f46 <_svfiprintf_r+0x36>
 8003f28:	2140      	movs	r1, #64	@ 0x40
 8003f2a:	f7ff ff09 	bl	8003d40 <_malloc_r>
 8003f2e:	6028      	str	r0, [r5, #0]
 8003f30:	6128      	str	r0, [r5, #16]
 8003f32:	b930      	cbnz	r0, 8003f42 <_svfiprintf_r+0x32>
 8003f34:	230c      	movs	r3, #12
 8003f36:	603b      	str	r3, [r7, #0]
 8003f38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003f3c:	b01d      	add	sp, #116	@ 0x74
 8003f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f42:	2340      	movs	r3, #64	@ 0x40
 8003f44:	616b      	str	r3, [r5, #20]
 8003f46:	2300      	movs	r3, #0
 8003f48:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f4a:	2320      	movs	r3, #32
 8003f4c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003f50:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f54:	2330      	movs	r3, #48	@ 0x30
 8003f56:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80040f4 <_svfiprintf_r+0x1e4>
 8003f5a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003f5e:	f04f 0901 	mov.w	r9, #1
 8003f62:	4623      	mov	r3, r4
 8003f64:	469a      	mov	sl, r3
 8003f66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f6a:	b10a      	cbz	r2, 8003f70 <_svfiprintf_r+0x60>
 8003f6c:	2a25      	cmp	r2, #37	@ 0x25
 8003f6e:	d1f9      	bne.n	8003f64 <_svfiprintf_r+0x54>
 8003f70:	ebba 0b04 	subs.w	fp, sl, r4
 8003f74:	d00b      	beq.n	8003f8e <_svfiprintf_r+0x7e>
 8003f76:	465b      	mov	r3, fp
 8003f78:	4622      	mov	r2, r4
 8003f7a:	4629      	mov	r1, r5
 8003f7c:	4638      	mov	r0, r7
 8003f7e:	f7ff ff6b 	bl	8003e58 <__ssputs_r>
 8003f82:	3001      	adds	r0, #1
 8003f84:	f000 80a7 	beq.w	80040d6 <_svfiprintf_r+0x1c6>
 8003f88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003f8a:	445a      	add	r2, fp
 8003f8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8003f8e:	f89a 3000 	ldrb.w	r3, [sl]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f000 809f 	beq.w	80040d6 <_svfiprintf_r+0x1c6>
 8003f98:	2300      	movs	r3, #0
 8003f9a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003f9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003fa2:	f10a 0a01 	add.w	sl, sl, #1
 8003fa6:	9304      	str	r3, [sp, #16]
 8003fa8:	9307      	str	r3, [sp, #28]
 8003faa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003fae:	931a      	str	r3, [sp, #104]	@ 0x68
 8003fb0:	4654      	mov	r4, sl
 8003fb2:	2205      	movs	r2, #5
 8003fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fb8:	484e      	ldr	r0, [pc, #312]	@ (80040f4 <_svfiprintf_r+0x1e4>)
 8003fba:	f7fc f921 	bl	8000200 <memchr>
 8003fbe:	9a04      	ldr	r2, [sp, #16]
 8003fc0:	b9d8      	cbnz	r0, 8003ffa <_svfiprintf_r+0xea>
 8003fc2:	06d0      	lsls	r0, r2, #27
 8003fc4:	bf44      	itt	mi
 8003fc6:	2320      	movmi	r3, #32
 8003fc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003fcc:	0711      	lsls	r1, r2, #28
 8003fce:	bf44      	itt	mi
 8003fd0:	232b      	movmi	r3, #43	@ 0x2b
 8003fd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003fd6:	f89a 3000 	ldrb.w	r3, [sl]
 8003fda:	2b2a      	cmp	r3, #42	@ 0x2a
 8003fdc:	d015      	beq.n	800400a <_svfiprintf_r+0xfa>
 8003fde:	9a07      	ldr	r2, [sp, #28]
 8003fe0:	4654      	mov	r4, sl
 8003fe2:	2000      	movs	r0, #0
 8003fe4:	f04f 0c0a 	mov.w	ip, #10
 8003fe8:	4621      	mov	r1, r4
 8003fea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fee:	3b30      	subs	r3, #48	@ 0x30
 8003ff0:	2b09      	cmp	r3, #9
 8003ff2:	d94b      	bls.n	800408c <_svfiprintf_r+0x17c>
 8003ff4:	b1b0      	cbz	r0, 8004024 <_svfiprintf_r+0x114>
 8003ff6:	9207      	str	r2, [sp, #28]
 8003ff8:	e014      	b.n	8004024 <_svfiprintf_r+0x114>
 8003ffa:	eba0 0308 	sub.w	r3, r0, r8
 8003ffe:	fa09 f303 	lsl.w	r3, r9, r3
 8004002:	4313      	orrs	r3, r2
 8004004:	9304      	str	r3, [sp, #16]
 8004006:	46a2      	mov	sl, r4
 8004008:	e7d2      	b.n	8003fb0 <_svfiprintf_r+0xa0>
 800400a:	9b03      	ldr	r3, [sp, #12]
 800400c:	1d19      	adds	r1, r3, #4
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	9103      	str	r1, [sp, #12]
 8004012:	2b00      	cmp	r3, #0
 8004014:	bfbb      	ittet	lt
 8004016:	425b      	neglt	r3, r3
 8004018:	f042 0202 	orrlt.w	r2, r2, #2
 800401c:	9307      	strge	r3, [sp, #28]
 800401e:	9307      	strlt	r3, [sp, #28]
 8004020:	bfb8      	it	lt
 8004022:	9204      	strlt	r2, [sp, #16]
 8004024:	7823      	ldrb	r3, [r4, #0]
 8004026:	2b2e      	cmp	r3, #46	@ 0x2e
 8004028:	d10a      	bne.n	8004040 <_svfiprintf_r+0x130>
 800402a:	7863      	ldrb	r3, [r4, #1]
 800402c:	2b2a      	cmp	r3, #42	@ 0x2a
 800402e:	d132      	bne.n	8004096 <_svfiprintf_r+0x186>
 8004030:	9b03      	ldr	r3, [sp, #12]
 8004032:	1d1a      	adds	r2, r3, #4
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	9203      	str	r2, [sp, #12]
 8004038:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800403c:	3402      	adds	r4, #2
 800403e:	9305      	str	r3, [sp, #20]
 8004040:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004104 <_svfiprintf_r+0x1f4>
 8004044:	7821      	ldrb	r1, [r4, #0]
 8004046:	2203      	movs	r2, #3
 8004048:	4650      	mov	r0, sl
 800404a:	f7fc f8d9 	bl	8000200 <memchr>
 800404e:	b138      	cbz	r0, 8004060 <_svfiprintf_r+0x150>
 8004050:	9b04      	ldr	r3, [sp, #16]
 8004052:	eba0 000a 	sub.w	r0, r0, sl
 8004056:	2240      	movs	r2, #64	@ 0x40
 8004058:	4082      	lsls	r2, r0
 800405a:	4313      	orrs	r3, r2
 800405c:	3401      	adds	r4, #1
 800405e:	9304      	str	r3, [sp, #16]
 8004060:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004064:	4824      	ldr	r0, [pc, #144]	@ (80040f8 <_svfiprintf_r+0x1e8>)
 8004066:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800406a:	2206      	movs	r2, #6
 800406c:	f7fc f8c8 	bl	8000200 <memchr>
 8004070:	2800      	cmp	r0, #0
 8004072:	d036      	beq.n	80040e2 <_svfiprintf_r+0x1d2>
 8004074:	4b21      	ldr	r3, [pc, #132]	@ (80040fc <_svfiprintf_r+0x1ec>)
 8004076:	bb1b      	cbnz	r3, 80040c0 <_svfiprintf_r+0x1b0>
 8004078:	9b03      	ldr	r3, [sp, #12]
 800407a:	3307      	adds	r3, #7
 800407c:	f023 0307 	bic.w	r3, r3, #7
 8004080:	3308      	adds	r3, #8
 8004082:	9303      	str	r3, [sp, #12]
 8004084:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004086:	4433      	add	r3, r6
 8004088:	9309      	str	r3, [sp, #36]	@ 0x24
 800408a:	e76a      	b.n	8003f62 <_svfiprintf_r+0x52>
 800408c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004090:	460c      	mov	r4, r1
 8004092:	2001      	movs	r0, #1
 8004094:	e7a8      	b.n	8003fe8 <_svfiprintf_r+0xd8>
 8004096:	2300      	movs	r3, #0
 8004098:	3401      	adds	r4, #1
 800409a:	9305      	str	r3, [sp, #20]
 800409c:	4619      	mov	r1, r3
 800409e:	f04f 0c0a 	mov.w	ip, #10
 80040a2:	4620      	mov	r0, r4
 80040a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040a8:	3a30      	subs	r2, #48	@ 0x30
 80040aa:	2a09      	cmp	r2, #9
 80040ac:	d903      	bls.n	80040b6 <_svfiprintf_r+0x1a6>
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d0c6      	beq.n	8004040 <_svfiprintf_r+0x130>
 80040b2:	9105      	str	r1, [sp, #20]
 80040b4:	e7c4      	b.n	8004040 <_svfiprintf_r+0x130>
 80040b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80040ba:	4604      	mov	r4, r0
 80040bc:	2301      	movs	r3, #1
 80040be:	e7f0      	b.n	80040a2 <_svfiprintf_r+0x192>
 80040c0:	ab03      	add	r3, sp, #12
 80040c2:	9300      	str	r3, [sp, #0]
 80040c4:	462a      	mov	r2, r5
 80040c6:	4b0e      	ldr	r3, [pc, #56]	@ (8004100 <_svfiprintf_r+0x1f0>)
 80040c8:	a904      	add	r1, sp, #16
 80040ca:	4638      	mov	r0, r7
 80040cc:	f3af 8000 	nop.w
 80040d0:	1c42      	adds	r2, r0, #1
 80040d2:	4606      	mov	r6, r0
 80040d4:	d1d6      	bne.n	8004084 <_svfiprintf_r+0x174>
 80040d6:	89ab      	ldrh	r3, [r5, #12]
 80040d8:	065b      	lsls	r3, r3, #25
 80040da:	f53f af2d 	bmi.w	8003f38 <_svfiprintf_r+0x28>
 80040de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80040e0:	e72c      	b.n	8003f3c <_svfiprintf_r+0x2c>
 80040e2:	ab03      	add	r3, sp, #12
 80040e4:	9300      	str	r3, [sp, #0]
 80040e6:	462a      	mov	r2, r5
 80040e8:	4b05      	ldr	r3, [pc, #20]	@ (8004100 <_svfiprintf_r+0x1f0>)
 80040ea:	a904      	add	r1, sp, #16
 80040ec:	4638      	mov	r0, r7
 80040ee:	f000 f879 	bl	80041e4 <_printf_i>
 80040f2:	e7ed      	b.n	80040d0 <_svfiprintf_r+0x1c0>
 80040f4:	08004574 	.word	0x08004574
 80040f8:	0800457e 	.word	0x0800457e
 80040fc:	00000000 	.word	0x00000000
 8004100:	08003e59 	.word	0x08003e59
 8004104:	0800457a 	.word	0x0800457a

08004108 <_printf_common>:
 8004108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800410c:	4616      	mov	r6, r2
 800410e:	4698      	mov	r8, r3
 8004110:	688a      	ldr	r2, [r1, #8]
 8004112:	690b      	ldr	r3, [r1, #16]
 8004114:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004118:	4293      	cmp	r3, r2
 800411a:	bfb8      	it	lt
 800411c:	4613      	movlt	r3, r2
 800411e:	6033      	str	r3, [r6, #0]
 8004120:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004124:	4607      	mov	r7, r0
 8004126:	460c      	mov	r4, r1
 8004128:	b10a      	cbz	r2, 800412e <_printf_common+0x26>
 800412a:	3301      	adds	r3, #1
 800412c:	6033      	str	r3, [r6, #0]
 800412e:	6823      	ldr	r3, [r4, #0]
 8004130:	0699      	lsls	r1, r3, #26
 8004132:	bf42      	ittt	mi
 8004134:	6833      	ldrmi	r3, [r6, #0]
 8004136:	3302      	addmi	r3, #2
 8004138:	6033      	strmi	r3, [r6, #0]
 800413a:	6825      	ldr	r5, [r4, #0]
 800413c:	f015 0506 	ands.w	r5, r5, #6
 8004140:	d106      	bne.n	8004150 <_printf_common+0x48>
 8004142:	f104 0a19 	add.w	sl, r4, #25
 8004146:	68e3      	ldr	r3, [r4, #12]
 8004148:	6832      	ldr	r2, [r6, #0]
 800414a:	1a9b      	subs	r3, r3, r2
 800414c:	42ab      	cmp	r3, r5
 800414e:	dc26      	bgt.n	800419e <_printf_common+0x96>
 8004150:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004154:	6822      	ldr	r2, [r4, #0]
 8004156:	3b00      	subs	r3, #0
 8004158:	bf18      	it	ne
 800415a:	2301      	movne	r3, #1
 800415c:	0692      	lsls	r2, r2, #26
 800415e:	d42b      	bmi.n	80041b8 <_printf_common+0xb0>
 8004160:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004164:	4641      	mov	r1, r8
 8004166:	4638      	mov	r0, r7
 8004168:	47c8      	blx	r9
 800416a:	3001      	adds	r0, #1
 800416c:	d01e      	beq.n	80041ac <_printf_common+0xa4>
 800416e:	6823      	ldr	r3, [r4, #0]
 8004170:	6922      	ldr	r2, [r4, #16]
 8004172:	f003 0306 	and.w	r3, r3, #6
 8004176:	2b04      	cmp	r3, #4
 8004178:	bf02      	ittt	eq
 800417a:	68e5      	ldreq	r5, [r4, #12]
 800417c:	6833      	ldreq	r3, [r6, #0]
 800417e:	1aed      	subeq	r5, r5, r3
 8004180:	68a3      	ldr	r3, [r4, #8]
 8004182:	bf0c      	ite	eq
 8004184:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004188:	2500      	movne	r5, #0
 800418a:	4293      	cmp	r3, r2
 800418c:	bfc4      	itt	gt
 800418e:	1a9b      	subgt	r3, r3, r2
 8004190:	18ed      	addgt	r5, r5, r3
 8004192:	2600      	movs	r6, #0
 8004194:	341a      	adds	r4, #26
 8004196:	42b5      	cmp	r5, r6
 8004198:	d11a      	bne.n	80041d0 <_printf_common+0xc8>
 800419a:	2000      	movs	r0, #0
 800419c:	e008      	b.n	80041b0 <_printf_common+0xa8>
 800419e:	2301      	movs	r3, #1
 80041a0:	4652      	mov	r2, sl
 80041a2:	4641      	mov	r1, r8
 80041a4:	4638      	mov	r0, r7
 80041a6:	47c8      	blx	r9
 80041a8:	3001      	adds	r0, #1
 80041aa:	d103      	bne.n	80041b4 <_printf_common+0xac>
 80041ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80041b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041b4:	3501      	adds	r5, #1
 80041b6:	e7c6      	b.n	8004146 <_printf_common+0x3e>
 80041b8:	18e1      	adds	r1, r4, r3
 80041ba:	1c5a      	adds	r2, r3, #1
 80041bc:	2030      	movs	r0, #48	@ 0x30
 80041be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80041c2:	4422      	add	r2, r4
 80041c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80041c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80041cc:	3302      	adds	r3, #2
 80041ce:	e7c7      	b.n	8004160 <_printf_common+0x58>
 80041d0:	2301      	movs	r3, #1
 80041d2:	4622      	mov	r2, r4
 80041d4:	4641      	mov	r1, r8
 80041d6:	4638      	mov	r0, r7
 80041d8:	47c8      	blx	r9
 80041da:	3001      	adds	r0, #1
 80041dc:	d0e6      	beq.n	80041ac <_printf_common+0xa4>
 80041de:	3601      	adds	r6, #1
 80041e0:	e7d9      	b.n	8004196 <_printf_common+0x8e>
	...

080041e4 <_printf_i>:
 80041e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041e8:	7e0f      	ldrb	r7, [r1, #24]
 80041ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80041ec:	2f78      	cmp	r7, #120	@ 0x78
 80041ee:	4691      	mov	r9, r2
 80041f0:	4680      	mov	r8, r0
 80041f2:	460c      	mov	r4, r1
 80041f4:	469a      	mov	sl, r3
 80041f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80041fa:	d807      	bhi.n	800420c <_printf_i+0x28>
 80041fc:	2f62      	cmp	r7, #98	@ 0x62
 80041fe:	d80a      	bhi.n	8004216 <_printf_i+0x32>
 8004200:	2f00      	cmp	r7, #0
 8004202:	f000 80d1 	beq.w	80043a8 <_printf_i+0x1c4>
 8004206:	2f58      	cmp	r7, #88	@ 0x58
 8004208:	f000 80b8 	beq.w	800437c <_printf_i+0x198>
 800420c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004210:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004214:	e03a      	b.n	800428c <_printf_i+0xa8>
 8004216:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800421a:	2b15      	cmp	r3, #21
 800421c:	d8f6      	bhi.n	800420c <_printf_i+0x28>
 800421e:	a101      	add	r1, pc, #4	@ (adr r1, 8004224 <_printf_i+0x40>)
 8004220:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004224:	0800427d 	.word	0x0800427d
 8004228:	08004291 	.word	0x08004291
 800422c:	0800420d 	.word	0x0800420d
 8004230:	0800420d 	.word	0x0800420d
 8004234:	0800420d 	.word	0x0800420d
 8004238:	0800420d 	.word	0x0800420d
 800423c:	08004291 	.word	0x08004291
 8004240:	0800420d 	.word	0x0800420d
 8004244:	0800420d 	.word	0x0800420d
 8004248:	0800420d 	.word	0x0800420d
 800424c:	0800420d 	.word	0x0800420d
 8004250:	0800438f 	.word	0x0800438f
 8004254:	080042bb 	.word	0x080042bb
 8004258:	08004349 	.word	0x08004349
 800425c:	0800420d 	.word	0x0800420d
 8004260:	0800420d 	.word	0x0800420d
 8004264:	080043b1 	.word	0x080043b1
 8004268:	0800420d 	.word	0x0800420d
 800426c:	080042bb 	.word	0x080042bb
 8004270:	0800420d 	.word	0x0800420d
 8004274:	0800420d 	.word	0x0800420d
 8004278:	08004351 	.word	0x08004351
 800427c:	6833      	ldr	r3, [r6, #0]
 800427e:	1d1a      	adds	r2, r3, #4
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6032      	str	r2, [r6, #0]
 8004284:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004288:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800428c:	2301      	movs	r3, #1
 800428e:	e09c      	b.n	80043ca <_printf_i+0x1e6>
 8004290:	6833      	ldr	r3, [r6, #0]
 8004292:	6820      	ldr	r0, [r4, #0]
 8004294:	1d19      	adds	r1, r3, #4
 8004296:	6031      	str	r1, [r6, #0]
 8004298:	0606      	lsls	r6, r0, #24
 800429a:	d501      	bpl.n	80042a0 <_printf_i+0xbc>
 800429c:	681d      	ldr	r5, [r3, #0]
 800429e:	e003      	b.n	80042a8 <_printf_i+0xc4>
 80042a0:	0645      	lsls	r5, r0, #25
 80042a2:	d5fb      	bpl.n	800429c <_printf_i+0xb8>
 80042a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80042a8:	2d00      	cmp	r5, #0
 80042aa:	da03      	bge.n	80042b4 <_printf_i+0xd0>
 80042ac:	232d      	movs	r3, #45	@ 0x2d
 80042ae:	426d      	negs	r5, r5
 80042b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80042b4:	4858      	ldr	r0, [pc, #352]	@ (8004418 <_printf_i+0x234>)
 80042b6:	230a      	movs	r3, #10
 80042b8:	e011      	b.n	80042de <_printf_i+0xfa>
 80042ba:	6821      	ldr	r1, [r4, #0]
 80042bc:	6833      	ldr	r3, [r6, #0]
 80042be:	0608      	lsls	r0, r1, #24
 80042c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80042c4:	d402      	bmi.n	80042cc <_printf_i+0xe8>
 80042c6:	0649      	lsls	r1, r1, #25
 80042c8:	bf48      	it	mi
 80042ca:	b2ad      	uxthmi	r5, r5
 80042cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80042ce:	4852      	ldr	r0, [pc, #328]	@ (8004418 <_printf_i+0x234>)
 80042d0:	6033      	str	r3, [r6, #0]
 80042d2:	bf14      	ite	ne
 80042d4:	230a      	movne	r3, #10
 80042d6:	2308      	moveq	r3, #8
 80042d8:	2100      	movs	r1, #0
 80042da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80042de:	6866      	ldr	r6, [r4, #4]
 80042e0:	60a6      	str	r6, [r4, #8]
 80042e2:	2e00      	cmp	r6, #0
 80042e4:	db05      	blt.n	80042f2 <_printf_i+0x10e>
 80042e6:	6821      	ldr	r1, [r4, #0]
 80042e8:	432e      	orrs	r6, r5
 80042ea:	f021 0104 	bic.w	r1, r1, #4
 80042ee:	6021      	str	r1, [r4, #0]
 80042f0:	d04b      	beq.n	800438a <_printf_i+0x1a6>
 80042f2:	4616      	mov	r6, r2
 80042f4:	fbb5 f1f3 	udiv	r1, r5, r3
 80042f8:	fb03 5711 	mls	r7, r3, r1, r5
 80042fc:	5dc7      	ldrb	r7, [r0, r7]
 80042fe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004302:	462f      	mov	r7, r5
 8004304:	42bb      	cmp	r3, r7
 8004306:	460d      	mov	r5, r1
 8004308:	d9f4      	bls.n	80042f4 <_printf_i+0x110>
 800430a:	2b08      	cmp	r3, #8
 800430c:	d10b      	bne.n	8004326 <_printf_i+0x142>
 800430e:	6823      	ldr	r3, [r4, #0]
 8004310:	07df      	lsls	r7, r3, #31
 8004312:	d508      	bpl.n	8004326 <_printf_i+0x142>
 8004314:	6923      	ldr	r3, [r4, #16]
 8004316:	6861      	ldr	r1, [r4, #4]
 8004318:	4299      	cmp	r1, r3
 800431a:	bfde      	ittt	le
 800431c:	2330      	movle	r3, #48	@ 0x30
 800431e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004322:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004326:	1b92      	subs	r2, r2, r6
 8004328:	6122      	str	r2, [r4, #16]
 800432a:	f8cd a000 	str.w	sl, [sp]
 800432e:	464b      	mov	r3, r9
 8004330:	aa03      	add	r2, sp, #12
 8004332:	4621      	mov	r1, r4
 8004334:	4640      	mov	r0, r8
 8004336:	f7ff fee7 	bl	8004108 <_printf_common>
 800433a:	3001      	adds	r0, #1
 800433c:	d14a      	bne.n	80043d4 <_printf_i+0x1f0>
 800433e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004342:	b004      	add	sp, #16
 8004344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004348:	6823      	ldr	r3, [r4, #0]
 800434a:	f043 0320 	orr.w	r3, r3, #32
 800434e:	6023      	str	r3, [r4, #0]
 8004350:	4832      	ldr	r0, [pc, #200]	@ (800441c <_printf_i+0x238>)
 8004352:	2778      	movs	r7, #120	@ 0x78
 8004354:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004358:	6823      	ldr	r3, [r4, #0]
 800435a:	6831      	ldr	r1, [r6, #0]
 800435c:	061f      	lsls	r7, r3, #24
 800435e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004362:	d402      	bmi.n	800436a <_printf_i+0x186>
 8004364:	065f      	lsls	r7, r3, #25
 8004366:	bf48      	it	mi
 8004368:	b2ad      	uxthmi	r5, r5
 800436a:	6031      	str	r1, [r6, #0]
 800436c:	07d9      	lsls	r1, r3, #31
 800436e:	bf44      	itt	mi
 8004370:	f043 0320 	orrmi.w	r3, r3, #32
 8004374:	6023      	strmi	r3, [r4, #0]
 8004376:	b11d      	cbz	r5, 8004380 <_printf_i+0x19c>
 8004378:	2310      	movs	r3, #16
 800437a:	e7ad      	b.n	80042d8 <_printf_i+0xf4>
 800437c:	4826      	ldr	r0, [pc, #152]	@ (8004418 <_printf_i+0x234>)
 800437e:	e7e9      	b.n	8004354 <_printf_i+0x170>
 8004380:	6823      	ldr	r3, [r4, #0]
 8004382:	f023 0320 	bic.w	r3, r3, #32
 8004386:	6023      	str	r3, [r4, #0]
 8004388:	e7f6      	b.n	8004378 <_printf_i+0x194>
 800438a:	4616      	mov	r6, r2
 800438c:	e7bd      	b.n	800430a <_printf_i+0x126>
 800438e:	6833      	ldr	r3, [r6, #0]
 8004390:	6825      	ldr	r5, [r4, #0]
 8004392:	6961      	ldr	r1, [r4, #20]
 8004394:	1d18      	adds	r0, r3, #4
 8004396:	6030      	str	r0, [r6, #0]
 8004398:	062e      	lsls	r6, r5, #24
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	d501      	bpl.n	80043a2 <_printf_i+0x1be>
 800439e:	6019      	str	r1, [r3, #0]
 80043a0:	e002      	b.n	80043a8 <_printf_i+0x1c4>
 80043a2:	0668      	lsls	r0, r5, #25
 80043a4:	d5fb      	bpl.n	800439e <_printf_i+0x1ba>
 80043a6:	8019      	strh	r1, [r3, #0]
 80043a8:	2300      	movs	r3, #0
 80043aa:	6123      	str	r3, [r4, #16]
 80043ac:	4616      	mov	r6, r2
 80043ae:	e7bc      	b.n	800432a <_printf_i+0x146>
 80043b0:	6833      	ldr	r3, [r6, #0]
 80043b2:	1d1a      	adds	r2, r3, #4
 80043b4:	6032      	str	r2, [r6, #0]
 80043b6:	681e      	ldr	r6, [r3, #0]
 80043b8:	6862      	ldr	r2, [r4, #4]
 80043ba:	2100      	movs	r1, #0
 80043bc:	4630      	mov	r0, r6
 80043be:	f7fb ff1f 	bl	8000200 <memchr>
 80043c2:	b108      	cbz	r0, 80043c8 <_printf_i+0x1e4>
 80043c4:	1b80      	subs	r0, r0, r6
 80043c6:	6060      	str	r0, [r4, #4]
 80043c8:	6863      	ldr	r3, [r4, #4]
 80043ca:	6123      	str	r3, [r4, #16]
 80043cc:	2300      	movs	r3, #0
 80043ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043d2:	e7aa      	b.n	800432a <_printf_i+0x146>
 80043d4:	6923      	ldr	r3, [r4, #16]
 80043d6:	4632      	mov	r2, r6
 80043d8:	4649      	mov	r1, r9
 80043da:	4640      	mov	r0, r8
 80043dc:	47d0      	blx	sl
 80043de:	3001      	adds	r0, #1
 80043e0:	d0ad      	beq.n	800433e <_printf_i+0x15a>
 80043e2:	6823      	ldr	r3, [r4, #0]
 80043e4:	079b      	lsls	r3, r3, #30
 80043e6:	d413      	bmi.n	8004410 <_printf_i+0x22c>
 80043e8:	68e0      	ldr	r0, [r4, #12]
 80043ea:	9b03      	ldr	r3, [sp, #12]
 80043ec:	4298      	cmp	r0, r3
 80043ee:	bfb8      	it	lt
 80043f0:	4618      	movlt	r0, r3
 80043f2:	e7a6      	b.n	8004342 <_printf_i+0x15e>
 80043f4:	2301      	movs	r3, #1
 80043f6:	4632      	mov	r2, r6
 80043f8:	4649      	mov	r1, r9
 80043fa:	4640      	mov	r0, r8
 80043fc:	47d0      	blx	sl
 80043fe:	3001      	adds	r0, #1
 8004400:	d09d      	beq.n	800433e <_printf_i+0x15a>
 8004402:	3501      	adds	r5, #1
 8004404:	68e3      	ldr	r3, [r4, #12]
 8004406:	9903      	ldr	r1, [sp, #12]
 8004408:	1a5b      	subs	r3, r3, r1
 800440a:	42ab      	cmp	r3, r5
 800440c:	dcf2      	bgt.n	80043f4 <_printf_i+0x210>
 800440e:	e7eb      	b.n	80043e8 <_printf_i+0x204>
 8004410:	2500      	movs	r5, #0
 8004412:	f104 0619 	add.w	r6, r4, #25
 8004416:	e7f5      	b.n	8004404 <_printf_i+0x220>
 8004418:	08004585 	.word	0x08004585
 800441c:	08004596 	.word	0x08004596

08004420 <memmove>:
 8004420:	4288      	cmp	r0, r1
 8004422:	b510      	push	{r4, lr}
 8004424:	eb01 0402 	add.w	r4, r1, r2
 8004428:	d902      	bls.n	8004430 <memmove+0x10>
 800442a:	4284      	cmp	r4, r0
 800442c:	4623      	mov	r3, r4
 800442e:	d807      	bhi.n	8004440 <memmove+0x20>
 8004430:	1e43      	subs	r3, r0, #1
 8004432:	42a1      	cmp	r1, r4
 8004434:	d008      	beq.n	8004448 <memmove+0x28>
 8004436:	f811 2b01 	ldrb.w	r2, [r1], #1
 800443a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800443e:	e7f8      	b.n	8004432 <memmove+0x12>
 8004440:	4402      	add	r2, r0
 8004442:	4601      	mov	r1, r0
 8004444:	428a      	cmp	r2, r1
 8004446:	d100      	bne.n	800444a <memmove+0x2a>
 8004448:	bd10      	pop	{r4, pc}
 800444a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800444e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004452:	e7f7      	b.n	8004444 <memmove+0x24>

08004454 <_sbrk_r>:
 8004454:	b538      	push	{r3, r4, r5, lr}
 8004456:	4d06      	ldr	r5, [pc, #24]	@ (8004470 <_sbrk_r+0x1c>)
 8004458:	2300      	movs	r3, #0
 800445a:	4604      	mov	r4, r0
 800445c:	4608      	mov	r0, r1
 800445e:	602b      	str	r3, [r5, #0]
 8004460:	f7fc fc9a 	bl	8000d98 <_sbrk>
 8004464:	1c43      	adds	r3, r0, #1
 8004466:	d102      	bne.n	800446e <_sbrk_r+0x1a>
 8004468:	682b      	ldr	r3, [r5, #0]
 800446a:	b103      	cbz	r3, 800446e <_sbrk_r+0x1a>
 800446c:	6023      	str	r3, [r4, #0]
 800446e:	bd38      	pop	{r3, r4, r5, pc}
 8004470:	20000390 	.word	0x20000390

08004474 <memcpy>:
 8004474:	440a      	add	r2, r1
 8004476:	4291      	cmp	r1, r2
 8004478:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800447c:	d100      	bne.n	8004480 <memcpy+0xc>
 800447e:	4770      	bx	lr
 8004480:	b510      	push	{r4, lr}
 8004482:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004486:	f803 4f01 	strb.w	r4, [r3, #1]!
 800448a:	4291      	cmp	r1, r2
 800448c:	d1f9      	bne.n	8004482 <memcpy+0xe>
 800448e:	bd10      	pop	{r4, pc}

08004490 <_realloc_r>:
 8004490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004494:	4607      	mov	r7, r0
 8004496:	4614      	mov	r4, r2
 8004498:	460d      	mov	r5, r1
 800449a:	b921      	cbnz	r1, 80044a6 <_realloc_r+0x16>
 800449c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044a0:	4611      	mov	r1, r2
 80044a2:	f7ff bc4d 	b.w	8003d40 <_malloc_r>
 80044a6:	b92a      	cbnz	r2, 80044b4 <_realloc_r+0x24>
 80044a8:	f7ff fbde 	bl	8003c68 <_free_r>
 80044ac:	4625      	mov	r5, r4
 80044ae:	4628      	mov	r0, r5
 80044b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044b4:	f000 f81a 	bl	80044ec <_malloc_usable_size_r>
 80044b8:	4284      	cmp	r4, r0
 80044ba:	4606      	mov	r6, r0
 80044bc:	d802      	bhi.n	80044c4 <_realloc_r+0x34>
 80044be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80044c2:	d8f4      	bhi.n	80044ae <_realloc_r+0x1e>
 80044c4:	4621      	mov	r1, r4
 80044c6:	4638      	mov	r0, r7
 80044c8:	f7ff fc3a 	bl	8003d40 <_malloc_r>
 80044cc:	4680      	mov	r8, r0
 80044ce:	b908      	cbnz	r0, 80044d4 <_realloc_r+0x44>
 80044d0:	4645      	mov	r5, r8
 80044d2:	e7ec      	b.n	80044ae <_realloc_r+0x1e>
 80044d4:	42b4      	cmp	r4, r6
 80044d6:	4622      	mov	r2, r4
 80044d8:	4629      	mov	r1, r5
 80044da:	bf28      	it	cs
 80044dc:	4632      	movcs	r2, r6
 80044de:	f7ff ffc9 	bl	8004474 <memcpy>
 80044e2:	4629      	mov	r1, r5
 80044e4:	4638      	mov	r0, r7
 80044e6:	f7ff fbbf 	bl	8003c68 <_free_r>
 80044ea:	e7f1      	b.n	80044d0 <_realloc_r+0x40>

080044ec <_malloc_usable_size_r>:
 80044ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044f0:	1f18      	subs	r0, r3, #4
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	bfbc      	itt	lt
 80044f6:	580b      	ldrlt	r3, [r1, r0]
 80044f8:	18c0      	addlt	r0, r0, r3
 80044fa:	4770      	bx	lr

080044fc <_init>:
 80044fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044fe:	bf00      	nop
 8004500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004502:	bc08      	pop	{r3}
 8004504:	469e      	mov	lr, r3
 8004506:	4770      	bx	lr

08004508 <_fini>:
 8004508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800450a:	bf00      	nop
 800450c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800450e:	bc08      	pop	{r3}
 8004510:	469e      	mov	lr, r3
 8004512:	4770      	bx	lr
